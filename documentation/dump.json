[
  {
    "__docId__": 0,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/client/Header.js",
    "memberof": null,
    "longname": "src/client/Header.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import React, { Component } from 'react';\r\n\r\nconst Header = () => (\r\n\t<div className=\"ui three item menu borderless\">\r\n\t\t<h1 className=\"item\">\r\n\t\t\tSocto\r\n\t\t\t<i className=\"icon-thumbs-ok\"></i>\r\n\t\t</h1>\r\n\r\n\t\t<a className=\"item\">\r\n\t\t\t<i className=\"huge help circle icon\"></i>\r\n\t\t\tlogo\r\n\t\t</a>\r\n\r\n\t\t{/* Not Implemented Login/Register yet\r\n\t\t\t<div className=\"item\">\r\n\t\t\t<div className=\"ui buttons\">\r\n\t\t\t<button className=\"ui button\">Join</button>\r\n\t\t\t<div className=\"or\"></div>\r\n\t\t\t<button className=\"ui button\">Log In</button>\r\n\t\t\t</div>\r\n\t\t</div> */}\r\n\t</div>\r\n);\r\n\r\nexport default Header;\r\n"
  },
  {
    "__docId__": 1,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "Header",
    "memberof": "src/client/Header.js",
    "longname": "src/client/Header.js~Header",
    "access": null,
    "export": true,
    "importPath": "solid-octo-disco/src/client/Header.js",
    "importStyle": "Header",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/client/index.js",
    "memberof": null,
    "longname": "src/client/index.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import 'babel-polyfill';\r\nimport ReactDOM from 'react-dom';\r\nimport React from 'react';\r\nimport { combineReducers, compose, applyMiddleware, createStore } from 'redux';\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport { Provider } from 'react-redux';\r\nimport { searchTermsReducer, feedReducer, searchOnlyDB } from './search/searchReducer';\r\nimport mostFrequentReducer from './results/mostfrequent/mostFrequentReducer';\r\nimport footballCategoryFiltersReducer from './search/categories/categoryFiltersReducer';\r\nimport { fetchAllFootballSeasons } from './search/categories/categoryFilterActions';\r\nimport moment from 'moment';\r\n\r\nconst feedApp = combineReducers({\r\n  searchTerms: searchTermsReducer,\r\n  mostFrequent: mostFrequentReducer,\r\n  feed: feedReducer,\r\n  football: footballCategoryFiltersReducer,\r\n  searchOnlyDB,\r\n});\r\n\r\nconst middlewares = [thunkMiddleware];\r\n\r\nconst finalStore = createStore(\r\n  feedApp,\r\n  compose(\r\n    applyMiddleware(...middlewares),\r\n    window.devToolsExtension ? window.devToolsExtension() : f => f\r\n  )\r\n);\r\n\r\n// fetch all the football seasons on startup\r\nfinalStore.dispatch(fetchAllFootballSeasons(moment().year() - 1, true));\r\n\r\nconst rootElement = document.getElementById('root');\r\n\r\nlet render = () => {\r\n  const App = require('./queryInterface').default;\r\n  ReactDOM.render(\r\n    <Provider store={finalStore}>\r\n      <App />\r\n    </Provider>,\r\n    rootElement\r\n  );\r\n};\r\n\r\nif (module.hot) {\r\n  // Support hot reloading of components\r\n  const renderApp = render;\r\n\r\n  // and display an overlay for runtime errors\r\n  const renderError = (error) => {\r\n    const RedBox = require('redbox-react');\r\n    ReactDOM.render(\r\n      <RedBox error={error} />,\r\n      rootElement\r\n    );\r\n  };\r\n\r\n  render = () => {\r\n    try {\r\n      renderApp();\r\n    } catch (error) {\r\n      renderError(error);\r\n    }\r\n  };\r\n\r\n  module.hot.accept('./queryInterface', () => {\r\n    setTimeout(render);\r\n  });\r\n}\r\n\r\nrender();\r\n"
  },
  {
    "__docId__": 3,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "feedApp",
    "memberof": "src/client/index.js",
    "longname": "src/client/index.js~feedApp",
    "access": null,
    "export": false,
    "importPath": "solid-octo-disco/src/client/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 4,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "middlewares",
    "memberof": "src/client/index.js",
    "longname": "src/client/index.js~middlewares",
    "access": null,
    "export": false,
    "importPath": "solid-octo-disco/src/client/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 5,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "finalStore",
    "memberof": "src/client/index.js",
    "longname": "src/client/index.js~finalStore",
    "access": null,
    "export": false,
    "importPath": "solid-octo-disco/src/client/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 6,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "rootElement",
    "memberof": "src/client/index.js",
    "longname": "src/client/index.js~rootElement",
    "access": null,
    "export": false,
    "importPath": "solid-octo-disco/src/client/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 7,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "render",
    "memberof": "src/client/index.js",
    "longname": "src/client/index.js~render",
    "access": null,
    "export": false,
    "importPath": "solid-octo-disco/src/client/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 8,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/client/queryInterface.js",
    "memberof": null,
    "longname": "src/client/queryInterface.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import React, { Component } from 'react';\r\nimport Header from './Header';\r\nimport Search from './search/Search';\r\nimport Results from './results/Results.js';\r\n\r\n/**\r\n * App is the core React component that describes our application interface.\r\n * Note how it is incredibly simple; it contains references to a {@link Header},\r\n * {@link Search}, {@link Results} and {@link Footer} component.\r\n * To see what is in the Search component (which is the most important),\r\n * follow the import reference seen above on line 3, and open the file\r\n * './search/Search.js'.\r\n */\r\nconst App = () => (\r\n  <div>\r\n\r\n    <Header />\r\n\r\n    <div className=\"ui grid\">\r\n      <Search />\r\n      <Results />\r\n    </div>\r\n\r\n    {/* <Footer /> */}\r\n  </div>\r\n);\r\n\r\nexport default App;\r\n"
  },
  {
    "__docId__": 9,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "App",
    "memberof": "src/client/queryInterface.js",
    "longname": "src/client/queryInterface.js~App",
    "access": null,
    "export": true,
    "importPath": "solid-octo-disco/src/client/queryInterface.js",
    "importStyle": "App",
    "description": "App is the core React component that describes our application interface.\nNote how it is incredibly simple; it contains references to a {@link Header},\n{@link Search}, {@link Results} and {@link Footer} component.\nTo see what is in the Search component (which is the most important),\nfollow the import reference seen above on line 3, and open the file\n'./search/Search.js'.",
    "lineNumber": 14,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 10,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/client/results/Feed.js",
    "memberof": null,
    "longname": "src/client/results/Feed.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport moment from 'moment';\r\nimport { setFeedPageNumber, setFeedPageLimit } from '../search/searchActions';\r\nimport { TwitterProfilePicture } from '../Twitter';\r\nimport { fetchPost, newPromiseChain } from '../../shared/utilities';\r\n\r\nclass Feed extends Component {\r\n  componentDidMount() {\r\n    $('.popup').popup();\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    $('.popup').popup();\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      feed, paginationInfo,\r\n      toggledWords, isWordsToggledActionHide,\r\n      toggledUsers, isUsersToggledActionHide,\r\n    } = this.props;\r\n\r\n    const filteredFeed = filterPostsForFeed(\r\n      feed, toggledWords, isWordsToggledActionHide,\r\n      toggledUsers, isUsersToggledActionHide\r\n    );\r\n\r\n    const paginatedFeed = paginatePosts(filteredFeed, paginationInfo);\r\n\r\n    return (\r\n      <div className=\"ui raised purple segment\">\r\n        <div className=\"ui two column grid\">\r\n          <div className=\"column\">\r\n            <h3>Search results</h3>\r\n          </div>\r\n          <div className=\"right aligned column\">\r\n            Showing {filteredFeed.length}/{feed.length} posts\r\n          </div>\r\n        </div>\r\n        <div className=\"ui divided items\">\r\n          {paginatedFeed.map((feedItem) => (\r\n            <FeedItem content={feedItem} key={feedItem.data.id} />\r\n          ))}\r\n        </div>\r\n        <div>\r\n          <PaginationButtons\r\n            numberOfPages={Math.ceil(filteredFeed.length / paginationInfo.limit)}\r\n            paginationInfo={paginationInfo}\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nFeed.propTypes = {\r\n  feed: React.PropTypes.array,\r\n  paginationInfo: React.PropTypes.object,\r\n  toggledWords: React.PropTypes.array,\r\n  isWordsToggledActionHide: React.PropTypes.bool,\r\n  toggledUsers: React.PropTypes.array,\r\n  isUsersToggledActionHide: React.PropTypes.bool,\r\n};\r\n\r\nconst filterPostsForFeed = (\r\n  feed, toggledWords, isWordsToggledActionHide, toggledUsers, isUsersToggledActionHide\r\n) => (\r\n  feed.filter((feedItem) => {\r\n    const content = feedItem.data.content;\r\n    const authorId = feedItem.author.id;\r\n\r\n    // If we can find the chosen hidden word in this tweet, block the post\r\n    for (const toggledWord of toggledWords) {\r\n      if (content.indexOf(toggledWord) > -1) {\r\n        return !isWordsToggledActionHide && isUsersToggledActionHide;\r\n      }\r\n    }\r\n\r\n    for (const toggledUser of toggledUsers) {\r\n      if (authorId === toggledUser) {\r\n        return !isUsersToggledActionHide && isWordsToggledActionHide;\r\n      }\r\n    }\r\n\r\n    return isWordsToggledActionHide && isUsersToggledActionHide;\r\n  }\r\n));\r\n\r\nconst paginatePosts = (feed, paginationInfo) => {\r\n  const pageNumber = paginationInfo.number;\r\n  const pageLimit = paginationInfo.limit;\r\n\r\n  const first = (pageNumber - 1) * pageLimit;\r\n  const last = first + pageLimit;\r\n\r\n  return feed.slice(first, last);\r\n};\r\n\r\nlet PaginationButtons = ({ dispatch, numberOfPages, paginationInfo }) => (\r\n  <div className=\"ui grid\">\r\n    <div className=\"two column row\">\r\n      <div className=\"left column\">\r\n        <LimitButtons\r\n          paginationInfo={paginationInfo}\r\n          updateLimit={(limit) => { dispatch(setFeedPageLimit(limit)); }} /> results per page.\r\n      </div>\r\n      <br />\r\n      <div className=\"right aligned column\">\r\n        <PagePicker\r\n          numberOfPages={numberOfPages}\r\n          paginationInfo={paginationInfo}\r\n          updatePageNumber={(limit) => { dispatch(setFeedPageNumber(limit)); }}\r\n        />\r\n      </div>\r\n    </div>\r\n  </div>\r\n);\r\nPaginationButtons = connect()(PaginationButtons);\r\n\r\nconst LimitButtons = ({ updateLimit, paginationInfo }) => (\r\n  <div className=\"ui buttons\">\r\n    <LimitButton limit={10} paginationInfo={paginationInfo} updateLimit={updateLimit} />\r\n    <LimitButton limit={25} paginationInfo={paginationInfo} updateLimit={updateLimit} />\r\n    <LimitButton limit={50} paginationInfo={paginationInfo} updateLimit={updateLimit} />\r\n  </div>\r\n);\r\n\r\nconst PagePicker = ({ updatePageNumber, numberOfPages, paginationInfo }) => (\r\n  <div className=\"ui right labeled input\">\r\n    <div className=\"ui label\">Page</div>\r\n    <input type=\"number\"\r\n      placeholder=\"Page number...\"\r\n      onChange={(e) => {\r\n        const value = Math.min(e.target.value, numberOfPages);\r\n        if (value !== '' && !isNaN(parseFloat(value)) && isFinite(value)) {\r\n          e.target.value = value;\r\n          updatePageNumber(value);\r\n        }\r\n      }}\r\n      defaultValue={paginationInfo.number}\r\n    />\r\n    <div className=\"ui label\">\r\n      / {numberOfPages}\r\n    </div>\r\n  </div>\r\n);\r\n\r\nconst LimitButton = ({ updateLimit, limit, paginationInfo }) => {\r\n  const active = limit === paginationInfo.limit;\r\n  return (\r\n    <button\r\n      className={`ui ${active ? 'blue' : ''} button`}\r\n      onClick={() => {\r\n        updateLimit(limit);\r\n      }}>\r\n      {limit}\r\n    </button>\r\n  );\r\n};\r\n\r\nconst FeedItem = ({ content }) => {\r\n  let post;\r\n  switch (content.source) {\r\n    case 'twitter': post = <Tweet content={content} />;\r\n  }\r\n\r\n  return (\r\n    <div className=\"item\">\r\n      <div className=\"meta\"\r\n           style={{ minWidth: '40px', textAlign: 'center', verticalAlign: 'middle' }}\r\n      >\r\n        <i className={`${content.source} icon`} />\r\n        <br />\r\n      </div>\r\n      {post}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst Tweet = ({ content }) => {\r\n  // Inject HTML <a> tags around any Twitter approved t.co link\r\n  const tweetWithLinks = content.data.content.replace(/(https\\:\\/\\/t\\.co\\/.+?)\\b/g, '<a href=\"$1\">$1</a>');\r\n  const decodedAuthorName = content.author.name;\r\n\r\n  let goldStar;\r\n  if (content.data.likes + content.data.retweets > 10) {\r\n    goldStar = (<i className=\"yellow star icon popup\" data-title=\"Popular tweet\" />);\r\n  }\r\n\r\n  let quotedContent;\r\n  if (content.data.contains_a_quoted_tweet) {\r\n    quotedContent = <QuotedTweet tweetId={content.data.contains_a_quoted_tweet} />;\r\n  }\r\n\r\n  let verifiedImage;\r\n  if (content.author.is_verified) {\r\n    verifiedImage = <img className=\"popup image\" src=\"public/images/verified.png\" alt=\"User is verified on Twitter.\" data-title=\"User is verified on Twitter\" />\r\n  }\r\n\r\n  const image_url = content.data.image_url;\r\n  let tweetImage;\r\n  if (image_url !== 'none') {\r\n    tweetImage = <a href={image_url} target=\"_blank\">\r\n        <img className=\"ui bordered centered rounded image\" style={{maxHeight: '400px', width: '60%'}} src={image_url} alt={`Embedded image: ${image_url}`} />\r\n      </a>\r\n  }\r\n\r\n  // Just below we use dangerousSetInnerHTML.\r\n  // The content it is display has come from Twitter and is safe to render as actual HTML,\r\n  // as all HTML entities have already been encoded - e.g., instead of <script> a tweet\r\n  // would contain &lt;script&gt;, which is totally safe to render.\r\n\r\n  return (\r\n    <div className=\"content\">\r\n      <TwitterProfilePicture author={content.author} size=\"tiny\" />\r\n\r\n      {goldStar}\r\n      <a href={`//twitter.com/${content.author.handle}`} target=\"_blank\">\r\n        <strong className=\"tweet fullname header\">{decodedAuthorName}</strong>\r\n        &nbsp;\r\n        <span style={{color: '#A333C8'}}>@{content.author.handle} {verifiedImage}</span>\r\n      </a>\r\n      <br />\r\n      <div dangerouslySetInnerHTML={{ __html: tweetWithLinks }} />\r\n\r\n      {tweetImage}\r\n      {quotedContent}\r\n\r\n      <div className=\"meta\">\r\n        <span className=\"date\">\r\n          <a href={`//twitter.com/${content.author.handle}/status/${content.data.id}`}>\r\n            {moment(content.data.date).calendar()}\r\n          </a>\r\n        </span>\r\n        |\r\n        <span className=\"likes popup\" data-title=\"Likes\">\r\n          <i className=\"like icon\" />{content.data.likes}\r\n        </span>\r\n        |\r\n        <span className=\"retweets popup\" data-title=\"Retweets\">\r\n          <i className=\"retweet icon\" />{content.data.retweets}\r\n        </span>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nclass QuotedTweet extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      tweetContent: null,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    fetch(`/tweet/${this.props.tweetId}`, {})\r\n      .then((result) => result.json())\r\n      .then(\r\n        (result) => {\r\n          this.setState({\r\n            tweetContent: {\r\n              data: result.tweet,\r\n              author: result.author,\r\n            },\r\n          });\r\n        },\r\n        (rej) => {\r\n          console.warn('Unable to fetch quoted tweet.', rej);\r\n        }\r\n      );\r\n  }\r\n\r\n  render() {\r\n    let loadingClass = 'active';\r\n    let displayableTweetContent;\r\n\r\n    if (this.state.tweetContent !== null) {\r\n      displayableTweetContent = (\r\n        <div>\r\n          <Tweet content={this.state.tweetContent} />\r\n        </div>\r\n      );\r\n      loadingClass = '';\r\n    }\r\n\r\n    return (\r\n      <div>\r\n      <div className=\"ui icon message\">\r\n        <i className=\"left quote icon popup\" data-title=\"Quoting tweet\" />\r\n        <div className=\"content\">\r\n          <div className={`ui ${loadingClass} inverted dimmer`}>\r\n            <div className=\"ui small text loader\">Fetching quoted tweet</div>\r\n          </div>\r\n          {displayableTweetContent}\r\n        </div>\r\n      </div>\r\n    </div>\r\n    );\r\n  }\r\n}\r\nQuotedTweet.propTypes = {\r\n  tweetId: React.PropTypes.string,\r\n};\r\n\r\nexport default Feed;\r\n"
  },
  {
    "__docId__": 11,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "filterPostsForFeed",
    "memberof": "src/client/results/Feed.js",
    "longname": "src/client/results/Feed.js~filterPostsForFeed",
    "access": null,
    "export": false,
    "importPath": "solid-octo-disco/src/client/results/Feed.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 65,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 12,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "paginatePosts",
    "memberof": "src/client/results/Feed.js",
    "longname": "src/client/results/Feed.js~paginatePosts",
    "access": null,
    "export": false,
    "importPath": "solid-octo-disco/src/client/results/Feed.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 89,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 13,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "PaginationButtons",
    "memberof": "src/client/results/Feed.js",
    "longname": "src/client/results/Feed.js~PaginationButtons",
    "access": null,
    "export": false,
    "importPath": "solid-octo-disco/src/client/results/Feed.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 99,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 14,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "LimitButtons",
    "memberof": "src/client/results/Feed.js",
    "longname": "src/client/results/Feed.js~LimitButtons",
    "access": null,
    "export": false,
    "importPath": "solid-octo-disco/src/client/results/Feed.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 120,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 15,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "PagePicker",
    "memberof": "src/client/results/Feed.js",
    "longname": "src/client/results/Feed.js~PagePicker",
    "access": null,
    "export": false,
    "importPath": "solid-octo-disco/src/client/results/Feed.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 128,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 16,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "LimitButton",
    "memberof": "src/client/results/Feed.js",
    "longname": "src/client/results/Feed.js~LimitButton",
    "access": null,
    "export": false,
    "importPath": "solid-octo-disco/src/client/results/Feed.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 148,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 17,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "FeedItem",
    "memberof": "src/client/results/Feed.js",
    "longname": "src/client/results/Feed.js~FeedItem",
    "access": null,
    "export": false,
    "importPath": "solid-octo-disco/src/client/results/Feed.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 161,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 18,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "Tweet",
    "memberof": "src/client/results/Feed.js",
    "longname": "src/client/results/Feed.js~Tweet",
    "access": null,
    "export": false,
    "importPath": "solid-octo-disco/src/client/results/Feed.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 180,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 19,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "QuotedTweet",
    "memberof": "src/client/results/Feed.js",
    "longname": "src/client/results/Feed.js~QuotedTweet",
    "access": null,
    "export": false,
    "importPath": "solid-octo-disco/src/client/results/Feed.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 248,
    "undocument": true,
    "interface": false,
    "extends": [
      "react~Component"
    ]
  },
  {
    "__docId__": 20,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/client/results/Feed.js~QuotedTweet",
    "longname": "src/client/results/Feed.js~QuotedTweet#constructor",
    "access": null,
    "description": null,
    "lineNumber": 249,
    "undocument": true,
    "params": [
      {
        "name": "props",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 21,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "state",
    "memberof": "src/client/results/Feed.js~QuotedTweet",
    "longname": "src/client/results/Feed.js~QuotedTweet#state",
    "access": null,
    "description": null,
    "lineNumber": 251,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 22,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "componentDidMount",
    "memberof": "src/client/results/Feed.js~QuotedTweet",
    "longname": "src/client/results/Feed.js~QuotedTweet#componentDidMount",
    "access": null,
    "description": null,
    "lineNumber": 256,
    "undocument": true,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 23,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "render",
    "memberof": "src/client/results/Feed.js~QuotedTweet",
    "longname": "src/client/results/Feed.js~QuotedTweet#render",
    "access": null,
    "description": null,
    "lineNumber": 274,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 24,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Feed",
    "memberof": "src/client/results/Feed.js",
    "longname": "src/client/results/Feed.js~Feed",
    "access": null,
    "export": true,
    "importPath": "solid-octo-disco/src/client/results/Feed.js",
    "importStyle": "Feed",
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "interface": false,
    "extends": [
      "react~Component"
    ]
  },
  {
    "__docId__": 25,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "componentDidMount",
    "memberof": "src/client/results/Feed.js~Feed",
    "longname": "src/client/results/Feed.js~Feed#componentDidMount",
    "access": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 26,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "componentDidUpdate",
    "memberof": "src/client/results/Feed.js~Feed",
    "longname": "src/client/results/Feed.js~Feed#componentDidUpdate",
    "access": null,
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 27,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "render",
    "memberof": "src/client/results/Feed.js~Feed",
    "longname": "src/client/results/Feed.js~Feed#render",
    "access": null,
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 28,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/client/results/GoogleMap.js",
    "memberof": null,
    "longname": "src/client/results/GoogleMap.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import React, { Component } from 'react';\r\n\r\nexport default class GoogleMap extends Component {\r\n  // Inspired by http://revelry.co/google-maps-react/\r\n\r\n  render() { return (<div />); };\r\n\r\n  componentDidUpdate() {\r\n    this.markerBounds = new google.maps.LatLngBounds();\r\n    this.markerBounds.extend(new google.maps.LatLng(49.9, -9.8)); // South West of UK\r\n    this.markerBounds.extend(new google.maps.LatLng(58.9, -1.93)); // North East of UK\r\n\r\n    this.markers.forEach((marker) => marker.setMap(null));\r\n    this.props.posts.forEach((post) => this.addMarker.bind(this)(post));\r\n\r\n    // Fit the zoom of the map to show all of the marked tweets, and no more.\r\n    this.map.fitBounds(this.markerBounds);\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.markers = [];\r\n    this.map = this.createMap();\r\n\r\n    this.componentDidUpdate();\r\n  }\r\n\r\n  createMap() {\r\n    const mapOptions = {\r\n      minZoom: 1,\r\n      zoom: 1,\r\n      center: new google.maps.LatLng(0, 0),\r\n      mapTypeId: google.maps.MapTypeId.TERRAIN,\r\n    };\r\n\r\n    return new google.maps.Map($('#tweetMap')[0], mapOptions);\r\n  }\r\n\r\n  addMarker(post) {\r\n    const pos = new google.maps.LatLng(post.data.latitude, post.data.longitude);\r\n\r\n    const marker = new google.maps.Marker({\r\n      position: pos,\r\n      map: this.map,\r\n      title: post.data.content,\r\n    });\r\n\r\n    const infowindow = new google.maps.InfoWindow({\r\n      content: `<a href=\"//twitter.com/${post.author.handle}\">@${post.author.handle}</a>: ${post.data.content}`,\r\n    });\r\n\r\n    marker.addListener('click', function () {\r\n      infowindow.open(this.map, marker);\r\n    });\r\n\r\n    this.markers.push(marker);\r\n    this.markerBounds.extend(pos);\r\n\r\n    return marker;\r\n  }\r\n};\r\n"
  },
  {
    "__docId__": 29,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "GoogleMap",
    "memberof": "src/client/results/GoogleMap.js",
    "longname": "src/client/results/GoogleMap.js~GoogleMap",
    "access": null,
    "export": true,
    "importPath": "solid-octo-disco/src/client/results/GoogleMap.js",
    "importStyle": "GoogleMap",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "interface": false,
    "extends": [
      "react~Component"
    ]
  },
  {
    "__docId__": 30,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "render",
    "memberof": "src/client/results/GoogleMap.js~GoogleMap",
    "longname": "src/client/results/GoogleMap.js~GoogleMap#render",
    "access": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 31,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "componentDidUpdate",
    "memberof": "src/client/results/GoogleMap.js~GoogleMap",
    "longname": "src/client/results/GoogleMap.js~GoogleMap#componentDidUpdate",
    "access": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 32,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "markerBounds",
    "memberof": "src/client/results/GoogleMap.js~GoogleMap",
    "longname": "src/client/results/GoogleMap.js~GoogleMap#markerBounds",
    "access": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 33,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "componentDidMount",
    "memberof": "src/client/results/GoogleMap.js~GoogleMap",
    "longname": "src/client/results/GoogleMap.js~GoogleMap#componentDidMount",
    "access": null,
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 34,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "markers",
    "memberof": "src/client/results/GoogleMap.js~GoogleMap",
    "longname": "src/client/results/GoogleMap.js~GoogleMap#markers",
    "access": null,
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 35,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "map",
    "memberof": "src/client/results/GoogleMap.js~GoogleMap",
    "longname": "src/client/results/GoogleMap.js~GoogleMap#map",
    "access": null,
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 36,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "createMap",
    "memberof": "src/client/results/GoogleMap.js~GoogleMap",
    "longname": "src/client/results/GoogleMap.js~GoogleMap#createMap",
    "access": null,
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 37,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "addMarker",
    "memberof": "src/client/results/GoogleMap.js~GoogleMap",
    "longname": "src/client/results/GoogleMap.js~GoogleMap#addMarker",
    "access": null,
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "params": [
      {
        "name": "post",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 38,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/client/results/mostfrequent/MostFrequent.js",
    "memberof": null,
    "longname": "src/client/results/mostfrequent/MostFrequent.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import React, { Component } from 'react';\r\nimport SlidingSearchBar from './SearchBar';\r\n\r\nconst MostFrequent = ({\r\n  title, icon, count, filterTerm, onTypingInSearchBar, onToggleAll, currentToggledAction, children\r\n}) => (\r\n  <div className=\"ui raised purple segment\">\r\n    <div className=\"ui one statistics\">\r\n      <div className=\"purple statistic\">\r\n        <div className=\"value\">\r\n          <i className={icon}></i> {count}\r\n        </div>\r\n        <div className=\"label\">{title}</div>\r\n      </div>\r\n    </div>\r\n    <br />\r\n    <div>\r\n      <div className=\"ui two column grid\">\r\n        <div className=\"column\">\r\n          <SlidingSearchBar onTypingInSearchBar={onTypingInSearchBar}\r\n            currentValue={filterTerm}\r\n          />\r\n        </div>\r\n        <div className=\"right aligned column\">\r\n          <button className=\"ui purple basic button\" onClick={onToggleAll}>\r\n            {currentToggledAction ? 'Hide all' : 'Show all'}\r\n          </button>\r\n        </div>\r\n      </div>\r\n      <br />\r\n      {children}\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default MostFrequent;\r\n"
  },
  {
    "__docId__": 39,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "MostFrequent",
    "memberof": "src/client/results/mostfrequent/MostFrequent.js",
    "longname": "src/client/results/mostfrequent/MostFrequent.js~MostFrequent",
    "access": null,
    "export": true,
    "importPath": "solid-octo-disco/src/client/results/mostfrequent/MostFrequent.js",
    "importStyle": "MostFrequent",
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 40,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/client/results/mostfrequent/mostFrequentActions.js",
    "memberof": null,
    "longname": "src/client/results/mostfrequent/mostFrequentActions.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "export const UPDATE_MOST_USED_WORDS_SEARCH_FILTER = 'UPDATE_MOST_USED_WORDS_SEARCH_FILTER';\r\nexport const updateMostUsedWordsSearch = (filterTerm) => ({\r\n  type: UPDATE_MOST_USED_WORDS_SEARCH_FILTER,\r\n  filterTerm,\r\n});\r\n\r\nexport const UPDATE_MOST_ACTIVE_USERS_SEARCH_FILTER = 'UPDATE_MOST_ACTIVE_USERS_SEARCH_FILTER';\r\nexport const updateActiveUsersSearch = (filterTerm) => ({\r\n  type: UPDATE_MOST_ACTIVE_USERS_SEARCH_FILTER,\r\n  filterTerm,\r\n});\r\n\r\nexport const TOGGLE_MOST_USED_WORDS = 'TOGGLE_MOST_USED_WORDS';\r\nexport const toggleMostUsedWords = (words) => ({\r\n  type: TOGGLE_MOST_USED_WORDS,\r\n  words,\r\n});\r\n\r\nexport const TOGGLE_MOST_ACTIVE_USER = 'TOGGLE_MOST_ACTIVE_USER';\r\nexport const toggleMostActiveUser = (userId) => ({\r\n  type: TOGGLE_MOST_ACTIVE_USER,\r\n  userId,\r\n});\r\n\r\nexport const TOGGLE_ALL_MOST_USED_WORDS = 'TOGGLE_ALL_MOST_USED_WORDS';\r\nexport const toggleAllMostUsedWordsSearch = () => ({\r\n  type: TOGGLE_ALL_MOST_USED_WORDS,\r\n});\r\n\r\nexport const TOGGLE_ALL_MOST_ACTIVE_USERS = 'TOGGLE_ALL_MOST_ACTIVE_USERS';\r\nexport const toggleAllMostActiveUsersSearch = () => ({\r\n  type: TOGGLE_ALL_MOST_ACTIVE_USERS,\r\n});\r\n\r\nexport const RESET_MOST_FREQUENT = 'RESET_MOST_FREQUENT';\r\nexport const resetMostFrequent = () => ({\r\n  type: RESET_MOST_FREQUENT,\r\n});\r\n"
  },
  {
    "__docId__": 41,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "UPDATE_MOST_USED_WORDS_SEARCH_FILTER",
    "memberof": "src/client/results/mostfrequent/mostFrequentActions.js",
    "longname": "src/client/results/mostfrequent/mostFrequentActions.js~UPDATE_MOST_USED_WORDS_SEARCH_FILTER",
    "access": null,
    "export": true,
    "importPath": "solid-octo-disco/src/client/results/mostfrequent/mostFrequentActions.js",
    "importStyle": "{UPDATE_MOST_USED_WORDS_SEARCH_FILTER}",
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 42,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "updateMostUsedWordsSearch",
    "memberof": "src/client/results/mostfrequent/mostFrequentActions.js",
    "longname": "src/client/results/mostfrequent/mostFrequentActions.js~updateMostUsedWordsSearch",
    "access": null,
    "export": true,
    "importPath": "solid-octo-disco/src/client/results/mostfrequent/mostFrequentActions.js",
    "importStyle": "{updateMostUsedWordsSearch}",
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 43,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "UPDATE_MOST_ACTIVE_USERS_SEARCH_FILTER",
    "memberof": "src/client/results/mostfrequent/mostFrequentActions.js",
    "longname": "src/client/results/mostfrequent/mostFrequentActions.js~UPDATE_MOST_ACTIVE_USERS_SEARCH_FILTER",
    "access": null,
    "export": true,
    "importPath": "solid-octo-disco/src/client/results/mostfrequent/mostFrequentActions.js",
    "importStyle": "{UPDATE_MOST_ACTIVE_USERS_SEARCH_FILTER}",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 44,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "updateActiveUsersSearch",
    "memberof": "src/client/results/mostfrequent/mostFrequentActions.js",
    "longname": "src/client/results/mostfrequent/mostFrequentActions.js~updateActiveUsersSearch",
    "access": null,
    "export": true,
    "importPath": "solid-octo-disco/src/client/results/mostfrequent/mostFrequentActions.js",
    "importStyle": "{updateActiveUsersSearch}",
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 45,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "TOGGLE_MOST_USED_WORDS",
    "memberof": "src/client/results/mostfrequent/mostFrequentActions.js",
    "longname": "src/client/results/mostfrequent/mostFrequentActions.js~TOGGLE_MOST_USED_WORDS",
    "access": null,
    "export": true,
    "importPath": "solid-octo-disco/src/client/results/mostfrequent/mostFrequentActions.js",
    "importStyle": "{TOGGLE_MOST_USED_WORDS}",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 46,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "toggleMostUsedWords",
    "memberof": "src/client/results/mostfrequent/mostFrequentActions.js",
    "longname": "src/client/results/mostfrequent/mostFrequentActions.js~toggleMostUsedWords",
    "access": null,
    "export": true,
    "importPath": "solid-octo-disco/src/client/results/mostfrequent/mostFrequentActions.js",
    "importStyle": "{toggleMostUsedWords}",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 47,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "TOGGLE_MOST_ACTIVE_USER",
    "memberof": "src/client/results/mostfrequent/mostFrequentActions.js",
    "longname": "src/client/results/mostfrequent/mostFrequentActions.js~TOGGLE_MOST_ACTIVE_USER",
    "access": null,
    "export": true,
    "importPath": "solid-octo-disco/src/client/results/mostfrequent/mostFrequentActions.js",
    "importStyle": "{TOGGLE_MOST_ACTIVE_USER}",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 48,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "toggleMostActiveUser",
    "memberof": "src/client/results/mostfrequent/mostFrequentActions.js",
    "longname": "src/client/results/mostfrequent/mostFrequentActions.js~toggleMostActiveUser",
    "access": null,
    "export": true,
    "importPath": "solid-octo-disco/src/client/results/mostfrequent/mostFrequentActions.js",
    "importStyle": "{toggleMostActiveUser}",
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 49,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "TOGGLE_ALL_MOST_USED_WORDS",
    "memberof": "src/client/results/mostfrequent/mostFrequentActions.js",
    "longname": "src/client/results/mostfrequent/mostFrequentActions.js~TOGGLE_ALL_MOST_USED_WORDS",
    "access": null,
    "export": true,
    "importPath": "solid-octo-disco/src/client/results/mostfrequent/mostFrequentActions.js",
    "importStyle": "{TOGGLE_ALL_MOST_USED_WORDS}",
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 50,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "toggleAllMostUsedWordsSearch",
    "memberof": "src/client/results/mostfrequent/mostFrequentActions.js",
    "longname": "src/client/results/mostfrequent/mostFrequentActions.js~toggleAllMostUsedWordsSearch",
    "access": null,
    "export": true,
    "importPath": "solid-octo-disco/src/client/results/mostfrequent/mostFrequentActions.js",
    "importStyle": "{toggleAllMostUsedWordsSearch}",
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 51,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "TOGGLE_ALL_MOST_ACTIVE_USERS",
    "memberof": "src/client/results/mostfrequent/mostFrequentActions.js",
    "longname": "src/client/results/mostfrequent/mostFrequentActions.js~TOGGLE_ALL_MOST_ACTIVE_USERS",
    "access": null,
    "export": true,
    "importPath": "solid-octo-disco/src/client/results/mostfrequent/mostFrequentActions.js",
    "importStyle": "{TOGGLE_ALL_MOST_ACTIVE_USERS}",
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 52,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "toggleAllMostActiveUsersSearch",
    "memberof": "src/client/results/mostfrequent/mostFrequentActions.js",
    "longname": "src/client/results/mostfrequent/mostFrequentActions.js~toggleAllMostActiveUsersSearch",
    "access": null,
    "export": true,
    "importPath": "solid-octo-disco/src/client/results/mostfrequent/mostFrequentActions.js",
    "importStyle": "{toggleAllMostActiveUsersSearch}",
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 53,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "RESET_MOST_FREQUENT",
    "memberof": "src/client/results/mostfrequent/mostFrequentActions.js",
    "longname": "src/client/results/mostfrequent/mostFrequentActions.js~RESET_MOST_FREQUENT",
    "access": null,
    "export": true,
    "importPath": "solid-octo-disco/src/client/results/mostfrequent/mostFrequentActions.js",
    "importStyle": "{RESET_MOST_FREQUENT}",
    "description": null,
    "lineNumber": 35,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 54,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "resetMostFrequent",
    "memberof": "src/client/results/mostfrequent/mostFrequentActions.js",
    "longname": "src/client/results/mostfrequent/mostFrequentActions.js~resetMostFrequent",
    "access": null,
    "export": true,
    "importPath": "solid-octo-disco/src/client/results/mostfrequent/mostFrequentActions.js",
    "importStyle": "{resetMostFrequent}",
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 55,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/client/results/mostfrequent/mostFrequentActions.spec.js",
    "memberof": null,
    "longname": "src/client/results/mostfrequent/mostFrequentActions.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import { should } from 'chai';\r\nimport {\r\n  UPDATE_MOST_USED_WORDS_SEARCH_FILTER, updateMostUsedWordsSearch,\r\n  UPDATE_MOST_ACTIVE_USERS_SEARCH_FILTER, updateActiveUsersSearch,\r\n  TOGGLE_MOST_USED_WORDS, toggleMostUsedWords,\r\n  TOGGLE_MOST_ACTIVE_USER, toggleMostActiveUser,\r\n  TOGGLE_ALL_MOST_USED_WORDS, toggleAllMostUsedWordsSearch,\r\n  TOGGLE_ALL_MOST_ACTIVE_USERS, toggleAllMostActiveUsersSearch,\r\n} from './mostFrequentActions';\r\n\r\ndescribe('#MostFrequentActions', () => {\r\n  it('should create a correct search for most  used words', () => {\r\n    updateMostUsedWordsSearch('filter').should.deep.equal({\r\n      type: UPDATE_MOST_USED_WORDS_SEARCH_FILTER,\r\n      filterTerm: 'filter',\r\n    });\r\n  });\r\n\r\n  it('should create a correct search for most active user', () => {\r\n    updateActiveUsersSearch('filter').should.deep.equal({\r\n      type: UPDATE_MOST_ACTIVE_USERS_SEARCH_FILTER,\r\n      filterTerm: 'filter',\r\n    });\r\n  });\r\n\r\n  it('should create an action for toggling hiding most used word', () => {\r\n    toggleMostUsedWords(['exampleWord']).should.deep.equal({\r\n      type: TOGGLE_MOST_USED_WORDS,\r\n      words: ['exampleWord'],\r\n    });\r\n  });\r\n\r\n  it('should create an action for toggling hiding most active user', () => {\r\n    toggleMostActiveUser('12345').should.deep.equal({\r\n      type: TOGGLE_MOST_ACTIVE_USER,\r\n      userId: '12345',\r\n    });\r\n  });\r\n\r\n  it('should create an action for toggling all most used words', () => {\r\n    toggleAllMostUsedWordsSearch().should.deep.equal({\r\n      type: TOGGLE_ALL_MOST_USED_WORDS,\r\n    });\r\n  });\r\n\r\n  it('should create an action for toggling all most active users', () => {\r\n    toggleAllMostActiveUsersSearch().should.deep.equal({\r\n      type: TOGGLE_ALL_MOST_ACTIVE_USERS,\r\n    });\r\n  });\r\n});\r\n"
  },
  {
    "__docId__": 56,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/client/results/mostfrequent/mostFrequentReducer.js",
    "memberof": null,
    "longname": "src/client/results/mostfrequent/mostFrequentReducer.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import { toggleArrayElement } from './../../../shared/utilities';\r\nimport {\r\n  UPDATE_MOST_USED_WORDS_SEARCH_FILTER, TOGGLE_MOST_USED_WORDS,\r\n  UPDATE_MOST_ACTIVE_USERS_SEARCH_FILTER, TOGGLE_MOST_ACTIVE_USER,\r\n  TOGGLE_ALL_MOST_USED_WORDS, TOGGLE_ALL_MOST_ACTIVE_USERS,\r\n  RESET_MOST_FREQUENT\r\n} from './mostFrequentActions';\r\n\r\nconst mostFrequentInitialState = {\r\n  filterTerm: '',\r\n  toToggle: [],\r\n  isToggledActionHide: true,\r\n};\r\n\r\nconst initialState = {\r\n  words: mostFrequentInitialState,\r\n  users: mostFrequentInitialState,\r\n};\r\n\r\nconst mostFrequentReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n  case RESET_MOST_FREQUENT:\r\n    return initialState;\r\n  case UPDATE_MOST_ACTIVE_USERS_SEARCH_FILTER:\r\n  case TOGGLE_MOST_ACTIVE_USER:\r\n  case TOGGLE_ALL_MOST_ACTIVE_USERS:\r\n    return {\r\n      ...state,\r\n      users: users(state.users, action),\r\n    };\r\n  case UPDATE_MOST_USED_WORDS_SEARCH_FILTER:\r\n  case TOGGLE_MOST_USED_WORDS:\r\n  case TOGGLE_ALL_MOST_USED_WORDS:\r\n    return {\r\n      ...state,\r\n      words: words(state.words, action),\r\n    };\r\n  default:\r\n    return state;\r\n  }\r\n};\r\n\r\nconst words = (state, action) => {\r\n  switch (action.type) {\r\n  case UPDATE_MOST_USED_WORDS_SEARCH_FILTER:\r\n    return {\r\n      ...state,\r\n      filterTerm: action.filterTerm,\r\n    };\r\n  case TOGGLE_MOST_USED_WORDS:\r\n    return {\r\n      ...state,\r\n      toToggle: action.words.reduce(\r\n        (toggledWords, word) => toggleArrayElement(toggledWords, word), state.toToggle\r\n      ),\r\n    };\r\n  case TOGGLE_ALL_MOST_USED_WORDS:\r\n    return {\r\n      ...state,\r\n      toToggle: [],\r\n      isToggledActionHide: !state.isToggledActionHide,\r\n    };\r\n  default:\r\n    return state;\r\n  }\r\n};\r\n\r\nconst users = (state, action) => {\r\n  switch (action.type) {\r\n  case UPDATE_MOST_ACTIVE_USERS_SEARCH_FILTER:\r\n    return {\r\n      ...state,\r\n      filterTerm: action.filterTerm,\r\n    };\r\n  case TOGGLE_MOST_ACTIVE_USER:\r\n    return {\r\n      ...state,\r\n      toToggle: toggleArrayElement(state.toToggle, action.userId),\r\n    };\r\n  case TOGGLE_ALL_MOST_ACTIVE_USERS:\r\n    return {\r\n      ...state,\r\n      toToggle: [],\r\n      isToggledActionHide: !state.isToggledActionHide,\r\n    };\r\n  default:\r\n    return state;\r\n  }\r\n};\r\n\r\nexport default mostFrequentReducer;\r\n"
  },
  {
    "__docId__": 57,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "mostFrequentInitialState",
    "memberof": "src/client/results/mostfrequent/mostFrequentReducer.js",
    "longname": "src/client/results/mostfrequent/mostFrequentReducer.js~mostFrequentInitialState",
    "access": null,
    "export": false,
    "importPath": "solid-octo-disco/src/client/results/mostfrequent/mostFrequentReducer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 58,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "initialState",
    "memberof": "src/client/results/mostfrequent/mostFrequentReducer.js",
    "longname": "src/client/results/mostfrequent/mostFrequentReducer.js~initialState",
    "access": null,
    "export": false,
    "importPath": "solid-octo-disco/src/client/results/mostfrequent/mostFrequentReducer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 59,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "words",
    "memberof": "src/client/results/mostfrequent/mostFrequentReducer.js",
    "longname": "src/client/results/mostfrequent/mostFrequentReducer.js~words",
    "access": null,
    "export": false,
    "importPath": "solid-octo-disco/src/client/results/mostfrequent/mostFrequentReducer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 43,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 60,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "users",
    "memberof": "src/client/results/mostfrequent/mostFrequentReducer.js",
    "longname": "src/client/results/mostfrequent/mostFrequentReducer.js~users",
    "access": null,
    "export": false,
    "importPath": "solid-octo-disco/src/client/results/mostfrequent/mostFrequentReducer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 68,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 61,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "mostFrequentReducer",
    "memberof": "src/client/results/mostfrequent/mostFrequentReducer.js",
    "longname": "src/client/results/mostfrequent/mostFrequentReducer.js~mostFrequentReducer",
    "access": null,
    "export": true,
    "importPath": "solid-octo-disco/src/client/results/mostfrequent/mostFrequentReducer.js",
    "importStyle": "mostFrequentReducer",
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 62,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/client/results/mostfrequent/mostFrequentReducer.spec.js",
    "memberof": null,
    "longname": "src/client/results/mostfrequent/mostFrequentReducer.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import { should } from 'chai';\r\nimport deepFreeze from 'deep-freeze';\r\nimport mostFrequentReducer from './mostFrequentReducer';\r\nimport {\r\n  updateMostUsedWordsSearch, toggleMostUsedWords, toggleAllMostUsedWordsSearch,\r\n  updateActiveUsersSearch, toggleMostActiveUser, toggleAllMostActiveUsersSearch\r\n} from './mostFrequentActions';\r\n\r\nconst initialState = {\r\n  words: {\r\n    filterTerm: '',\r\n    toToggle: [],\r\n    isToggledActionHide: true,\r\n  },\r\n  users: {\r\n    filterTerm: '',\r\n    toToggle: [],\r\n    isToggledActionHide: true,\r\n  },\r\n};\r\n\r\ndescribe('#MostFrequentReducer', () => {\r\n  describe('Most used words', () => {\r\n    it('should add the given search term to words search filter', () => {\r\n      const stateBefore = initialState;\r\n      const action = updateMostUsedWordsSearch('Football');\r\n\r\n      const stateAfter = {\r\n        words: {\r\n          filterTerm: 'Football',\r\n          toToggle: [],\r\n          isToggledActionHide: true,\r\n        },\r\n        users: {\r\n          filterTerm: '',\r\n          toToggle: [],\r\n          isToggledActionHide: true,\r\n        },\r\n      };\r\n\r\n      deepFreeze(stateBefore);\r\n      deepFreeze(action);\r\n\r\n      mostFrequentReducer(stateBefore, action).should.deep.equal(stateAfter);\r\n    });\r\n\r\n    it('should change toggle isToggledActionHide and empty the toToggle words', () => {\r\n      const stateBefore = {\r\n        words: {\r\n          filterTerm: '',\r\n          toToggle: ['lEmOn'],\r\n          isToggledActionHide: true,\r\n        },\r\n        users: {\r\n          filterTerm: '',\r\n          toToggle: ['12345'],\r\n          isToggledActionHide: true,\r\n        },\r\n      };\r\n      const action = toggleAllMostUsedWordsSearch();\r\n\r\n      const stateAfter = {\r\n        words: {\r\n          filterTerm: '',\r\n          toToggle: [],\r\n          isToggledActionHide: false,\r\n        },\r\n        users: {\r\n          filterTerm: '',\r\n          toToggle: ['12345'],\r\n          isToggledActionHide: true,\r\n        },\r\n      };\r\n\r\n      deepFreeze(stateBefore);\r\n      deepFreeze(action);\r\n\r\n      mostFrequentReducer(stateBefore, action).should.deep.equal(stateAfter);\r\n    });\r\n\r\n    describe('Toggling of hidden words', () => {\r\n      it('should add a hidden word', () => {\r\n        const stateBefore = initialState;\r\n        const action = toggleMostUsedWords(['LeMoN']);\r\n\r\n        const stateAfter = {\r\n          words: {\r\n            filterTerm: '',\r\n            toToggle: ['LeMoN'],\r\n            isToggledActionHide: true,\r\n          },\r\n          users: {\r\n            filterTerm: '',\r\n            toToggle: [],\r\n            isToggledActionHide: true,\r\n          },\r\n        };\r\n\r\n        deepFreeze(stateBefore);\r\n        deepFreeze(action);\r\n\r\n        mostFrequentReducer(stateBefore, action).should.deep.equal(stateAfter);\r\n      });\r\n\r\n      it('should not conflate similar hidden words', () => {\r\n        const stateBefore = {\r\n          words: {\r\n            filterTerm: '',\r\n            toToggle: ['lEmOn'],\r\n            isToggledActionHide: true,\r\n          },\r\n          users: {\r\n            filterTerm: '',\r\n            toToggle: [],\r\n            isToggledActionHide: true,\r\n          },\r\n        };\r\n        const action = toggleMostUsedWords(['LeMoN']);\r\n\r\n        const stateAfter = {\r\n          words: {\r\n            filterTerm: '',\r\n            toToggle: ['lEmOn', 'LeMoN'],\r\n            isToggledActionHide: true,\r\n          },\r\n          users: {\r\n            filterTerm: '',\r\n            toToggle: [],\r\n            isToggledActionHide: true,\r\n          },\r\n        };\r\n\r\n        deepFreeze(stateBefore);\r\n        deepFreeze(action);\r\n\r\n        mostFrequentReducer(stateBefore, action).should.deep.equal(stateAfter);\r\n      });\r\n\r\n      it('should show/remove a hidden word', () => {\r\n        const stateBefore = {\r\n          words: {\r\n            filterTerm: '',\r\n            toToggle: ['LEMON'],\r\n            isToggledActionHide: true,\r\n          },\r\n          users: {\r\n            filterTerm: '',\r\n            toToggle: [],\r\n            isToggledActionHide: true,\r\n          },\r\n        };\r\n        const action = toggleMostUsedWords(['LEMON']);\r\n\r\n        const stateAfter = initialState;\r\n\r\n        deepFreeze(stateBefore);\r\n        deepFreeze(action);\r\n\r\n        mostFrequentReducer(stateBefore, action).should.deep.equal(stateAfter);\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('Most active users', () => {\r\n    it('should add the given search term for most active users', () => {\r\n      const stateBefore = initialState;\r\n      const action = updateActiveUsersSearch('Football');\r\n\r\n      const stateAfter = {\r\n        words: {\r\n          filterTerm: '',\r\n          toToggle: [],\r\n          isToggledActionHide: true,\r\n        },\r\n        users: {\r\n          filterTerm: 'Football',\r\n          toToggle: [],\r\n          isToggledActionHide: true,\r\n        },\r\n      };\r\n\r\n      deepFreeze(stateBefore);\r\n      deepFreeze(action);\r\n\r\n      mostFrequentReducer(stateBefore, action).should.deep.equal(stateAfter);\r\n    });\r\n\r\n    it('should change isToggledActionHide and empty the toToggle users', () => {\r\n      const stateBefore = {\r\n        words: {\r\n          filterTerm: '',\r\n          toToggle: [],\r\n          isToggledActionHide: true,\r\n        },\r\n        users: {\r\n          filterTerm: '',\r\n          toToggle: ['12345'],\r\n          isToggledActionHide: true,\r\n        },\r\n      };\r\n      const action = toggleAllMostActiveUsersSearch();\r\n\r\n      const stateAfter = {\r\n        words: {\r\n          filterTerm: '',\r\n          toToggle: [],\r\n          isToggledActionHide: true,\r\n        },\r\n        users: {\r\n          filterTerm: '',\r\n          toToggle: [],\r\n          isToggledActionHide: false,\r\n        },\r\n      };\r\n\r\n      deepFreeze(stateBefore);\r\n      deepFreeze(action);\r\n\r\n      mostFrequentReducer(stateBefore, action).should.deep.equal(stateAfter);\r\n    });\r\n\r\n    describe('Toggling of hidden users', () => {\r\n      it('should add a hidden word', () => {\r\n        const stateBefore = initialState;\r\n        const action = toggleMostActiveUser('12345');\r\n\r\n        const stateAfter = {\r\n          words: {\r\n            filterTerm: '',\r\n            toToggle: [],\r\n            isToggledActionHide: true,\r\n          },\r\n          users: {\r\n            filterTerm: '',\r\n            toToggle: ['12345'],\r\n            isToggledActionHide: true,\r\n          },\r\n        };\r\n\r\n        deepFreeze(stateBefore);\r\n        deepFreeze(action);\r\n\r\n        mostFrequentReducer(stateBefore, action).should.deep.equal(stateAfter);\r\n      });\r\n\r\n      it('should show/remove a hidden users', () => {\r\n        const stateBefore = {\r\n          words: {\r\n            filterTerm: '',\r\n            toToggle: [],\r\n            isToggledActionHide: true,\r\n          },\r\n          users: {\r\n            filterTerm: '',\r\n            toToggle: ['12345'],\r\n            isToggledActionHide: true,\r\n          },\r\n        };\r\n        const action = toggleMostActiveUser('12345');\r\n\r\n        const stateAfter = initialState;\r\n\r\n        deepFreeze(stateBefore);\r\n        deepFreeze(action);\r\n\r\n        mostFrequentReducer(stateBefore, action).should.deep.equal(stateAfter);\r\n      });\r\n    });\r\n  });\r\n});\r\n"
  },
  {
    "__docId__": 63,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "initialState",
    "memberof": "src/client/results/mostfrequent/mostFrequentReducer.spec.js",
    "longname": "src/client/results/mostfrequent/mostFrequentReducer.spec.js~initialState",
    "access": null,
    "export": false,
    "importPath": "solid-octo-disco/src/client/results/mostfrequent/mostFrequentReducer.spec.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 64,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/client/results/mostfrequent/SearchBar.js",
    "memberof": null,
    "longname": "src/client/results/mostfrequent/SearchBar.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import React, { Component } from 'react';\r\nimport { throttleFunction } from '../../../shared/utilities';\r\n\r\nconst SlidingSearchBar = ({ onTypingInSearchBar, currentValue }) => {\r\n  const delayedOnTypingInSearchBar = throttleFunction(onTypingInSearchBar, 250);\r\n\r\n  return (\r\n    <div className=\"ui fluid right icon input\">\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Search...\"\r\n        defaultValue={currentValue}\r\n        onChange={\r\n          (e) => { delayedOnTypingInSearchBar('' + e.target.value); }\r\n         }\r\n      />\r\n      <i className=\"search icon\"></i>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SlidingSearchBar;\r\n"
  },
  {
    "__docId__": 65,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "SlidingSearchBar",
    "memberof": "src/client/results/mostfrequent/SearchBar.js",
    "longname": "src/client/results/mostfrequent/SearchBar.js~SlidingSearchBar",
    "access": null,
    "export": true,
    "importPath": "solid-octo-disco/src/client/results/mostfrequent/SearchBar.js",
    "importStyle": "SlidingSearchBar",
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 66,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/client/results/mostfrequent/users/MostActiveUsers.js",
    "memberof": null,
    "longname": "src/client/results/mostfrequent/users/MostActiveUsers.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport MostFrequent from './../MostFrequent';\r\nimport { updateActiveUsersSearch, toggleAllMostActiveUsersSearch } from './../mostFrequentActions';\r\nimport UserItemsList from './UserItemsList';\r\n\r\nconst MostActiveUsers = ({\r\n  dispatch, userInfoList, isUsersToggledActionHide, filterTerm, postsLength,\r\n}) => {\r\n  const filteredItems = userInfoList.filter(\r\n    (userInfo) => {\r\n      const matchUserName = userInfo.author.name.toLowerCase().includes(filterTerm.toLowerCase());\r\n      const matchUserHandle = userInfo.author.handle.toLowerCase().includes(filterTerm.toLowerCase());\r\n\r\n      return matchUserName || matchUserHandle;\r\n    }\r\n  ).slice(0, 100);\r\n\r\n  return (\r\n    <MostFrequent title=\"Top Users\"\r\n      icon=\"user icon\"\r\n      count={filteredItems.length}\r\n      filterTerm={filterTerm}\r\n      onTypingInSearchBar={(newFilterTerm) => {\r\n        dispatch(updateActiveUsersSearch(newFilterTerm));\r\n      }}\r\n      onToggleAll={() => {\r\n        dispatch(toggleAllMostActiveUsersSearch());\r\n      }}\r\n      currentToggledAction={isUsersToggledActionHide}\r\n    >\r\n      <UserItemsList users={filteredItems} postsLength={postsLength}\r\n        isUsersToggledActionHide={isUsersToggledActionHide}\r\n        filterTerm={filterTerm}\r\n      />\r\n    </MostFrequent>\r\n  );\r\n};\r\n\r\nexport default connect()(MostActiveUsers);\r\n"
  },
  {
    "__docId__": 67,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "MostActiveUsers",
    "memberof": "src/client/results/mostfrequent/users/MostActiveUsers.js",
    "longname": "src/client/results/mostfrequent/users/MostActiveUsers.js~MostActiveUsers",
    "access": null,
    "export": false,
    "importPath": "solid-octo-disco/src/client/results/mostfrequent/users/MostActiveUsers.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 68,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/client/results/mostfrequent/users/UserItemsList.js",
    "memberof": null,
    "longname": "src/client/results/mostfrequent/users/UserItemsList.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { toggleMostActiveUser } from './../mostFrequentActions';\r\nimport { mostFrequentWords } from './../../../tweetAnalysis';\r\nimport { TwitterProfilePicture } from '../../../Twitter';\r\n\r\nclass UserItemsList extends Component {\r\n  componentDidMount() {\r\n    if (this.props.isUsersToggledActionHide) {\r\n      $('.ui.checkbox.users').checkbox('check');\r\n    } else {\r\n      $('.ui.checkbox.users').checkbox('uncheck');\r\n    }\r\n    $('.ui.dropdown.userwords').dropdown({\r\n      action: 'nothing',\r\n    });\r\n    $('.userItemsList').css('height', `${$(window).height() - ($(window).height() / 5)}px`);\r\n  }\r\n\r\n  componentDidUpdate(nextProps) {\r\n    // only re-check or unckeck if the usersToggleActionHide has changed\r\n    // or the feed posts have changed\r\n    if (\r\n      nextProps.isUsersToggledActionHide !== this.props.isUsersToggledActionHide ||\r\n      nextProps.postsLength !== this.props.postsLength ||\r\n      nextProps.filterTerm !== this.props.filterTerm\r\n    ) {\r\n      if (this.props.isUsersToggledActionHide) {\r\n        $('.ui.checkbox.users').checkbox('check');\r\n      } else {\r\n        $('.ui.checkbox.users').checkbox('uncheck');\r\n      }\r\n    }\r\n    $('.ui.dropdown.userwords').dropdown({\r\n      action: 'nothing',\r\n    });\r\n    $('.userItemsList').css('height', `${$(window).height() - ($(window).height() / 5)}px`);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"userItemsList\" style={{ overflowY: 'scroll' }}>\r\n        <table className=\"ui very basic unstackable table\" style={{ overflowY: 'hidden' }} >\r\n          <thead>\r\n            <tr>\r\n              <th className=\"eight wide\"></th>\r\n              <th className=\"one wide\"></th>\r\n              <th className=\"six wide\" style={{ paddingLeft: '0px' }}>\r\n                <i className=\"trophy yellow icon\"></i>\r\n                Top Words\r\n              </th>\r\n              <th className=\"one wide\" style={{ borderLeft: '2px solid rgba(34,36,38,.1)' }}>Show</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            { this.props.users.map((userInfo, id) =>\r\n              <UserItem key={id} userInfo={userInfo} />) }\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nUserItemsList.propTypes = {\r\n  users: React.PropTypes.array,\r\n  isUsersToggledActionHide: React.PropTypes.bool,\r\n  postsLength: React.PropTypes.number,\r\n  filterTerm: React.PropTypes.string,\r\n};\r\n\r\nlet UserItem = ({ dispatch, userInfo }) => (\r\n  <tr>\r\n    <td className=\"left aligned\" style={{ paddingRight: '0px' }}>\r\n      <h4 className=\"ui image header\">\r\n        <TwitterProfilePicture author={userInfo.author} size=\"mini\" />\r\n        <div className=\"content\">\r\n          <a href={`//twitter.com/${userInfo.author.handle}`} target=\"_blank\">\r\n            <strong className=\"tweet fullname\">{userInfo.author.name}</strong>\r\n            <div className=\"sub header tweet handle\">@{userInfo.author.handle}</div>\r\n          </a>\r\n        </div>\r\n      </h4>\r\n    </td>\r\n\r\n    <td>\r\n      <i className={`${userInfo.source} blue icon`}>{userInfo.posts.length}</i>\r\n    </td>\r\n\r\n    <td style={{ paddingLeft: '0px' }}>\r\n      <UserItemMostUsedWords\r\n        usersMostUsedWords={mostFrequentWords(userInfo.posts.map(post => post.content))}\r\n      />\r\n    </td>\r\n\r\n    <td className=\"center aligned\" style={{ borderLeft: '1px solid rgba(34,36,38,.1)' }}>\r\n      <div className=\"ui checkbox users\" onClick={() => {\r\n        dispatch(toggleMostActiveUser(userInfo.author.id));\r\n      }}>\r\n        <input type=\"checkbox\" name=\"example\" />\r\n      </div>\r\n    </td>\r\n  </tr>\r\n);\r\nUserItem = connect()(UserItem);\r\n\r\nconst UserItemMostUsedWords = ({ usersMostUsedWords }) => {\r\n  let topWord = { word: 'N/A', count: 0 };\r\n  if (usersMostUsedWords[0] !== undefined) {\r\n    topWord = usersMostUsedWords[0];\r\n  }\r\n\r\n  return (\r\n    <div className=\"ui fluid pointing dropdown userwords\">\r\n      <div className=\"text\"><strong>{topWord.word}</strong> x{topWord.count}</div>\r\n      <i className=\"dropdown icon\" style={{ marginLeft: '0px', marginTop: '2px' }}></i>\r\n      <div className=\"menu\">\r\n        {usersMostUsedWords.slice(1).map(\r\n          frequentWord => (\r\n            <div className=\"item\" key={frequentWord.word}>\r\n              <strong>{frequentWord.word}</strong> x{frequentWord.count}\r\n            </div>\r\n          )\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UserItemsList;\r\n"
  },
  {
    "__docId__": 69,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "UserItem",
    "memberof": "src/client/results/mostfrequent/users/UserItemsList.js",
    "longname": "src/client/results/mostfrequent/users/UserItemsList.js~UserItem",
    "access": null,
    "export": false,
    "importPath": "solid-octo-disco/src/client/results/mostfrequent/users/UserItemsList.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 71,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 70,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "UserItemMostUsedWords",
    "memberof": "src/client/results/mostfrequent/users/UserItemsList.js",
    "longname": "src/client/results/mostfrequent/users/UserItemsList.js~UserItemMostUsedWords",
    "access": null,
    "export": false,
    "importPath": "solid-octo-disco/src/client/results/mostfrequent/users/UserItemsList.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 106,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 71,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "UserItemsList",
    "memberof": "src/client/results/mostfrequent/users/UserItemsList.js",
    "longname": "src/client/results/mostfrequent/users/UserItemsList.js~UserItemsList",
    "access": null,
    "export": true,
    "importPath": "solid-octo-disco/src/client/results/mostfrequent/users/UserItemsList.js",
    "importStyle": "UserItemsList",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "interface": false,
    "extends": [
      "react~Component"
    ]
  },
  {
    "__docId__": 72,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "componentDidMount",
    "memberof": "src/client/results/mostfrequent/users/UserItemsList.js~UserItemsList",
    "longname": "src/client/results/mostfrequent/users/UserItemsList.js~UserItemsList#componentDidMount",
    "access": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 73,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "componentDidUpdate",
    "memberof": "src/client/results/mostfrequent/users/UserItemsList.js~UserItemsList",
    "longname": "src/client/results/mostfrequent/users/UserItemsList.js~UserItemsList#componentDidUpdate",
    "access": null,
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "params": [
      {
        "name": "nextProps",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 74,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "render",
    "memberof": "src/client/results/mostfrequent/users/UserItemsList.js~UserItemsList",
    "longname": "src/client/results/mostfrequent/users/UserItemsList.js~UserItemsList#render",
    "access": null,
    "description": null,
    "lineNumber": 40,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 75,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/client/results/mostfrequent/words/MostUsedWords.js",
    "memberof": null,
    "longname": "src/client/results/mostfrequent/words/MostUsedWords.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport MostFrequent from './../MostFrequent';\r\nimport {\r\n  updateMostUsedWordsSearch,\r\n  toggleMostUsedWords, toggleAllMostUsedWordsSearch\r\n} from './../mostFrequentActions';\r\nimport WordItemsList from './WordItemsList';\r\n\r\nconst MostUsedWords = ({\r\n  dispatch, wordInfoList, isWordsToggledActionHide, filterTerm, postsLength, componentId\r\n}) => {\r\n  const filteredItems = wordInfoList.filter(\r\n    (wordInfo) => wordInfo.word.toLowerCase().includes(filterTerm.toLowerCase())\r\n  ).slice(0, 100);\r\n\r\n  return (\r\n    <MostFrequent title=\"Top Words\"\r\n      icon=\"file text icon\"\r\n      count={filteredItems.length}\r\n      filterTerm={filterTerm}\r\n      onTypingInSearchBar={(newFilterTerm) => {\r\n        dispatch(updateMostUsedWordsSearch(newFilterTerm));\r\n      }}\r\n      onToggleAll={() => {\r\n        dispatch(toggleAllMostUsedWordsSearch());\r\n      }}\r\n      currentToggledAction={isWordsToggledActionHide}\r\n    >\r\n      <WordItemsList words={filteredItems} postsLength={postsLength}\r\n        filterTerm={filterTerm}\r\n        componentId={componentId}\r\n        isWordsToggledActionHide={isWordsToggledActionHide}\r\n        toggleMostUsedWords={(word) => {\r\n          dispatch(toggleMostUsedWords(word));\r\n        }}\r\n      />\r\n    </MostFrequent>\r\n  );\r\n};\r\n\r\nexport default connect()(MostUsedWords);\r\n"
  },
  {
    "__docId__": 76,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "MostUsedWords",
    "memberof": "src/client/results/mostfrequent/words/MostUsedWords.js",
    "longname": "src/client/results/mostfrequent/words/MostUsedWords.js~MostUsedWords",
    "access": null,
    "export": false,
    "importPath": "solid-octo-disco/src/client/results/mostfrequent/words/MostUsedWords.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 77,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/client/results/mostfrequent/words/WordItemsList.js",
    "memberof": null,
    "longname": "src/client/results/mostfrequent/words/WordItemsList.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import React, { Component } from 'react';\r\n\r\nclass WordItemsList extends Component {\r\n  componentDidMount() {\r\n    // change height to bottom of the page\r\n    if (this.props.isWordsToggledActionHide) {\r\n      $('.ui.checkbox.words').checkbox('check');\r\n    } else {\r\n      $('.ui.checkbox.words').checkbox('uncheck');\r\n    }\r\n    $('.ui.accordion.words').accordion({\r\n      selector: {\r\n        trigger: '.title .conflated-word-selector',\r\n      },\r\n    });\r\n    $('.wordItemList').css('height', `${$(window).height() - ($(window).height() / 5)}px`);\r\n  }\r\n\r\n  componentDidUpdate(nextProps) {\r\n    if (\r\n      nextProps.isWordsToggledActionHide !== this.props.isWordsToggledActionHide ||\r\n      nextProps.postsLength !== this.props.postsLength ||\r\n      nextProps.filterTerm !== this.props.filterTerm\r\n    ) {\r\n      if (this.props.isWordsToggledActionHide) {\r\n        $('.ui.checkbox.words').checkbox('check');\r\n      } else {\r\n        $('.ui.checkbox.words').checkbox('uncheck');\r\n      }\r\n    }\r\n    // change height to bottom of the page\r\n    $('.wordItemList').css('height', `${$(window).height() - ($(window).height() / 5)}px`);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"wordItemList\" style={{ overflowY: 'scroll' }}>\r\n        <div data-id={this.props.componentId} className=\"ui fluid accordion words\" style={{ overflow: 'hidden' }}>\r\n          {this.props.words.map((wordInfo, id) =>\r\n            <ConflatedWordItem key={wordInfo.word} accordianIndex={id}\r\n              componentId={this.props.componentId}\r\n              conflatedWordInfo={wordInfo}\r\n              toggleMostUsedWords={this.props.toggleMostUsedWords}\r\n            />\r\n          )}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nWordItemsList.propTypes = {\r\n  componentId: React.PropTypes.string,\r\n  words: React.PropTypes.array,\r\n  isWordsToggledActionHide: React.PropTypes.bool,\r\n  postsLength: React.PropTypes.number,\r\n  filterTerm: React.PropTypes.string,\r\n};\r\n\r\nconst ConflatedWordItem = ({ componentId, accordianIndex, toggleMostUsedWords, conflatedWordInfo }) => (\r\n  <div>\r\n    <div className=\"title\">\r\n      <div className=\"ui grid\">\r\n        <div className=\"twelve wide column conflated-word-selector\">\r\n          <div className=\"ui twelve column grid\">\r\n            <div className=\"two wide right aligned column\">\r\n              <div className=\"statistic\">\r\n                {conflatedWordInfo.count}\r\n              </div>\r\n            </div>\r\n            <div className=\"eleven wide column\">\r\n              {conflatedWordInfo.word} <i className=\"dropdown icon\" />\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"three wide column\">\r\n          <div data-id={`${conflatedWordInfo.word}master${componentId}`} className=\"ui checkbox words\" onClick={() => {\r\n            // Makes sure the accordian is open so that the user can see which words are being toggled\r\n            $(`.ui.accordion.words[data-id=${componentId}]`).accordion('open', accordianIndex);\r\n\r\n            // Sets the semantic-ui checkbox action method dependant on whether\r\n            // the master checkbox(conflated word) is checked/unchecked after being clicked\r\n            const masterChecked = $(`.ui.checkbox.words[data-id=\"${conflatedWordInfo.word}master${componentId}\"]`).checkbox('is checked');\r\n            const action = getSemanticCheckboxActionName(masterChecked);\r\n\r\n            // Created an array of toggle words to send a single redux action instead of several\r\n            let toggleWords = [];\r\n\r\n            // Loops through each child checkboxes'(conflated word's variants)\r\n            $(`.ui.checkbox.words[data-id^=\"${conflatedWordInfo.word}child${componentId}\"]`).each((index) => {\r\n              console.log('works!')\r\n              const $childCheckbox = $(`.ui.checkbox.words[data-id=\"${conflatedWordInfo.word}child${componentId}${index}\"]`);\r\n              // To see if it's the same checked/unchecked state as the master(conflated word).\r\n              // This is to make sure that it doesn't toggle words that aren't meant to be\r\n              // toggled in the state tree.\r\n              if ($childCheckbox.checkbox('is checked') !== masterChecked) {\r\n                $childCheckbox.checkbox(action);\r\n                toggleWords.push(conflatedWordInfo.makeup[index].word);\r\n              }\r\n            });\r\n\r\n            // Sends off the action with the children's conflated word's variants that need to be toggled.\r\n            toggleMostUsedWords(toggleWords);\r\n          }}>\r\n            <input type=\"checkbox\" name=\"example\" />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <div className=\"content\">\r\n      <table className=\"ui very basic celled unstackable table\">\r\n        <tbody>\r\n          {\r\n            conflatedWordInfo.makeup.map((makeupInfo, id) => (\r\n              <WordItem componentId={componentId} key={makeupInfo.word}\r\n                conflatedWord={`${conflatedWordInfo.word}`}\r\n                checkboxId={id}\r\n                makeupInfo={makeupInfo}\r\n                conflatedWordCount={conflatedWordInfo.count}\r\n                toggleMostUsedWords={toggleMostUsedWords}\r\n              />\r\n            ))\r\n          }\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  </div>\r\n);\r\n\r\nconst WordItem = ({ componentId, toggleMostUsedWords, makeupInfo, conflatedWord, checkboxId, conflatedWordCount }) => (\r\n  <tr>\r\n    <td className=\"right aligned\" style={{ width: '60px' }}>\r\n      {Math.round(makeupInfo.count / conflatedWordCount * 100)}%\r\n    </td>\r\n    <td className=\"right aligned\" style={{ width: '60px' }}>{makeupInfo.count}</td>\r\n    <td>{makeupInfo.word}</td>\r\n    <td>\r\n      <div data-id={`${conflatedWord}child${componentId}${checkboxId}`} className=\"ui checkbox words\" onClick={() => {\r\n        toggleMostUsedWords([makeupInfo.word]);\r\n        const $thisCheckbox = $(`.ui.checkbox.words[data-id^=\"${conflatedWord}child${componentId}${checkboxId}\"]`).checkbox('is checked');\r\n        const action = getSemanticCheckboxActionName($thisCheckbox);\r\n\r\n        // Checks if all the other conflated word's variants are the same state (checked/unchecked)\r\n        let allCheckboxesSame = true;\r\n        $(`.ui.checkbox.words[data-id^=\"${conflatedWord}child${componentId}\"]`).each((index) => {\r\n          if ($thisCheckbox !== $(`.ui.checkbox.words[data-id^=\"${conflatedWord}child${componentId}${index}\"]`).checkbox('is checked')) {\r\n            allCheckboxesSame = false;\r\n          }\r\n        });\r\n\r\n        // If they are, then check/uncheck the master checkbox\r\n        if (allCheckboxesSame) {\r\n          $(`.ui.checkbox.words[data-id=\"${conflatedWord}master${componentId}\"]`).checkbox(action);\r\n        }\r\n      }}>\r\n        <input type=\"checkbox\" name=\"example\" />\r\n      </div>\r\n    </td>\r\n  </tr>\r\n);\r\n\r\n/**\r\n * Sets the semantic-ui checkbox action method dependant on whether isChecked\r\n * @param Boolean\r\n * @returns String\r\n */\r\nconst getSemanticCheckboxActionName = (isChecked) => {\r\n  if (isChecked) {\r\n    return 'check';\r\n  } else {\r\n    return 'uncheck';\r\n  }\r\n};\r\n\r\nexport default WordItemsList;\r\n"
  },
  {
    "__docId__": 78,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "ConflatedWordItem",
    "memberof": "src/client/results/mostfrequent/words/WordItemsList.js",
    "longname": "src/client/results/mostfrequent/words/WordItemsList.js~ConflatedWordItem",
    "access": null,
    "export": false,
    "importPath": "solid-octo-disco/src/client/results/mostfrequent/words/WordItemsList.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 59,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 79,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "WordItem",
    "memberof": "src/client/results/mostfrequent/words/WordItemsList.js",
    "longname": "src/client/results/mostfrequent/words/WordItemsList.js~WordItem",
    "access": null,
    "export": false,
    "importPath": "solid-octo-disco/src/client/results/mostfrequent/words/WordItemsList.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 129,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 80,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "getSemanticCheckboxActionName",
    "memberof": "src/client/results/mostfrequent/words/WordItemsList.js",
    "longname": "src/client/results/mostfrequent/words/WordItemsList.js~getSemanticCheckboxActionName",
    "access": null,
    "export": false,
    "importPath": "solid-octo-disco/src/client/results/mostfrequent/words/WordItemsList.js",
    "importStyle": null,
    "description": "Sets the semantic-ui checkbox action method dependant on whether isChecked",
    "lineNumber": 166,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "String"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "Boolean",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "String"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 81,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "WordItemsList",
    "memberof": "src/client/results/mostfrequent/words/WordItemsList.js",
    "longname": "src/client/results/mostfrequent/words/WordItemsList.js~WordItemsList",
    "access": null,
    "export": true,
    "importPath": "solid-octo-disco/src/client/results/mostfrequent/words/WordItemsList.js",
    "importStyle": "WordItemsList",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "interface": false,
    "extends": [
      "react~Component"
    ]
  },
  {
    "__docId__": 82,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "componentDidMount",
    "memberof": "src/client/results/mostfrequent/words/WordItemsList.js~WordItemsList",
    "longname": "src/client/results/mostfrequent/words/WordItemsList.js~WordItemsList#componentDidMount",
    "access": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 83,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "componentDidUpdate",
    "memberof": "src/client/results/mostfrequent/words/WordItemsList.js~WordItemsList",
    "longname": "src/client/results/mostfrequent/words/WordItemsList.js~WordItemsList#componentDidUpdate",
    "access": null,
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "params": [
      {
        "name": "nextProps",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 84,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "render",
    "memberof": "src/client/results/mostfrequent/words/WordItemsList.js~WordItemsList",
    "longname": "src/client/results/mostfrequent/words/WordItemsList.js~WordItemsList#render",
    "access": null,
    "description": null,
    "lineNumber": 35,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 85,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/client/results/Results.js",
    "memberof": null,
    "longname": "src/client/results/Results.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Feed from './Feed';\r\nimport MostUsedWords from './mostfrequent/words/MostUsedWords';\r\nimport MostActiveUsers from './mostfrequent/users/MostActiveUsers';\r\nimport GoogleMap from './GoogleMap';\r\n\r\nclass Results extends Component {\r\n  componentDidMount() {\r\n    $('.ui.sticky').sticky({ context: '#feed' });\r\n    $('.tabular.menu.results .item.active').tab();\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    $('.ui.sticky').sticky({ context: '#feed' });\r\n    $('.tabular.menu.results .item').tab();\r\n  }\r\n\r\n  render() {\r\n    const { mostFrequent, feed } = this.props;\r\n\r\n    const posts = feed.posts;\r\n    if (posts.length === 0) {\r\n      return (\r\n        <div className=\"row\">\r\n          <div className=\"col-xs-12\">\r\n            <div className=\"ui violet inverted center aligned segment\">\r\n              <h3 className=\"ui inverted header\">\r\n                Start using Socto by typing into the search bar or by using the filters.\r\n              </h3>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <div style={{ width: '100%' }}>\r\n        <div className=\"row\" style={{ margin: '0px 25px' }}>\r\n          <div className=\"hidden-md-down col-lg-4\">\r\n            <div className=\"ui sticky\">\r\n              <MostActiveUsers filterTerm={mostFrequent.users.filterTerm}\r\n                userInfoList={feed.mostFrequentUsers}\r\n                isUsersToggledActionHide={mostFrequent.users.isToggledActionHide}\r\n                postsLength={posts.length}\r\n              />\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"col-sm-12 col-md-6 col-md-push-6 hidden-lg-up\">\r\n            <div className=\"ui tabular menu results\">\r\n              <div className=\"purple item active\" data-tab=\"top-users\">Top Users</div>\r\n              <div className=\"purple item\" data-tab=\"top-words\">Top Words</div>\r\n            </div>\r\n            <div className=\"ui tab active\" data-tab=\"top-users\">\r\n              <MostActiveUsers filterTerm={mostFrequent.users.filterTerm}\r\n                userInfoList={feed.mostFrequentUsers}\r\n                isUsersToggledActionHide={mostFrequent.users.isToggledActionHide}\r\n                postsLength={posts.length}\r\n              />\r\n            </div>\r\n            <div className=\"ui tab\" data-tab=\"top-words\">\r\n              <MostUsedWords filterTerm={mostFrequent.words.filterTerm}\r\n                wordInfoList={feed.groupedMostFrequentWords}\r\n                isWordsToggledActionHide={mostFrequent.words.isToggledActionHide}\r\n                postsLength={posts.length}\r\n                componentId=\"1\"\r\n              />\r\n            </div>\r\n          </div>\r\n\r\n          <div id=\"feed\" className=\"col-sm-12 col-md-6 col-md-pull-6 col-lg-5 col-lg-pull-0\">\r\n            <div className=\"hidden-md-down row\">\r\n              <div id=\"tweetMap\" style={{ height: '450px', width: '100%' }} ></div>\r\n              <GoogleMap posts={posts.filter((post) => post.data.longitude !== 0)} />\r\n            </div>\r\n\r\n\r\n            <div className=\"row\">\r\n              <Feed feed={posts}\r\n                toggledWords={mostFrequent.words.toToggle}\r\n                isWordsToggledActionHide={mostFrequent.words.isToggledActionHide}\r\n                toggledUsers={mostFrequent.users.toToggle}\r\n                isUsersToggledActionHide={mostFrequent.users.isToggledActionHide}\r\n                paginationInfo={feed.paginationInfo}\r\n              />\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"hidden-md-down col-lg-3\">\r\n            <div className=\"ui sticky\">\r\n              <MostUsedWords filterTerm={mostFrequent.words.filterTerm}\r\n                wordInfoList={feed.groupedMostFrequentWords}\r\n                isWordsToggledActionHide={mostFrequent.words.isToggledActionHide}\r\n                postsLength={posts.length}\r\n                componentId=\"2\"\r\n              />\r\n            </div>\r\n          </div>\r\n\r\n        </div>\r\n        <div className={`ui ${feed.posts.length > 0 && feed.fetchingRequestFromDB && 'active'} purple dimmer`}\r\n          style={{ position: 'fixed'}}\r\n        >\r\n          <div className=\"content\">\r\n            <div className=\"center\">\r\n              <h2 className=\"ui inverted icon header\">\r\n                <div className=\"ui large text loader\">Fetching posts from the database</div>\r\n              </h2>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nResults.propTypes = {\r\n  feed: React.PropTypes.object,\r\n  mostFrequent: React.PropTypes.object,\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  feed: state.feed,\r\n  mostFrequent: state.mostFrequent,\r\n});\r\n\r\nResults = connect(mapStateToProps)(Results);\r\nexport default Results;\r\n"
  },
  {
    "__docId__": 86,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "mapStateToProps",
    "memberof": "src/client/results/Results.js",
    "longname": "src/client/results/Results.js~mapStateToProps",
    "access": null,
    "export": false,
    "importPath": "solid-octo-disco/src/client/results/Results.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 122,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 87,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Results",
    "memberof": "src/client/results/Results.js",
    "longname": "src/client/results/Results.js~Results",
    "access": null,
    "export": true,
    "importPath": "solid-octo-disco/src/client/results/Results.js",
    "importStyle": "Results",
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "interface": false,
    "extends": [
      "react~Component"
    ]
  },
  {
    "__docId__": 88,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "componentDidMount",
    "memberof": "src/client/results/Results.js~Results",
    "longname": "src/client/results/Results.js~Results#componentDidMount",
    "access": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 89,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "componentDidUpdate",
    "memberof": "src/client/results/Results.js~Results",
    "longname": "src/client/results/Results.js~Results#componentDidUpdate",
    "access": null,
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 90,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "render",
    "memberof": "src/client/results/Results.js~Results",
    "longname": "src/client/results/Results.js~Results#render",
    "access": null,
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 91,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/client/search/AddSearchTerm.js",
    "memberof": null,
    "longname": "src/client/search/AddSearchTerm.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { addSearchTerm } from './searchActions';\r\n\r\nlet AddSearchTerm = ({ dispatch }) => {\r\n  const keywordSearchStyle = {\r\n    display: 'none',\r\n    paddingLeft: 20,\r\n    paddingTop: 10,\r\n    marginTop: 10,\r\n    borderTop: '2px dashed #D3D5D8',\r\n  };\r\n  return (\r\n    <div className=\"ui fluid big transparent input\"\r\n      style={keywordSearchStyle}\r\n      id=\"searchTermContainer\"\r\n    >\r\n      <input id=\"addSearchTerm\" type=\"text\"\r\n        placeholder=\"Search a keyword or hashtag\"\r\n        onBlur={() => {\r\n          $('#addSearchTerm').popup('hide');\r\n          $('#addSearchTerm').popup('destroy');\r\n          $('#searchTermContainer').slideUp('fast');\r\n        }}\r\n\r\n        onKeyDown={(e) => {\r\n          $('#addSearchTerm').popup('hide');\r\n          $('#addSearchTerm').popup('destroy');\r\n          if (e.keyCode === 13) {\r\n            if (e.target.value.length < 2) {\r\n              $('#addSearchTerm').popup({\r\n                popup: '.negative.message.popup',\r\n              });\r\n              $('#addSearchTermErrorText').html('Can only be at least 2 characters');\r\n              $('#addSearchTerm').popup('show');\r\n            } else if (e.target.value.length >= 30) {\r\n              $('#addSearchTerm').popup({\r\n                popup: '.negative.message.popup',\r\n              });\r\n              $('#addSearchTermErrorText').html('Can only be less than 30 characters');\r\n              $('#addSearchTerm').popup('show');\r\n            } else {\r\n              dispatch(addSearchTerm(e.target.value));\r\n              e.target.value = '';\r\n            }\r\n          }\r\n        }}\r\n      />\r\n      <div className=\"ui negative message popup transition hidden\">\r\n        <div className=\"header\">\r\n          <i className=\"red warning circle icon\"></i>\r\n          Search Validation Error\r\n        </div>\r\n        <p id=\"addSearchTermErrorText\">\r\n          this text will be changed by line 37 and 43\r\n        </p>\r\n      </div>\r\n      <i className=\"link remove circle icon\"></i>\r\n    </div>\r\n  );\r\n};\r\n\r\nAddSearchTerm = connect()(AddSearchTerm);\r\n\r\nexport default AddSearchTerm;\r\n"
  },
  {
    "__docId__": 92,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "AddSearchTerm",
    "memberof": "src/client/search/AddSearchTerm.js",
    "longname": "src/client/search/AddSearchTerm.js~AddSearchTerm",
    "access": null,
    "export": true,
    "importPath": "solid-octo-disco/src/client/search/AddSearchTerm.js",
    "importStyle": "AddSearchTerm",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 93,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/client/search/categories/categoryFilterActions.js",
    "memberof": null,
    "longname": "src/client/search/categories/categoryFilterActions.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import { newPromiseChain, makeGetHeader, fetchPost } from './../../../shared/utilities';\r\n\r\nimport fetch from 'isomorphic-fetch';\r\n\r\nexport const REQUEST_FOOTBALL_SEASON = 'REQUEST_FOOTBALL_SEASON';\r\nexport const requestFootballSeason = (year) => ({\r\n  type: REQUEST_FOOTBALL_SEASON,\r\n  year,\r\n});\r\n\r\nexport const RECEIVE_FOOTBALL_SEASON = 'RECEIVE_FOOTBALL_SEASON';\r\nexport const receiveFootballSeason = (year, json) => ({\r\n  type: RECEIVE_FOOTBALL_SEASON,\r\n  year,\r\n  footballSeasons: json,\r\n});\r\n\r\nexport const REMOVE_FOOTBALL_SEASON = 'REMOVE_FOOTBALL_SEASON';\r\nexport const removeFootballSeason = (year) => ({\r\n  type: REMOVE_FOOTBALL_SEASON,\r\n  year,\r\n});\r\n\r\nexport const fetchAllFootballSeasons = (year, isFirstYear) =>\r\n  dispatch => (\r\n    newPromiseChain()\r\n      .then(() => dispatch(requestFootballSeason(year)))\r\n      .then(() => fetch(`/football/seasons/${year}`, makeGetHeader()))\r\n      .then(response => response.json())\r\n      .then(json => {\r\n        const nextYearToCheck = year - 1;\r\n        if (json.length > 0) {\r\n          dispatch(receiveFootballSeason(year, json));\r\n          if (isFirstYear) {\r\n            dispatch(fetchAllFootballLeagueTeams(year));\r\n          }\r\n          return dispatch(fetchAllFootballSeasons(nextYearToCheck, false));\r\n        } else if (json.length === undefined) {\r\n          dispatch(removeFootballSeason(year));\r\n          return Promise.resolve();\r\n        } else {\r\n          dispatch(removeFootballSeason(year));\r\n          return dispatch(fetchAllFootballSeasons(nextYearToCheck, false));\r\n        }\r\n      })\r\n      .catch((error) => console.warn('Major error fetching the football seasons', error))\r\n);\r\n\r\nexport const REQUEST_YEARS_FOOTBALL_LEAGUES_TEAMS = 'REQUEST_YEARS_FOOTBALL_LEAGUES_TEAMS';\r\nexport const requestYearsFootballLeaguesTeams = (year) => ({\r\n  type: REQUEST_YEARS_FOOTBALL_LEAGUES_TEAMS,\r\n  year,\r\n});\r\n\r\nexport const RECEIVE_YEARS_FOOTBALL_LEAGUES_TEAMS = 'RECEIVE_YEARS_FOOTBALL_LEAGUES_TEAMS';\r\nexport const receiveYearsFootballLeaguesTeams = (year, json) => ({\r\n  type: RECEIVE_YEARS_FOOTBALL_LEAGUES_TEAMS,\r\n  year,\r\n  footballLeagues: json,\r\n});\r\n\r\nexport const fetchAllFootballLeagueTeams = (year) =>\r\n  (dispatch, getState) => (\r\n    newPromiseChain()\r\n      .then(() => dispatch(requestYearsFootballLeaguesTeams(year)))\r\n      .then(() => fetchPost(\r\n        `/football/seasons/${year}/teams`,\r\n        {\r\n          leagues: getState().football.seasonsByYear[year].seasons\r\n            .map((season) => ({ id: season.id, name: season.caption })),\r\n        }\r\n      ))\r\n      .then(results => results.json())\r\n      .then(allSeasonsTeams =>\r\n        dispatch(receiveYearsFootballLeaguesTeams(year, allSeasonsTeams.data.teamsByLeague))\r\n      )\r\n      .catch((error) => console.warn(`Major error fetching the ${year}'s' football leagues`, error))\r\n  );\r\n\r\nexport const SELECT_AND_REQUEST_FOOTBALL_TEAM = 'SELECT_AND_REQUEST_FOOTBALL_TEAM';\r\nexport const selectAndRequestFootballTeam = (id, name, shortName, crestUrl) => ({\r\n  type: SELECT_AND_REQUEST_FOOTBALL_TEAM,\r\n  id,\r\n  crestUrl,\r\n  name,\r\n  shortName,\r\n});\r\n\r\nexport const RECEIVE_SELECTED_FOOTBALL_TEAM_PLAYERS = 'RECEIVE_SELECTED_FOOTBALL_TEAM_PLAYERS';\r\nexport const receiveSelectedFootballTeamPlayers = (json) => ({\r\n  type: RECEIVE_SELECTED_FOOTBALL_TEAM_PLAYERS,\r\n  footballTeamPlayers: json,\r\n});\r\n\r\nexport const REMOVE_SELECTED_FOOTBALL_TEAM_PLAYERS = 'REMOVE_SELECTED_FOOTBALL_TEAM_PLAYERS';\r\nexport const removeSelectedFootballTeamPlayers = () => ({\r\n  type: REMOVE_SELECTED_FOOTBALL_TEAM_PLAYERS,\r\n});\r\n\r\nexport const fetchFootballTeamPlayers = (id, name, shortName, crestUrl) =>\r\n  (dispatch) => (\r\n    newPromiseChain()\r\n      .then(() => dispatch(selectAndRequestFootballTeam(id, name, shortName, crestUrl)))\r\n      .then(() => fetch(`/football/teams/${id}/players`, makeGetHeader()))\r\n      .then(response => response.json())\r\n      .then(json => dispatch(receiveSelectedFootballTeamPlayers(json)))\r\n      .catch((error) => console.warn(`Major error fetching ${name}'s players`, error))\r\n  );\r\n"
  },
  {
    "__docId__": 94,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "REQUEST_FOOTBALL_SEASON",
    "memberof": "src/client/search/categories/categoryFilterActions.js",
    "longname": "src/client/search/categories/categoryFilterActions.js~REQUEST_FOOTBALL_SEASON",
    "access": null,
    "export": true,
    "importPath": "solid-octo-disco/src/client/search/categories/categoryFilterActions.js",
    "importStyle": "{REQUEST_FOOTBALL_SEASON}",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 95,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "requestFootballSeason",
    "memberof": "src/client/search/categories/categoryFilterActions.js",
    "longname": "src/client/search/categories/categoryFilterActions.js~requestFootballSeason",
    "access": null,
    "export": true,
    "importPath": "solid-octo-disco/src/client/search/categories/categoryFilterActions.js",
    "importStyle": "{requestFootballSeason}",
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 96,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "RECEIVE_FOOTBALL_SEASON",
    "memberof": "src/client/search/categories/categoryFilterActions.js",
    "longname": "src/client/search/categories/categoryFilterActions.js~RECEIVE_FOOTBALL_SEASON",
    "access": null,
    "export": true,
    "importPath": "solid-octo-disco/src/client/search/categories/categoryFilterActions.js",
    "importStyle": "{RECEIVE_FOOTBALL_SEASON}",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 97,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "receiveFootballSeason",
    "memberof": "src/client/search/categories/categoryFilterActions.js",
    "longname": "src/client/search/categories/categoryFilterActions.js~receiveFootballSeason",
    "access": null,
    "export": true,
    "importPath": "solid-octo-disco/src/client/search/categories/categoryFilterActions.js",
    "importStyle": "{receiveFootballSeason}",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 98,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "REMOVE_FOOTBALL_SEASON",
    "memberof": "src/client/search/categories/categoryFilterActions.js",
    "longname": "src/client/search/categories/categoryFilterActions.js~REMOVE_FOOTBALL_SEASON",
    "access": null,
    "export": true,
    "importPath": "solid-octo-disco/src/client/search/categories/categoryFilterActions.js",
    "importStyle": "{REMOVE_FOOTBALL_SEASON}",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 99,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "removeFootballSeason",
    "memberof": "src/client/search/categories/categoryFilterActions.js",
    "longname": "src/client/search/categories/categoryFilterActions.js~removeFootballSeason",
    "access": null,
    "export": true,
    "importPath": "solid-octo-disco/src/client/search/categories/categoryFilterActions.js",
    "importStyle": "{removeFootballSeason}",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 100,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "fetchAllFootballSeasons",
    "memberof": "src/client/search/categories/categoryFilterActions.js",
    "longname": "src/client/search/categories/categoryFilterActions.js~fetchAllFootballSeasons",
    "access": null,
    "export": true,
    "importPath": "solid-octo-disco/src/client/search/categories/categoryFilterActions.js",
    "importStyle": "{fetchAllFootballSeasons}",
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 101,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "REQUEST_YEARS_FOOTBALL_LEAGUES_TEAMS",
    "memberof": "src/client/search/categories/categoryFilterActions.js",
    "longname": "src/client/search/categories/categoryFilterActions.js~REQUEST_YEARS_FOOTBALL_LEAGUES_TEAMS",
    "access": null,
    "export": true,
    "importPath": "solid-octo-disco/src/client/search/categories/categoryFilterActions.js",
    "importStyle": "{REQUEST_YEARS_FOOTBALL_LEAGUES_TEAMS}",
    "description": null,
    "lineNumber": 49,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 102,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "requestYearsFootballLeaguesTeams",
    "memberof": "src/client/search/categories/categoryFilterActions.js",
    "longname": "src/client/search/categories/categoryFilterActions.js~requestYearsFootballLeaguesTeams",
    "access": null,
    "export": true,
    "importPath": "solid-octo-disco/src/client/search/categories/categoryFilterActions.js",
    "importStyle": "{requestYearsFootballLeaguesTeams}",
    "description": null,
    "lineNumber": 50,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 103,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "RECEIVE_YEARS_FOOTBALL_LEAGUES_TEAMS",
    "memberof": "src/client/search/categories/categoryFilterActions.js",
    "longname": "src/client/search/categories/categoryFilterActions.js~RECEIVE_YEARS_FOOTBALL_LEAGUES_TEAMS",
    "access": null,
    "export": true,
    "importPath": "solid-octo-disco/src/client/search/categories/categoryFilterActions.js",
    "importStyle": "{RECEIVE_YEARS_FOOTBALL_LEAGUES_TEAMS}",
    "description": null,
    "lineNumber": 55,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 104,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "receiveYearsFootballLeaguesTeams",
    "memberof": "src/client/search/categories/categoryFilterActions.js",
    "longname": "src/client/search/categories/categoryFilterActions.js~receiveYearsFootballLeaguesTeams",
    "access": null,
    "export": true,
    "importPath": "solid-octo-disco/src/client/search/categories/categoryFilterActions.js",
    "importStyle": "{receiveYearsFootballLeaguesTeams}",
    "description": null,
    "lineNumber": 56,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 105,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "fetchAllFootballLeagueTeams",
    "memberof": "src/client/search/categories/categoryFilterActions.js",
    "longname": "src/client/search/categories/categoryFilterActions.js~fetchAllFootballLeagueTeams",
    "access": null,
    "export": true,
    "importPath": "solid-octo-disco/src/client/search/categories/categoryFilterActions.js",
    "importStyle": "{fetchAllFootballLeagueTeams}",
    "description": null,
    "lineNumber": 62,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 106,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "SELECT_AND_REQUEST_FOOTBALL_TEAM",
    "memberof": "src/client/search/categories/categoryFilterActions.js",
    "longname": "src/client/search/categories/categoryFilterActions.js~SELECT_AND_REQUEST_FOOTBALL_TEAM",
    "access": null,
    "export": true,
    "importPath": "solid-octo-disco/src/client/search/categories/categoryFilterActions.js",
    "importStyle": "{SELECT_AND_REQUEST_FOOTBALL_TEAM}",
    "description": null,
    "lineNumber": 80,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 107,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "selectAndRequestFootballTeam",
    "memberof": "src/client/search/categories/categoryFilterActions.js",
    "longname": "src/client/search/categories/categoryFilterActions.js~selectAndRequestFootballTeam",
    "access": null,
    "export": true,
    "importPath": "solid-octo-disco/src/client/search/categories/categoryFilterActions.js",
    "importStyle": "{selectAndRequestFootballTeam}",
    "description": null,
    "lineNumber": 81,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 108,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "RECEIVE_SELECTED_FOOTBALL_TEAM_PLAYERS",
    "memberof": "src/client/search/categories/categoryFilterActions.js",
    "longname": "src/client/search/categories/categoryFilterActions.js~RECEIVE_SELECTED_FOOTBALL_TEAM_PLAYERS",
    "access": null,
    "export": true,
    "importPath": "solid-octo-disco/src/client/search/categories/categoryFilterActions.js",
    "importStyle": "{RECEIVE_SELECTED_FOOTBALL_TEAM_PLAYERS}",
    "description": null,
    "lineNumber": 89,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 109,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "receiveSelectedFootballTeamPlayers",
    "memberof": "src/client/search/categories/categoryFilterActions.js",
    "longname": "src/client/search/categories/categoryFilterActions.js~receiveSelectedFootballTeamPlayers",
    "access": null,
    "export": true,
    "importPath": "solid-octo-disco/src/client/search/categories/categoryFilterActions.js",
    "importStyle": "{receiveSelectedFootballTeamPlayers}",
    "description": null,
    "lineNumber": 90,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 110,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "REMOVE_SELECTED_FOOTBALL_TEAM_PLAYERS",
    "memberof": "src/client/search/categories/categoryFilterActions.js",
    "longname": "src/client/search/categories/categoryFilterActions.js~REMOVE_SELECTED_FOOTBALL_TEAM_PLAYERS",
    "access": null,
    "export": true,
    "importPath": "solid-octo-disco/src/client/search/categories/categoryFilterActions.js",
    "importStyle": "{REMOVE_SELECTED_FOOTBALL_TEAM_PLAYERS}",
    "description": null,
    "lineNumber": 95,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 111,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "removeSelectedFootballTeamPlayers",
    "memberof": "src/client/search/categories/categoryFilterActions.js",
    "longname": "src/client/search/categories/categoryFilterActions.js~removeSelectedFootballTeamPlayers",
    "access": null,
    "export": true,
    "importPath": "solid-octo-disco/src/client/search/categories/categoryFilterActions.js",
    "importStyle": "{removeSelectedFootballTeamPlayers}",
    "description": null,
    "lineNumber": 96,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 112,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "fetchFootballTeamPlayers",
    "memberof": "src/client/search/categories/categoryFilterActions.js",
    "longname": "src/client/search/categories/categoryFilterActions.js~fetchFootballTeamPlayers",
    "access": null,
    "export": true,
    "importPath": "solid-octo-disco/src/client/search/categories/categoryFilterActions.js",
    "importStyle": "{fetchFootballTeamPlayers}",
    "description": null,
    "lineNumber": 100,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 113,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/client/search/categories/categoryFilterActions.spec.js",
    "memberof": null,
    "longname": "src/client/search/categories/categoryFilterActions.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import { should } from 'chai';\r\nimport * as actions from './categoryFilterActions';\r\n\r\ndescribe('#categoryFilterActions', () => {\r\n  describe('footballSeasonActions', () => {\r\n    it('should create an action to request football season', () => {\r\n      const year = 2016;\r\n\r\n      const expectedAction = {\r\n        type: actions.REQUEST_FOOTBALL_SEASON,\r\n        year,\r\n      };\r\n\r\n      actions.requestFootballSeason(year).should.deep.equal(expectedAction);\r\n    });\r\n\r\n    it('should create an action to receive football season', () => {\r\n      const year = 2016;\r\n      const exampleJson = { seasons: ['season1', 'season2'] };\r\n\r\n      const expectedAction = {\r\n        type: actions.RECEIVE_FOOTBALL_SEASON,\r\n        year,\r\n        footballSeasons: exampleJson,\r\n      };\r\n\r\n      actions.receiveFootballSeason(year, exampleJson).should.deep.equal(expectedAction);\r\n    });\r\n\r\n    it('should create an action to remove a football season', () => {\r\n      const year = 2016;\r\n\r\n      const expectedAction = {\r\n        type: actions.REMOVE_FOOTBALL_SEASON,\r\n        year,\r\n      };\r\n\r\n      actions.removeFootballSeason(year).should.deep.equal(expectedAction);\r\n    });\r\n  });\r\n\r\n  describe('yearsFootballLeaguesTeams', () => {\r\n    it('should create an action to request football league teams', () => {\r\n      const year = 2016;\r\n\r\n      const expectedAction = {\r\n        type: actions.REQUEST_YEARS_FOOTBALL_LEAGUES_TEAMS,\r\n        year,\r\n      };\r\n\r\n      actions.requestYearsFootballLeaguesTeams(year).should.deep.equal(expectedAction);\r\n    });\r\n\r\n    it('should create an action to receive football league teams', () => {\r\n      const year = 2016;\r\n      const exampleJson = { leagues: ['league1', 'league2'] };\r\n\r\n      const expectedAction = {\r\n        type: actions.RECEIVE_YEARS_FOOTBALL_LEAGUES_TEAMS,\r\n        year,\r\n        footballLeagues: exampleJson,\r\n      };\r\n\r\n      actions.receiveYearsFootballLeaguesTeams(year, exampleJson).should.deep.equal(expectedAction);\r\n    });\r\n  });\r\n\r\n  describe('footballTeamPlayers', () => {\r\n    it('should create an action to select and request football team players', () => {\r\n      const id = 1;\r\n      const name = 'example football team';\r\n      const shortName = 'ExFootTeam';\r\n      const crestUrl = 'http://exFootTeamCrest.com';\r\n\r\n      const expectedAction = {\r\n        type: actions.SELECT_AND_REQUEST_FOOTBALL_TEAM,\r\n        id,\r\n        name,\r\n        shortName,\r\n        crestUrl,\r\n      };\r\n\r\n      actions.selectAndRequestFootballTeam(id, name, shortName, crestUrl).should.deep.equal(expectedAction);\r\n    });\r\n\r\n    it('should create an action to select and request football team players', () => {\r\n      const exampleJson = { players: ['player1', 'player2'] };\r\n\r\n      const expectedAction = {\r\n        type: actions.RECEIVE_SELECTED_FOOTBALL_TEAM_PLAYERS,\r\n        footballTeamPlayers: exampleJson,\r\n      };\r\n\r\n      actions.receiveSelectedFootballTeamPlayers(exampleJson).should.deep.equal(expectedAction);\r\n    });\r\n\r\n    it('should create an action to remove selection of a football team players', () => {\r\n      const expectedAction = {\r\n        type: actions.REMOVE_SELECTED_FOOTBALL_TEAM_PLAYERS,\r\n      };\r\n\r\n      actions.removeSelectedFootballTeamPlayers().should.deep.equal(expectedAction);\r\n    });\r\n  });\r\n});\r\n"
  },
  {
    "__docId__": 114,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/client/search/categories/CategoryFilters.js",
    "memberof": null,
    "longname": "src/client/search/categories/CategoryFilters.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import React, { Component } from 'react';\r\nimport YearSelector from './YearSelector';\r\nimport { connect } from 'react-redux';\r\nimport { newPromiseChain } from './../../../shared/utilities';\r\nimport LeagueCategory from './LeagueCategory';\r\nimport TeamCategory from './TeamCategory';\r\nimport PlayerCategory from './PlayerCategory';\r\nimport {\r\n  fetchAllFootballLeagueTeams,\r\n  fetchFootballTeamPlayers, removeSelectedFootballTeamPlayers\r\n} from './categoryFilterActions';\r\nimport { addSearchTerm, deleteSearchTerm, toggleSearchOnlyDb } from './../searchActions';\r\nimport moment from 'moment';\r\n\r\nexport const EARLIEST_YEAR_AVAILABLE_FROM_FOOTBALL_API = 2013;\r\n\r\nclass CategoryFilters extends Component {\r\n  componentDidMount() {\r\n    $('.ui.slider.cache.checkbox').checkbox();\r\n    $('.menu .item').tab({\r\n      onVisible: (tabPath) => {\r\n        // animation for the league counts on the tabs\r\n        const currentYear = moment().year() - 1;\r\n\r\n        // for each year tab\r\n        for (let y = currentYear; y >= EARLIEST_YEAR_AVAILABLE_FROM_FOOTBALL_API; y--) {\r\n          // if the year is the visible tab\r\n          if (parseInt(tabPath) === y) {\r\n            // then hide the tab's title league count and show the league dropdown's count\r\n            newPromiseChain()\r\n              .then(() =>\r\n                $(`.label.year.league.count.title[data-id=\"${y}\"]`).transition('slide up'))\r\n              .then(() =>\r\n                $(`.label.year.league.count.content[data-id=\"${y}\"]`).transition('slide down'))\r\n              .then(() =>\r\n                $(`.label.year.league.count.content[data-id=\"${y}\"]`).transition('jiggle'));\r\n          } else {\r\n            // otherwise if the tab's title league count was hidden show it and hide the\r\n            // hidden dropdown's count\r\n            if ($(`.label.year.league.count.title[data-id=\"${y}\"]`).hasClass('hidden')) {\r\n              newPromiseChain()\r\n                .then(() =>\r\n                  $(`.label.year.league.count.title[data-id=\"${y}\"]`).transition('slide up'))\r\n                .then(() =>\r\n                  $(`.label.year.league.count.content[data-id=\"${y}\"]`).transition('slide down'));\r\n            }\r\n          }\r\n        }\r\n\r\n        let leagueLength = 0;\r\n        if (this.props.football.leagueTeamsByYear[tabPath]) {\r\n          leagueLength = this.props.football.leagueTeamsByYear[tabPath].leagues.length;\r\n        }\r\n\r\n        // only fetches the data for the football year if it hasn't already been fetched\r\n        return this.props.onClickYearTab(tabPath, leagueLength);\r\n      },\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const currentYear = moment().year() - 1;\r\n    let seasonYearTabsContent = [];\r\n    for (let y = currentYear; y >= EARLIEST_YEAR_AVAILABLE_FROM_FOOTBALL_API; y--) {\r\n      // adding active to the current year to show the initial year's tab\r\n      const tabContentClassName =\r\n        y === currentYear ? 'ui bottom attached active tab segment' : 'ui bottom attached tab segment';\r\n\r\n      seasonYearTabsContent.push(\r\n        <div key={`yearcontent${y}`} className={tabContentClassName} data-tab={y}>\r\n          <div className=\"ui stackable grid\">\r\n            <div className=\"four wide column\" style={{ paddingRight: '0px'}}>\r\n              <LeagueCategory leagues={this.props.football.seasonsByYear[y]}\r\n                currentYear={currentYear} tabYear={y}\r\n                currentSearchTerms={this.props.currentSearchTerms}\r\n                onClickAddLeague={this.props.onClickAddCategoryFilter}\r\n                onClickRemoveLeague={this.props.onClickRemoveCategoryFilter}\r\n              />\r\n            </div>\r\n            <div className=\"twelve wide column\">\r\n              <div className=\"ui stackable grid\">\r\n                <div className=\"five wide column\" style={{ paddingLeft: '7px' }}>\r\n                  <TeamCategory teamsByLeague={this.props.football.leagueTeamsByYear[y]}\r\n                    currentSearchTerms={this.props.currentSearchTerms}\r\n                    onClickAddTeam={this.props.onClickAddCategoryFilter}\r\n                    onClickRemoveTeam={this.props.onClickRemoveCategoryFilter}\r\n                    onClickSelectTeam={this.props.onClickSelectTeam}\r\n                  />\r\n                </div>\r\n                <div className=\"middle aligned eleven wide column\" style={{ paddingLeft: '0px', paddingRight: '0px' }}>\r\n                  {\r\n                    !this.props.football.selectedTeam.isSelected &&\r\n                    this.props.football.leagueTeamsByYear[y] &&\r\n                    !this.props.football.leagueTeamsByYear[y].isFetching &&\r\n                      <span className=\"ui large purple tag label\">\r\n                        Select a team to add players...\r\n                      </span>\r\n                  }\r\n                  {\r\n                    this.props.football.selectedTeam.isSelected &&\r\n                      <PlayerCategory teamName={this.props.football.selectedTeam.name}\r\n                        isTeamPlayersFetching={this.props.football.selectedTeam.isFetching}\r\n                        teamCrestUrl={this.props.football.selectedTeam.crestUrl}\r\n                        teamPlayers={this.props.football.selectedTeam.players}\r\n                        currentSearchTerms={this.props.currentSearchTerms}\r\n                        onClickAddPlayer={this.props.onClickAddCategoryFilter}\r\n                        onClickRemovePlayer={this.props.onClickRemoveCategoryFilter}\r\n                      />\r\n                  }\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <YearSelector seasonYears={this.props.football.seasonsByYear} currentYear={currentYear}\r\n          onClickToggleDbOnlySearch={this.props.onClickToggleDbOnlySearch}\r\n        />\r\n        {seasonYearTabsContent}\r\n      </div>\r\n    );\r\n  }\r\n}\r\nCategoryFilters.propTypes = {\r\n  football: React.PropTypes.object,\r\n  onClickCategoryFilter: React.PropTypes.func,\r\n  onClickToggleDbOnlySearch: React.PropTypes.func,\r\n  currentSearchTerms: React.PropTypes.array,\r\n  onClickAddCategoryFilter: React.PropTypes.func,\r\n  onClickRemoveCategoryFilter: React.PropTypes.func,\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  football: state.football,\r\n  currentSearchTerms: state.searchTerms,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  onClickAddCategoryFilter: (newTerm) => dispatch(addSearchTerm(newTerm)),\r\n  onClickRemoveCategoryFilter: (id) => dispatch(deleteSearchTerm(id)),\r\n  onClickSelectTeam: (id, name, shortName, crestUrl) =>\r\n    dispatch(fetchFootballTeamPlayers(id, name, shortName, crestUrl)),\r\n  onClickYearTab: (year, leagueLength) => {\r\n    dispatch(removeSelectedFootballTeamPlayers());\r\n    if (leagueLength === 0) {\r\n      return dispatch(fetchAllFootballLeagueTeams(year));\r\n    }\r\n\r\n    return false;\r\n  },\r\n  onClickToggleDbOnlySearch: () => {\r\n    dispatch(toggleSearchOnlyDb());\r\n  },\r\n});\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps,\r\n)(CategoryFilters);\r\n"
  },
  {
    "__docId__": 115,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "EARLIEST_YEAR_AVAILABLE_FROM_FOOTBALL_API",
    "memberof": "src/client/search/categories/CategoryFilters.js",
    "longname": "src/client/search/categories/CategoryFilters.js~EARLIEST_YEAR_AVAILABLE_FROM_FOOTBALL_API",
    "access": null,
    "export": true,
    "importPath": "solid-octo-disco/src/client/search/categories/CategoryFilters.js",
    "importStyle": "{EARLIEST_YEAR_AVAILABLE_FROM_FOOTBALL_API}",
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 116,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "CategoryFilters",
    "memberof": "src/client/search/categories/CategoryFilters.js",
    "longname": "src/client/search/categories/CategoryFilters.js~CategoryFilters",
    "access": null,
    "export": false,
    "importPath": "solid-octo-disco/src/client/search/categories/CategoryFilters.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "interface": false,
    "extends": [
      "react~Component"
    ]
  },
  {
    "__docId__": 117,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "componentDidMount",
    "memberof": "src/client/search/categories/CategoryFilters.js~CategoryFilters",
    "longname": "src/client/search/categories/CategoryFilters.js~CategoryFilters#componentDidMount",
    "access": null,
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 118,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "render",
    "memberof": "src/client/search/categories/CategoryFilters.js~CategoryFilters",
    "longname": "src/client/search/categories/CategoryFilters.js~CategoryFilters#render",
    "access": null,
    "description": null,
    "lineNumber": 61,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 119,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "mapStateToProps",
    "memberof": "src/client/search/categories/CategoryFilters.js",
    "longname": "src/client/search/categories/CategoryFilters.js~mapStateToProps",
    "access": null,
    "export": false,
    "importPath": "solid-octo-disco/src/client/search/categories/CategoryFilters.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 137,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 120,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "mapDispatchToProps",
    "memberof": "src/client/search/categories/CategoryFilters.js",
    "longname": "src/client/search/categories/CategoryFilters.js~mapDispatchToProps",
    "access": null,
    "export": false,
    "importPath": "solid-octo-disco/src/client/search/categories/CategoryFilters.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 142,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 121,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/client/search/categories/categoryFiltersReducer.js",
    "memberof": null,
    "longname": "src/client/search/categories/categoryFiltersReducer.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import {\r\n  REQUEST_FOOTBALL_SEASON, RECEIVE_FOOTBALL_SEASON, REMOVE_FOOTBALL_SEASON,\r\n  REQUEST_YEARS_FOOTBALL_LEAGUES_TEAMS, RECEIVE_YEARS_FOOTBALL_LEAGUES_TEAMS,\r\n  SELECT_AND_REQUEST_FOOTBALL_TEAM, RECEIVE_SELECTED_FOOTBALL_TEAM_PLAYERS,\r\n  REMOVE_SELECTED_FOOTBALL_TEAM_PLAYERS\r\n} from './categoryFilterActions';\r\n\r\nexport const footballCategoryFiltersInitialState = {\r\n  seasonsByYear: {},\r\n  leagueTeamsByYear: {},\r\n  selectedTeam: {\r\n    isSelected: false,\r\n    isFetching: false,\r\n  },\r\n};\r\n\r\nconst footballCategoryFiltersReducer = (state = footballCategoryFiltersInitialState, action) => {\r\n  switch (action.type) {\r\n  case REQUEST_FOOTBALL_SEASON:\r\n  case RECEIVE_FOOTBALL_SEASON:\r\n    return {\r\n      ...state,\r\n      seasonsByYear: {\r\n        ...state.seasonsByYear,\r\n        [action.year]: footballSeasonReducer(state.seasonsByYear[action.year], action),\r\n      },\r\n    };\r\n  case REMOVE_FOOTBALL_SEASON: {\r\n    const oldSeasonsByYear = state.seasonsByYear;\r\n    delete oldSeasonsByYear[action.year];\r\n    return {\r\n      ...state,\r\n      seasonsByYear: oldSeasonsByYear,\r\n    };\r\n  }\r\n  case REQUEST_YEARS_FOOTBALL_LEAGUES_TEAMS:\r\n  case RECEIVE_YEARS_FOOTBALL_LEAGUES_TEAMS:\r\n    return {\r\n      ...state,\r\n      leagueTeamsByYear: {\r\n        ...state.leagueTeamsByYear,\r\n        [action.year]: footballLeagueTeamsReducer(state.leagueTeamsByYear[action.year], action),\r\n      },\r\n    };\r\n  case SELECT_AND_REQUEST_FOOTBALL_TEAM:\r\n    return {\r\n      ...state,\r\n      selectedTeam: {\r\n        isSelected: true,\r\n        isFetching: true,\r\n        id: action.id,\r\n        name: action.name,\r\n        shortName: action.shortName,\r\n        crestUrl: action.crestUrl,\r\n        players: [],\r\n        count: 0,\r\n      },\r\n    };\r\n  case RECEIVE_SELECTED_FOOTBALL_TEAM_PLAYERS:\r\n    return {\r\n      ...state,\r\n      selectedTeam: {\r\n        ...state.selectedTeam,\r\n        isFetching: false,\r\n        ...action.footballTeamPlayers,\r\n      },\r\n    };\r\n  case REMOVE_SELECTED_FOOTBALL_TEAM_PLAYERS:\r\n    return {\r\n      ...state,\r\n      selectedTeam: {\r\n        isSelected: false,\r\n        isFetching: false,\r\n      },\r\n    };\r\n  default:\r\n    return state;\r\n  }\r\n};\r\n\r\nconst footballSeasonReducer = (state = { isFetching: false, seasons: [] }, action) => {\r\n  switch (action.type) {\r\n  case REQUEST_FOOTBALL_SEASON:\r\n    return {\r\n      ...state,\r\n      isFetching: true,\r\n    };\r\n  case RECEIVE_FOOTBALL_SEASON:\r\n    return {\r\n      isFetching: false,\r\n      seasons: action.footballSeasons,\r\n    };\r\n  default:\r\n    return state;\r\n  }\r\n};\r\n\r\nconst footballLeagueTeamsReducer = (state = { isFetching: false, leagues: [] }, action) => {\r\n  switch (action.type) {\r\n  case REQUEST_YEARS_FOOTBALL_LEAGUES_TEAMS:\r\n    return {\r\n      ...state,\r\n      isFetching: true,\r\n    };\r\n  case RECEIVE_YEARS_FOOTBALL_LEAGUES_TEAMS:\r\n    return {\r\n      isFetching: false,\r\n      leagues: action.footballLeagues,\r\n    };\r\n  default:\r\n    return state;\r\n  }\r\n};\r\n\r\nexport default footballCategoryFiltersReducer;\r\n"
  },
  {
    "__docId__": 122,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "footballCategoryFiltersInitialState",
    "memberof": "src/client/search/categories/categoryFiltersReducer.js",
    "longname": "src/client/search/categories/categoryFiltersReducer.js~footballCategoryFiltersInitialState",
    "access": null,
    "export": true,
    "importPath": "solid-octo-disco/src/client/search/categories/categoryFiltersReducer.js",
    "importStyle": "{footballCategoryFiltersInitialState}",
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 123,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "footballSeasonReducer",
    "memberof": "src/client/search/categories/categoryFiltersReducer.js",
    "longname": "src/client/search/categories/categoryFiltersReducer.js~footballSeasonReducer",
    "access": null,
    "export": false,
    "importPath": "solid-octo-disco/src/client/search/categories/categoryFiltersReducer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 81,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 124,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "footballLeagueTeamsReducer",
    "memberof": "src/client/search/categories/categoryFiltersReducer.js",
    "longname": "src/client/search/categories/categoryFiltersReducer.js~footballLeagueTeamsReducer",
    "access": null,
    "export": false,
    "importPath": "solid-octo-disco/src/client/search/categories/categoryFiltersReducer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 98,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 125,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "footballCategoryFiltersReducer",
    "memberof": "src/client/search/categories/categoryFiltersReducer.js",
    "longname": "src/client/search/categories/categoryFiltersReducer.js~footballCategoryFiltersReducer",
    "access": null,
    "export": true,
    "importPath": "solid-octo-disco/src/client/search/categories/categoryFiltersReducer.js",
    "importStyle": "footballCategoryFiltersReducer",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 126,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/client/search/categories/categoryFiltersReducer.spec.js",
    "memberof": null,
    "longname": "src/client/search/categories/categoryFiltersReducer.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import { should } from 'chai';\r\nimport deepFreeze from 'deep-freeze';\r\nimport footballCategoryFiltersReducer, { footballCategoryFiltersInitialState } from './categoryFiltersReducer';\r\nimport * as actions from './categoryFilterActions';\r\n\r\ndescribe('#footballCategoryFiltersReducer', () => {\r\n  const year = 2016;\r\n  describe('footballSeason', () => {\r\n    it('should start fetching the requested seasons data', () => {\r\n      const stateBefore = footballCategoryFiltersInitialState;\r\n      const action = actions.requestFootballSeason(year);\r\n\r\n      const stateAfter = {\r\n        seasonsByYear: {\r\n          [year]: {\r\n            isFetching: true,\r\n            seasons: [],\r\n          },\r\n        },\r\n        leagueTeamsByYear: {},\r\n        selectedTeam: {\r\n          isSelected: false,\r\n          isFetching: false,\r\n        },\r\n      };\r\n\r\n      deepFreeze(stateBefore);\r\n      deepFreeze(action);\r\n\r\n      footballCategoryFiltersReducer(stateBefore, action).should.deep.equal(stateAfter);\r\n    });\r\n\r\n    it('should finish fetching the requested seasons data', () => {\r\n      const exampleJson = { seasons: ['season1', 'season2'] };\r\n      const stateBefore = footballCategoryFiltersReducer(\r\n        footballCategoryFiltersInitialState,\r\n        actions.requestFootballSeason(year)\r\n      );\r\n      const action = actions.receiveFootballSeason(year, exampleJson);\r\n\r\n      const stateAfter = {\r\n        seasonsByYear: {\r\n          [year]: {\r\n            isFetching: false,\r\n            seasons: exampleJson,\r\n          },\r\n        },\r\n        leagueTeamsByYear: {},\r\n        selectedTeam: {\r\n          isSelected: false,\r\n          isFetching: false,\r\n        },\r\n      };\r\n\r\n      deepFreeze(stateBefore);\r\n      deepFreeze(action);\r\n\r\n      footballCategoryFiltersReducer(stateBefore, action).should.deep.equal(stateAfter);\r\n    });\r\n  });\r\n\r\n  describe('years football leagues teams', () => {\r\n    it('should start fetching the requested years football league teams data', () => {\r\n      const stateBefore = footballCategoryFiltersInitialState;\r\n      const action = actions.requestYearsFootballLeaguesTeams(year);\r\n\r\n      const stateAfter = {\r\n        seasonsByYear: {},\r\n        leagueTeamsByYear: {\r\n          [year]: {\r\n            isFetching: true,\r\n            leagues: [],\r\n          },\r\n        },\r\n        selectedTeam: {\r\n          isSelected: false,\r\n          isFetching: false,\r\n        },\r\n      };\r\n\r\n      deepFreeze(stateBefore);\r\n      deepFreeze(action);\r\n\r\n      footballCategoryFiltersReducer(stateBefore, action).should.deep.equal(stateAfter);\r\n    });\r\n\r\n    it('should finish fetching the requested years football league teams data', () => {\r\n      const exampleJson = { leagues: ['league1', 'league2'] };\r\n      const stateBefore = footballCategoryFiltersReducer(\r\n        footballCategoryFiltersInitialState,\r\n        actions.requestYearsFootballLeaguesTeams(year)\r\n      );\r\n      const action = actions.receiveYearsFootballLeaguesTeams(year, exampleJson);\r\n\r\n      const stateAfter = {\r\n        seasonsByYear: {},\r\n        leagueTeamsByYear: {\r\n          [year]: {\r\n            isFetching: false,\r\n            leagues: exampleJson,\r\n          },\r\n        },\r\n        selectedTeam: {\r\n          isSelected: false,\r\n          isFetching: false,\r\n        },\r\n      };\r\n\r\n      deepFreeze(stateBefore);\r\n      deepFreeze(action);\r\n\r\n      footballCategoryFiltersReducer(stateBefore, action).should.deep.equal(stateAfter);\r\n    });\r\n  });\r\n\r\n  describe('football team players', () => {\r\n    const id = 1;\r\n    const name = 'example football team';\r\n    const shortName = 'ExFootTeam';\r\n    const crestUrl = 'http://exFootTeamCrest.com';\r\n\r\n    it('should select and start fetching the requested football team players', () => {\r\n      const stateBefore = footballCategoryFiltersInitialState;\r\n      const action = actions.selectAndRequestFootballTeam(id, name, shortName, crestUrl);\r\n\r\n      const stateAfter = {\r\n        seasonsByYear: {},\r\n        leagueTeamsByYear: {},\r\n        selectedTeam: {\r\n          isSelected: true,\r\n          isFetching: true,\r\n          id,\r\n          name,\r\n          shortName,\r\n          crestUrl,\r\n          players: [],\r\n          count: 0,\r\n        },\r\n      };\r\n\r\n      deepFreeze(stateBefore);\r\n      deepFreeze(action);\r\n\r\n      footballCategoryFiltersReducer(stateBefore, action).should.deep.equal(stateAfter);\r\n    });\r\n\r\n    it('should finish fetching the requested football team players', () => {\r\n      const exampleJson = { players: ['player1', 'player2'], count: 10 };\r\n      const stateBefore = footballCategoryFiltersReducer(\r\n        footballCategoryFiltersInitialState,\r\n        actions.selectAndRequestFootballTeam(id, name, shortName, crestUrl)\r\n      );\r\n      const action = actions.receiveSelectedFootballTeamPlayers(exampleJson);\r\n\r\n      const stateAfter = {\r\n        seasonsByYear: {},\r\n        leagueTeamsByYear: {},\r\n        selectedTeam: {\r\n          isSelected: true,\r\n          isFetching: false,\r\n          id,\r\n          name,\r\n          shortName,\r\n          crestUrl,\r\n          ...exampleJson,\r\n        },\r\n      };\r\n\r\n      deepFreeze(stateBefore);\r\n      deepFreeze(action);\r\n\r\n      footballCategoryFiltersReducer(stateBefore, action).should.deep.equal(stateAfter);\r\n    });\r\n\r\n    it('should remove the selected football team players', () => {\r\n      const exampleJson = { players: ['player1', 'player2'] };\r\n      const stateBefore = footballCategoryFiltersReducer(\r\n        footballCategoryFiltersInitialState,\r\n        actions.receiveSelectedFootballTeamPlayers(exampleJson),\r\n      );\r\n      const action = actions.removeSelectedFootballTeamPlayers();\r\n\r\n      const stateAfter = footballCategoryFiltersInitialState;\r\n\r\n      deepFreeze(stateBefore);\r\n      deepFreeze(action);\r\n\r\n      footballCategoryFiltersReducer(stateBefore, action).should.deep.equal(stateAfter);\r\n    });\r\n  });\r\n});\r\n"
  },
  {
    "__docId__": 127,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/client/search/categories/LeagueCategory.js",
    "memberof": null,
    "longname": "src/client/search/categories/LeagueCategory.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import React, { Component } from 'react';\r\n\r\nclass LeagueCategory extends Component {\r\n  componentDidMount() {\r\n    $('.ui.dropdown.leagues').dropdown({\r\n      action: 'nothing',\r\n    });\r\n  }\r\n\r\n  render() {\r\n    let yearsLeagues = [];\r\n    if (this.props.leagues) {\r\n      if (!this.props.leagues.isFetching) {\r\n        yearsLeagues = this.props.leagues.seasons;\r\n      }\r\n    }\r\n\r\n    const isFetchingLoader = <i className=\"purple icon\"><div className=\"ui active inline loader\"></div></i>;\r\n    const isFetchingSmallLoader = <i className=\"purple icon\"><div className=\"ui active small inline loader\"></div></i>;\r\n\r\n    const leagueCountTransitionClassName =\r\n      this.props.tabYear === this.props.currentYear ?\r\n      'ui purple horizontal label year league count content transition visible'\r\n      :\r\n      'ui purple horizontal label year league count content transition hidden';\r\n\r\n    return (\r\n      <div className=\"large fluid ui dropdown labeled icon button leagues category\" style={{ paddingLeft: '13px!important', paddingRight: '38px!important'}}>\r\n        {yearsLeagues.length === 0 ? isFetchingLoader : <i className=\"trophy purple icon\"></i>}\r\n        <span className=\"text\">\r\n          {\r\n            yearsLeagues.length === 0 ?\r\n            isFetchingSmallLoader\r\n            :\r\n              <div data-id={this.props.tabYear} className={leagueCountTransitionClassName}>\r\n                {yearsLeagues.length}\r\n              </div>\r\n          }\r\n          Leagues...\r\n        </span>\r\n        <div className=\"menu\">\r\n          <div className=\"ui icon search input\">\r\n            <i className=\"search icon\"></i>\r\n            <input type=\"text\" placeholder=\"Search tags...\" />\r\n          </div>\r\n          {yearsLeagues.map(league => {\r\n            // gets rid of the 20XX/YY year at the end of the caption\r\n            const leagueName = league.caption.slice(0, league.caption.length - 7);\r\n            const searchesQueriesSameAsLeague = this.props.currentSearchTerms\r\n            .filter(\r\n            (searchTerm) => searchTerm.query === leagueName || searchTerm.query === league.league\r\n            );\r\n            const leagueAlreadyAddedToSearch = searchesQueriesSameAsLeague.length > 0;\r\n            return (\r\n              <LeagueItem key={`league${league.id}`} name={leagueName}\r\n                alreadyAddedToSearch={leagueAlreadyAddedToSearch}\r\n                onClickLeague={() => {\r\n                  if (leagueAlreadyAddedToSearch) {\r\n                    searchesQueriesSameAsLeague.forEach(\r\n                      search => this.props.onClickRemoveLeague(search.id)\r\n                    );\r\n                  } else {\r\n                    this.props.onClickAddLeague(`*${leagueName}`);\r\n                    this.props.onClickAddLeague(`#${league.league}`);\r\n                  }\r\n                }}\r\n              />\r\n            );\r\n          })}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nLeagueCategory.propTypes = {\r\n  leagues: React.PropTypes.object,\r\n  tabYear: React.PropTypes.number,\r\n  currentSearchTerms: React.PropTypes.array,\r\n  currentYear: React.PropTypes.number,\r\n  onClickAddLeague: React.PropTypes.func,\r\n  onClickRemoveLeague: React.PropTypes.func,\r\n};\r\n\r\nconst LeagueItem = ({ name, alreadyAddedToSearch, onClickLeague }) => (\r\n  <div className=\"item league\" onClick={() => onClickLeague()}>\r\n    {name}\r\n    <div className=\"ui right floated\">\r\n      {\r\n        alreadyAddedToSearch ?\r\n          <i className=\"remove red circle icon float right\"></i>\r\n        :\r\n          <i className=\"add green circle icon float right\"></i>\r\n      }\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default LeagueCategory;\r\n"
  },
  {
    "__docId__": 128,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "LeagueItem",
    "memberof": "src/client/search/categories/LeagueCategory.js",
    "longname": "src/client/search/categories/LeagueCategory.js~LeagueItem",
    "access": null,
    "export": false,
    "importPath": "solid-octo-disco/src/client/search/categories/LeagueCategory.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 84,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 129,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "LeagueCategory",
    "memberof": "src/client/search/categories/LeagueCategory.js",
    "longname": "src/client/search/categories/LeagueCategory.js~LeagueCategory",
    "access": null,
    "export": true,
    "importPath": "solid-octo-disco/src/client/search/categories/LeagueCategory.js",
    "importStyle": "LeagueCategory",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "interface": false,
    "extends": [
      "react~Component"
    ]
  },
  {
    "__docId__": 130,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "componentDidMount",
    "memberof": "src/client/search/categories/LeagueCategory.js~LeagueCategory",
    "longname": "src/client/search/categories/LeagueCategory.js~LeagueCategory#componentDidMount",
    "access": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 131,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "render",
    "memberof": "src/client/search/categories/LeagueCategory.js~LeagueCategory",
    "longname": "src/client/search/categories/LeagueCategory.js~LeagueCategory#render",
    "access": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 132,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/client/search/categories/PlayerCategory.js",
    "memberof": null,
    "longname": "src/client/search/categories/PlayerCategory.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import React, { Component } from 'react';\r\nimport { getSemanticCountryFlagName } from './../../../shared/utilities';\r\n\r\nclass PlayerCategory extends Component {\r\n  componentDidMount() {\r\n    $('.ui.dropdown.players').dropdown({\r\n      action: 'nothing',\r\n    });\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    if (prevProps.teamPlayers !== this.props.teamPlayers) {\r\n      if ($('.ui.dropdown.players').dropdown('is hidden')) {\r\n        $('.ui.dropdown.players').dropdown('show');\r\n      }\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"ui labeled\">\r\n        <div className=\"ui dropdown labeled icon button players category\">\r\n          <span className=\"text\">\r\n            <img className=\"ui small image\" src={this.props.teamCrestUrl} />\r\n            {this.props.teamName} Players\r\n          </span>\r\n          {\r\n            this.props.isTeamPlayersFetching ?\r\n              <i className=\"icon\">\r\n                <div className=\"ui active inline loader\"></div>\r\n              </i>\r\n            :\r\n              <i className=\"soccer purple icon\"></i>\r\n          }\r\n          <div className=\"menu\">\r\n            <div className=\"ui icon search input\">\r\n              <i className=\"search icon\"></i>\r\n              <input type=\"text\" placeholder=\"Search players...\" />\r\n            </div>\r\n            {this.props.teamPlayers.map(player => {\r\n              const searchesQueriesSameAsPlayer = this.props.currentSearchTerms\r\n              .filter((searchTerm) => searchTerm.query === player.name);\r\n              const playerAlreadyAddedToSearch = searchesQueriesSameAsPlayer.length > 0;\r\n\r\n              return (\r\n                <TeamPlayer key={`player${player.id}`} name={player.name}\r\n                  alreadyAddedToSearch={playerAlreadyAddedToSearch}\r\n                  nationality={player.nationality.toLowerCase()}\r\n                  onClick={() => {\r\n                    if (playerAlreadyAddedToSearch) {\r\n                      searchesQueriesSameAsPlayer.forEach(\r\n                      search => this.props.onClickRemovePlayer(search.id)\r\n                      );\r\n                    } else {\r\n                      this.props.onClickAddPlayer(player.name);\r\n                    }\r\n                  }}\r\n                />\r\n              );\r\n            }\r\n            )}\r\n          </div>\r\n        </div>\r\n        { !this.props.isTeamPlayersFetching &&\r\n          <div className=\"ui purple left pointing label\">\r\n            {this.props.teamPlayers.length}\r\n          </div>\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n}\r\nPlayerCategory.propTypes = {\r\n  teamName: React.PropTypes.string,\r\n  teamCrestUrl: React.PropTypes.string,\r\n  isTeamPlayersFetching: React.PropTypes.boolean,\r\n  teamPlayers: React.PropTypes.array,\r\n  currentSearchTerms: React.PropTypes.array,\r\n  onClickAddPlayer: React.PropTypes.func,\r\n  onClickRemovePlayer: React.PropTypes.func,\r\n};\r\n\r\nconst TeamPlayer = ({ name, nationality, alreadyAddedToSearch, onClick }) => (\r\n  <div className=\"item player\" onClick={() => onClick(name)}>\r\n    <i className={`${getSemanticCountryFlagName(nationality)} flag`} />\r\n    {name}\r\n    <div className=\"ui right floated\">\r\n      {\r\n        alreadyAddedToSearch ?\r\n          <i className=\"remove red circle icon float right\"></i>\r\n        :\r\n          <i className=\"add green circle icon float right\"></i>\r\n      }\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default PlayerCategory;\r\n"
  },
  {
    "__docId__": 133,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "TeamPlayer",
    "memberof": "src/client/search/categories/PlayerCategory.js",
    "longname": "src/client/search/categories/PlayerCategory.js~TeamPlayer",
    "access": null,
    "export": false,
    "importPath": "solid-octo-disco/src/client/search/categories/PlayerCategory.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 83,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 134,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "PlayerCategory",
    "memberof": "src/client/search/categories/PlayerCategory.js",
    "longname": "src/client/search/categories/PlayerCategory.js~PlayerCategory",
    "access": null,
    "export": true,
    "importPath": "solid-octo-disco/src/client/search/categories/PlayerCategory.js",
    "importStyle": "PlayerCategory",
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "interface": false,
    "extends": [
      "react~Component"
    ]
  },
  {
    "__docId__": 135,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "componentDidMount",
    "memberof": "src/client/search/categories/PlayerCategory.js~PlayerCategory",
    "longname": "src/client/search/categories/PlayerCategory.js~PlayerCategory#componentDidMount",
    "access": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 136,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "componentDidUpdate",
    "memberof": "src/client/search/categories/PlayerCategory.js~PlayerCategory",
    "longname": "src/client/search/categories/PlayerCategory.js~PlayerCategory#componentDidUpdate",
    "access": null,
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "params": [
      {
        "name": "prevProps",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 137,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "render",
    "memberof": "src/client/search/categories/PlayerCategory.js~PlayerCategory",
    "longname": "src/client/search/categories/PlayerCategory.js~PlayerCategory#render",
    "access": null,
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 138,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/client/search/categories/TeamCategory.js",
    "memberof": null,
    "longname": "src/client/search/categories/TeamCategory.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import React, { Component } from 'react';\r\n\r\nclass TeamCategory extends Component {\r\n  componentDidMount() {\r\n    $('.ui.dropdown.teams').dropdown({\r\n      action: 'nothing',\r\n    });\r\n    $('.ui.accordion.teams').accordion();\r\n  }\r\n\r\n  render() {\r\n    let leagueTeams = [];\r\n    let isFetching = false;\r\n    const loaderIcon = <i className=\"purple icon\"><div className=\"ui active inline loader\"></div></i>;\r\n\r\n    // checks if teamsByLeague exist and have been fetched\r\n    if (this.props.teamsByLeague) {\r\n      if (!this.props.teamsByLeague.isFetching) {\r\n        leagueTeams = this.props.teamsByLeague.leagues;\r\n        isFetching = false;\r\n      } else {\r\n        isFetching = true;\r\n      }\r\n    }\r\n\r\n    return (\r\n      <div className=\"large fluid ui dropdown labeled icon button teams category\">\r\n        {isFetching || leagueTeams.length === 0 ? loaderIcon : <i className=\"users purple icon\"></i>}\r\n        <span className=\"text\">Teams...</span>\r\n        <div className=\"menu\">\r\n          <div className=\"ui icon search input\">\r\n            <i className=\"search icon\"></i>\r\n            <input type=\"text\" placeholder=\"Search Teams...\" onChange={(e) => {\r\n              const inputLength = e.target.value.length;\r\n\r\n              // setting very little timeout so that the below happens after\r\n              // the class names have have changed properly\r\n              leagueTeams.forEach((league) => {\r\n                setTimeout(() => {\r\n                  // Assume all leagues don't have teams showing\r\n                  let hasUnfilteredTeams = false;\r\n                  let leaguesShowing = 0;\r\n\r\n                  // For every team in the league with id\r\n                  $(`.league.item[data-id=\"${league.id}\"]`).each((i, team) => {\r\n                    // check if it doesn't have the filtered class\r\n                    if (!$(team).hasClass('filtered')) {\r\n                      // which means that all the teams aren't filtered\r\n                      leaguesShowing++;\r\n                      hasUnfilteredTeams = true;\r\n                    }\r\n                  });\r\n\r\n                  // if the league has showing teams remove the filtered class to hide them\r\n                  // otherwise add a class to hide that league.\r\n                  if (hasUnfilteredTeams) {\r\n                    $(`.league.section[data-id=\"${league.id}\"]`).removeClass('item filtered');\r\n                    const totalLeagues = $(`.league.item[data-id=\"${league.id}\"]`).length;\r\n                    if (inputLength === 0) {\r\n                      $(`.league.count[data-id=\"${league.id}\"]`).text(totalLeagues);\r\n                    } else {\r\n                      $(`.league.count[data-id=\"${league.id}\"]`).text(`${leaguesShowing} / ${totalLeagues}`);\r\n                    }\r\n                  } else {\r\n                    $(`.league.section[data-id=\"${league.id}\"]`).addClass('item filtered');\r\n                  }\r\n                }, 20);\r\n              });\r\n            }} />\r\n          </div>\r\n          <div className=\"ui styled accordion teams\">\r\n            {leagueTeams.map(league => (\r\n              <LeagueTeamsList key={`leagueteams${league.id}`} id={league.id}\r\n                name={league.name.slice(0, league.name.length - 7)}\r\n                teams={league.teams} currentSearchTerms={this.props.currentSearchTerms}\r\n                onClickAddTeam={this.props.onClickAddTeam}\r\n                onClickRemoveTeam={this.props.onClickRemoveTeam}\r\n                onClickSelectTeam={this.props.onClickSelectTeam}\r\n              />\r\n            ))}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nTeamCategory.propTypes = {\r\n  teamsByLeague: React.PropTypes.object,\r\n  currentSearchTerms: React.PropTypes.array,\r\n  onClickAddTeam: React.PropTypes.func,\r\n  onClickRemoveTeam: React.PropTypes.func,\r\n  onClickSelectTeam: React.PropTypes.func,\r\n};\r\n\r\nconst LeagueTeamsList = ({\r\n  id, name, teams, currentSearchTerms, onClickAddTeam, onClickRemoveTeam, onClickSelectTeam,\r\n}) => (\r\n  <div data-id={id} className=\"league section\">\r\n    <div className=\"title\">\r\n      <i className=\"dropdown icon\"></i>\r\n      {name}\r\n      <div className=\"ui purple horizontal basic label\" style={{ float: 'right' }}>\r\n        <span data-id={id} className=\"league count\">{teams.length}</span>\r\n      </div>\r\n    </div>\r\n    <div className=\"content\">\r\n      <div className=\"items\">\r\n        {teams.map(team => {\r\n          const searchesQueriesSameAsTeam = currentSearchTerms\r\n          .filter(\r\n          (searchTerm) => searchTerm.query === team.name || searchTerm.query === team.shortName\r\n          );\r\n          const teamAlreadyAddedToSearch = searchesQueriesSameAsTeam.length > 0;\r\n          return (\r\n            <LeagueTeam key={`league${id}team${team.id}`}\r\n              leagueId={id} name={team.name} crestUrl={team.crestUrl}\r\n              alreadyAddedToSearch={teamAlreadyAddedToSearch}\r\n              onClickTeam={() => {\r\n                if (teamAlreadyAddedToSearch) {\r\n                  searchesQueriesSameAsTeam.forEach(\r\n                    search => onClickRemoveTeam(search.id)\r\n                  );\r\n                } else {\r\n                  onClickAddTeam(`^#${team.name}`);\r\n                  onClickAddTeam(`#${team.shortName}`);\r\n                }\r\n              }}\r\n              onClickSelectTeam={() =>\r\n                onClickSelectTeam(team.id, team.name, team.shortName, team.crestUrl)\r\n              }\r\n            />\r\n          );\r\n        })}\r\n      </div>\r\n    </div>\r\n  </div>\r\n);\r\n\r\nconst LeagueTeam = ({\r\n  leagueId, name, crestUrl, alreadyAddedToSearch, onClickTeam, onClickSelectTeam,\r\n}) => (\r\n  <div\r\n    data-id={leagueId} className=\"league item\"\r\n    style={{ cursor: 'pointer' }}\r\n    onClick={() => onClickTeam()}\r\n  >\r\n    <div className=\"ui three column grid\">\r\n      <div className=\"column\">\r\n        <img className=\"ui avatar image\" src={crestUrl} />\r\n        {name}\r\n      </div>\r\n\r\n      <div className=\"center aligned column\">\r\n        {\r\n          alreadyAddedToSearch ?\r\n            <i className=\"remove red circle icon float right\"></i>\r\n          :\r\n            <i className=\"add green circle icon float right\"></i>\r\n        }\r\n      </div>\r\n\r\n      <div className=\"column\">\r\n        <div className=\"mini ui fluid right floated purple button\"\r\n          onClick={(e) => {\r\n            e.stopPropagation();\r\n            $('.ui.dropdown.teams').dropdown('hide');\r\n            onClickSelectTeam();\r\n          }}\r\n        >\r\n          {name} Players\r\n          <i className=\"right chevron icon\"></i>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default TeamCategory;\r\n"
  },
  {
    "__docId__": 139,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "LeagueTeamsList",
    "memberof": "src/client/search/categories/TeamCategory.js",
    "longname": "src/client/search/categories/TeamCategory.js~LeagueTeamsList",
    "access": null,
    "export": false,
    "importPath": "solid-octo-disco/src/client/search/categories/TeamCategory.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 95,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 140,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "LeagueTeam",
    "memberof": "src/client/search/categories/TeamCategory.js",
    "longname": "src/client/search/categories/TeamCategory.js~LeagueTeam",
    "access": null,
    "export": false,
    "importPath": "solid-octo-disco/src/client/search/categories/TeamCategory.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 139,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 141,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "TeamCategory",
    "memberof": "src/client/search/categories/TeamCategory.js",
    "longname": "src/client/search/categories/TeamCategory.js~TeamCategory",
    "access": null,
    "export": true,
    "importPath": "solid-octo-disco/src/client/search/categories/TeamCategory.js",
    "importStyle": "TeamCategory",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "interface": false,
    "extends": [
      "react~Component"
    ]
  },
  {
    "__docId__": 142,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "componentDidMount",
    "memberof": "src/client/search/categories/TeamCategory.js~TeamCategory",
    "longname": "src/client/search/categories/TeamCategory.js~TeamCategory#componentDidMount",
    "access": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 143,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "render",
    "memberof": "src/client/search/categories/TeamCategory.js~TeamCategory",
    "longname": "src/client/search/categories/TeamCategory.js~TeamCategory#render",
    "access": null,
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 144,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/client/search/categories/YearSelector.js",
    "memberof": null,
    "longname": "src/client/search/categories/YearSelector.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import React, { Component } from 'react';\r\nimport { EARLIEST_YEAR_AVAILABLE_FROM_FOOTBALL_API } from './CategoryFilters';\r\n\r\nconst YearSelector = ({ seasonYears, currentYear, onClickToggleDbOnlySearch }) => {\r\n  let seasonYearButtons = [];\r\n  for (let y = currentYear; y >= EARLIEST_YEAR_AVAILABLE_FROM_FOOTBALL_API; y--) {\r\n    let numberOfLeagues = (\r\n        <div className=\"ui active small inline loader\"></div>\r\n    );\r\n\r\n    // When season year's leagues have been retrieved remove loader and show the number of them\r\n    if (seasonYears[y]) {\r\n      if (!seasonYears[y].isFetching) {\r\n        const numberOfLeaguesClassName = 'ui purple horizontal label year league count title';\r\n        const transitionHidden = y === currentYear ? `${numberOfLeaguesClassName} transition hidden` : numberOfLeaguesClassName;\r\n        numberOfLeagues = (\r\n          <div data-id={y} className={transitionHidden}>\r\n            {seasonYears[y].seasons.length}\r\n          </div>);\r\n      }\r\n    }\r\n\r\n    seasonYearButtons = [\r\n      ...seasonYearButtons,\r\n      (\r\n      <a key={`yeartitle${y}`} className={y === currentYear ? 'active item' : 'item'} data-tab={y}>\r\n        {numberOfLeagues}\r\n        {y}/{parseInt(y, 10) + 1}\r\n      </a>\r\n      ),\r\n    ];\r\n  }\r\n\r\n  return (\r\n    <div className=\"ui top attached tabular menu\">\r\n      {seasonYearButtons}\r\n      <div className=\"ui slider cache checkbox\" style={{ float: 'right', marginLeft: 'auto' }}\r\n        onClick={() => onClickToggleDbOnlySearch()}\r\n      >\r\n        <input type=\"checkbox\" tabIndex=\"0\" />\r\n        <label>Search DB Cache Only</label>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default YearSelector;\r\n"
  },
  {
    "__docId__": 145,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "YearSelector",
    "memberof": "src/client/search/categories/YearSelector.js",
    "longname": "src/client/search/categories/YearSelector.js~YearSelector",
    "access": null,
    "export": true,
    "importPath": "solid-octo-disco/src/client/search/categories/YearSelector.js",
    "importStyle": "YearSelector",
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 146,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/client/search/CurrentQueryTerms.js",
    "memberof": null,
    "longname": "src/client/search/CurrentQueryTerms.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import React, { Component } from 'react';\r\nimport SearchTermsList from './SearchTermsList';\r\nimport AddSearchTerm from './AddSearchTerm';\r\n\r\nconst CurrentQueryTerms = () => {\r\n  const showAddSearchTerm = () => {\r\n    // searchTermContainer and addSearchTerm are in ./AddSearchTerm\r\n    // bad practise, should use react refs but using html id for simplicity\r\n    if ($('#searchTermContainer').is(':hidden')) {\r\n      $('#searchTermContainer').slideDown('fast', () => {\r\n        $('#addSearchTerm').focus();\r\n      });\r\n    } else {\r\n      $('#addSearchTerm').popup('hide');\r\n      $('#addSearchTerm').popup('destroy');\r\n      $('#searchTermContainer').slideUp('fast');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"ui raised segment\">\r\n      <div style={{ cursor: 'text' }}>\r\n        <SearchTermsList showSearchTerm={showAddSearchTerm} />\r\n        <AddSearchTerm />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CurrentQueryTerms;\r\n"
  },
  {
    "__docId__": 147,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "CurrentQueryTerms",
    "memberof": "src/client/search/CurrentQueryTerms.js",
    "longname": "src/client/search/CurrentQueryTerms.js~CurrentQueryTerms",
    "access": null,
    "export": true,
    "importPath": "solid-octo-disco/src/client/search/CurrentQueryTerms.js",
    "importStyle": "CurrentQueryTerms",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 148,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/client/search/Search.js",
    "memberof": null,
    "longname": "src/client/search/Search.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import React, { Component } from 'react';\r\nimport CurrentQueryTerms from './CurrentQueryTerms';\r\nimport CategoryFilters from './categories/CategoryFilters';\r\n\r\n/**\r\n * Search encompasses the entire search interface, including the \"Filters\"\r\n * that allow a user to easily select pre-populated football team data.\r\n * Again, follow CurrentQueryTerms to './CurrentQueryTerms.js' for a deeper\r\n * breakdown of the interface.\r\n */\r\nconst Search = () => (\r\n  <div className=\"row\">\r\n    <div className=\"ui container\">\r\n      <CurrentQueryTerms />\r\n      <CategoryFilters />\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default Search;\r\n"
  },
  {
    "__docId__": 149,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "Search",
    "memberof": "src/client/search/Search.js",
    "longname": "src/client/search/Search.js~Search",
    "access": null,
    "export": true,
    "importPath": "solid-octo-disco/src/client/search/Search.js",
    "importStyle": "Search",
    "description": "Search encompasses the entire search interface, including the \"Filters\"\nthat allow a user to easily select pre-populated football team data.\nAgain, follow CurrentQueryTerms to './CurrentQueryTerms.js' for a deeper\nbreakdown of the interface.",
    "lineNumber": 11,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 150,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/client/search/searchActions.js",
    "memberof": null,
    "longname": "src/client/search/searchActions.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import { fetchPost, newPromiseChain } from '../../shared/utilities';\r\nimport { doesFeedHaveUsefulResults } from '../tweetAnalysis';\r\nimport { resetMostFrequent } from './../results/mostfrequent/mostFrequentActions';\r\n\r\nlet nextSearchTermId = 0;\r\nlet lastSearchRequestId = 0;\r\n\r\nexport const ADD_SEARCH_TERM = 'ADD_SEARCH_TERM';\r\nexport const addSearchTerm = (query) => {\r\n  const searchQuery = {\r\n    type: ADD_SEARCH_TERM,\r\n    id: nextSearchTermId++,\r\n    source: 'twitter',\r\n  };\r\n\r\n  switch (query.charAt(0)) {\r\n  case '#':\r\n    return addQueryParamTypes(searchQuery, query.substring(1), ['hashtag']);\r\n  case '*':\r\n    return addQueryParamTypes(searchQuery, query.substring(1), ['keyword']);\r\n  case '@':\r\n    return addQueryParamTypes(searchQuery, query.substring(1), ['author', 'mention']);\r\n  case '^':\r\n    switch (query.charAt(1)) {\r\n    case '#':\r\n      return addQueryParamTypes(searchQuery, query.substring(2), ['author', 'keyword', 'mention']);\r\n    case '*':\r\n      return addQueryParamTypes(searchQuery, query.substring(2), ['author', 'hashtag', 'mention']);\r\n    case '@':\r\n      return addQueryParamTypes(searchQuery, query.substring(2), ['hashtag', 'keyword']);\r\n    default:\r\n      return addQueryParamTypes(searchQuery, query.substring(1), ['author', 'hashtag', 'keyword', 'mention']);\r\n    }\r\n  default:\r\n    return addQueryParamTypes(searchQuery, query, ['author', 'hashtag', 'keyword', 'mention']);\r\n  }\r\n};\r\n\r\nconst addQueryParamTypes = (searchQuery, query, paramTypes) => ({\r\n  ...searchQuery,\r\n  query,\r\n  paramTypes,\r\n});\r\n\r\nexport const INVALIDATE_FEED_RESULTS = 'INVALIDATE_FEED_RESULTS';\r\nexport const invalidateFeedResults = () => {\r\n  const newSearchRequestId = lastSearchRequestId++;\r\n  return (dispatch, getState) => {\r\n    dispatch({ type: INVALIDATE_FEED_RESULTS, requestId: newSearchRequestId });\r\n    dispatch(searchApiForFeed(getState().searchTerms, getState().searchOnlyDB, newSearchRequestId));\r\n  };\r\n};\r\n\r\nconst searchApiForFeed = (searchTerms, onlySearchDBCache, requestId) =>\r\n    (dispatch) => (\r\n    newPromiseChain()\r\n      .then(() => NProgress.start())\r\n      .then(() => searchDatabaseAsCache(dispatch, searchTerms, requestId))\r\n      .then(feedResults => {\r\n        if (!onlySearchDBCache) {\r\n          return searchTwitterIfResultsArentGoodEnough(dispatch, searchTerms, requestId, feedResults);\r\n        }\r\n      })\r\n      .then(() => NProgress.done())\r\n);\r\n\r\nconst searchTwitterIfResultsArentGoodEnough = (dispatch, searchTerms, requestId, feedResults) => {\r\n  if (!doesFeedHaveUsefulResults(feedResults)) {\r\n    return searchDatabaseAndTwitter(dispatch, searchTerms, requestId);\r\n  } else {\r\n    return Promise.resolve();\r\n  }\r\n};\r\n\r\nconst searchDatabaseAndTwitter = (dispatch, searchTerms, requestId) =>\r\n  searchDatabase(dispatch, searchTerms, requestId, true);\r\nconst searchDatabaseAsCache = (dispatch, searchTerms, requestId) =>\r\n  searchDatabase(dispatch, searchTerms, requestId, false);\r\n\r\nconst searchDatabase = (dispatch, searchTerms, requestId, searchTwitter) =>\r\n  newPromiseChain()\r\n  .then(() => dispatch(resetMostFrequent()))\r\n  .then(() => fetchPost('/search', { searchTerms, searchTwitter }))\r\n  .then(response => response.json())\r\n  .then(feedResults => {\r\n    if (searchTwitter) {\r\n      dispatch(receiveFeedResults(feedResults, requestId, true));\r\n    }\r\n    dispatch(receiveFeedResults(feedResults, requestId, false));\r\n    return feedResults;\r\n  });\r\n\r\nexport const RECEIVE_FEED_RESULTS = 'RECEIVE_FEED_RESULTS';\r\nconst receiveFeedResults = (data, requestId, recievedFromTwitter) => ({\r\n  type: RECEIVE_FEED_RESULTS,\r\n  data,\r\n  requestId,\r\n  fetchedRequestFromTwitter: recievedFromTwitter,\r\n});\r\n\r\nexport const DELETE_SEARCH_TERM = 'DELETE_SEARCH_TERM';\r\nexport const deleteSearchTerm = (id) => ({\r\n  type: DELETE_SEARCH_TERM,\r\n  id,\r\n});\r\n\r\nexport const TOGGLE_SEARCH_TERM_PARAMTYPE_SELECTION = 'TOGGLE_SEARCH_TERM_PARAMTYPE_SELECTION';\r\nexport const toggleSearchTermParamTypeSelection = (id, paramTypeName) => ({\r\n  type: TOGGLE_SEARCH_TERM_PARAMTYPE_SELECTION,\r\n  id,\r\n  paramTypeName,\r\n});\r\n\r\nexport const SET_FEED_PAGE_NUMBER = 'SET_FEED_PAGE_NUMBER';\r\nexport const setFeedPageNumber = (number) => ({\r\n  type: SET_FEED_PAGE_NUMBER,\r\n  number,\r\n});\r\n\r\nexport const SET_FEED_PAGE_LIMIT = 'SET_FEED_PAGE_LIMIT';\r\nexport const setFeedPageLimit = (limit) => ({\r\n  type: SET_FEED_PAGE_LIMIT,\r\n  limit,\r\n});\r\n\r\nexport const TOGGLE_SEARCH_ONLY_DB = 'TOGGLE_SEARCH_ONLY_DB';\r\nexport const toggleSearchOnlyDb = () => ({\r\n  type: TOGGLE_SEARCH_ONLY_DB,\r\n});\r\n"
  },
  {
    "__docId__": 151,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "nextSearchTermId",
    "memberof": "src/client/search/searchActions.js",
    "longname": "src/client/search/searchActions.js~nextSearchTermId",
    "access": null,
    "export": false,
    "importPath": "solid-octo-disco/src/client/search/searchActions.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 152,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "lastSearchRequestId",
    "memberof": "src/client/search/searchActions.js",
    "longname": "src/client/search/searchActions.js~lastSearchRequestId",
    "access": null,
    "export": false,
    "importPath": "solid-octo-disco/src/client/search/searchActions.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 153,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "ADD_SEARCH_TERM",
    "memberof": "src/client/search/searchActions.js",
    "longname": "src/client/search/searchActions.js~ADD_SEARCH_TERM",
    "access": null,
    "export": true,
    "importPath": "solid-octo-disco/src/client/search/searchActions.js",
    "importStyle": "{ADD_SEARCH_TERM}",
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 154,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "addSearchTerm",
    "memberof": "src/client/search/searchActions.js",
    "longname": "src/client/search/searchActions.js~addSearchTerm",
    "access": null,
    "export": true,
    "importPath": "solid-octo-disco/src/client/search/searchActions.js",
    "importStyle": "{addSearchTerm}",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 155,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "addQueryParamTypes",
    "memberof": "src/client/search/searchActions.js",
    "longname": "src/client/search/searchActions.js~addQueryParamTypes",
    "access": null,
    "export": false,
    "importPath": "solid-octo-disco/src/client/search/searchActions.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 39,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 156,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "INVALIDATE_FEED_RESULTS",
    "memberof": "src/client/search/searchActions.js",
    "longname": "src/client/search/searchActions.js~INVALIDATE_FEED_RESULTS",
    "access": null,
    "export": true,
    "importPath": "solid-octo-disco/src/client/search/searchActions.js",
    "importStyle": "{INVALIDATE_FEED_RESULTS}",
    "description": null,
    "lineNumber": 45,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 157,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "invalidateFeedResults",
    "memberof": "src/client/search/searchActions.js",
    "longname": "src/client/search/searchActions.js~invalidateFeedResults",
    "access": null,
    "export": true,
    "importPath": "solid-octo-disco/src/client/search/searchActions.js",
    "importStyle": "{invalidateFeedResults}",
    "description": null,
    "lineNumber": 46,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 158,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "searchApiForFeed",
    "memberof": "src/client/search/searchActions.js",
    "longname": "src/client/search/searchActions.js~searchApiForFeed",
    "access": null,
    "export": false,
    "importPath": "solid-octo-disco/src/client/search/searchActions.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 54,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 159,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "searchTwitterIfResultsArentGoodEnough",
    "memberof": "src/client/search/searchActions.js",
    "longname": "src/client/search/searchActions.js~searchTwitterIfResultsArentGoodEnough",
    "access": null,
    "export": false,
    "importPath": "solid-octo-disco/src/client/search/searchActions.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 67,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 160,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "searchDatabaseAndTwitter",
    "memberof": "src/client/search/searchActions.js",
    "longname": "src/client/search/searchActions.js~searchDatabaseAndTwitter",
    "access": null,
    "export": false,
    "importPath": "solid-octo-disco/src/client/search/searchActions.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 75,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 161,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "searchDatabaseAsCache",
    "memberof": "src/client/search/searchActions.js",
    "longname": "src/client/search/searchActions.js~searchDatabaseAsCache",
    "access": null,
    "export": false,
    "importPath": "solid-octo-disco/src/client/search/searchActions.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 77,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 162,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "searchDatabase",
    "memberof": "src/client/search/searchActions.js",
    "longname": "src/client/search/searchActions.js~searchDatabase",
    "access": null,
    "export": false,
    "importPath": "solid-octo-disco/src/client/search/searchActions.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 80,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 163,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "RECEIVE_FEED_RESULTS",
    "memberof": "src/client/search/searchActions.js",
    "longname": "src/client/search/searchActions.js~RECEIVE_FEED_RESULTS",
    "access": null,
    "export": true,
    "importPath": "solid-octo-disco/src/client/search/searchActions.js",
    "importStyle": "{RECEIVE_FEED_RESULTS}",
    "description": null,
    "lineNumber": 93,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 164,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "receiveFeedResults",
    "memberof": "src/client/search/searchActions.js",
    "longname": "src/client/search/searchActions.js~receiveFeedResults",
    "access": null,
    "export": false,
    "importPath": "solid-octo-disco/src/client/search/searchActions.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 94,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 165,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "DELETE_SEARCH_TERM",
    "memberof": "src/client/search/searchActions.js",
    "longname": "src/client/search/searchActions.js~DELETE_SEARCH_TERM",
    "access": null,
    "export": true,
    "importPath": "solid-octo-disco/src/client/search/searchActions.js",
    "importStyle": "{DELETE_SEARCH_TERM}",
    "description": null,
    "lineNumber": 101,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 166,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "deleteSearchTerm",
    "memberof": "src/client/search/searchActions.js",
    "longname": "src/client/search/searchActions.js~deleteSearchTerm",
    "access": null,
    "export": true,
    "importPath": "solid-octo-disco/src/client/search/searchActions.js",
    "importStyle": "{deleteSearchTerm}",
    "description": null,
    "lineNumber": 102,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 167,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "TOGGLE_SEARCH_TERM_PARAMTYPE_SELECTION",
    "memberof": "src/client/search/searchActions.js",
    "longname": "src/client/search/searchActions.js~TOGGLE_SEARCH_TERM_PARAMTYPE_SELECTION",
    "access": null,
    "export": true,
    "importPath": "solid-octo-disco/src/client/search/searchActions.js",
    "importStyle": "{TOGGLE_SEARCH_TERM_PARAMTYPE_SELECTION}",
    "description": null,
    "lineNumber": 107,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 168,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "toggleSearchTermParamTypeSelection",
    "memberof": "src/client/search/searchActions.js",
    "longname": "src/client/search/searchActions.js~toggleSearchTermParamTypeSelection",
    "access": null,
    "export": true,
    "importPath": "solid-octo-disco/src/client/search/searchActions.js",
    "importStyle": "{toggleSearchTermParamTypeSelection}",
    "description": null,
    "lineNumber": 108,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 169,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "SET_FEED_PAGE_NUMBER",
    "memberof": "src/client/search/searchActions.js",
    "longname": "src/client/search/searchActions.js~SET_FEED_PAGE_NUMBER",
    "access": null,
    "export": true,
    "importPath": "solid-octo-disco/src/client/search/searchActions.js",
    "importStyle": "{SET_FEED_PAGE_NUMBER}",
    "description": null,
    "lineNumber": 114,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 170,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "setFeedPageNumber",
    "memberof": "src/client/search/searchActions.js",
    "longname": "src/client/search/searchActions.js~setFeedPageNumber",
    "access": null,
    "export": true,
    "importPath": "solid-octo-disco/src/client/search/searchActions.js",
    "importStyle": "{setFeedPageNumber}",
    "description": null,
    "lineNumber": 115,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 171,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "SET_FEED_PAGE_LIMIT",
    "memberof": "src/client/search/searchActions.js",
    "longname": "src/client/search/searchActions.js~SET_FEED_PAGE_LIMIT",
    "access": null,
    "export": true,
    "importPath": "solid-octo-disco/src/client/search/searchActions.js",
    "importStyle": "{SET_FEED_PAGE_LIMIT}",
    "description": null,
    "lineNumber": 120,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 172,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "setFeedPageLimit",
    "memberof": "src/client/search/searchActions.js",
    "longname": "src/client/search/searchActions.js~setFeedPageLimit",
    "access": null,
    "export": true,
    "importPath": "solid-octo-disco/src/client/search/searchActions.js",
    "importStyle": "{setFeedPageLimit}",
    "description": null,
    "lineNumber": 121,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 173,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "TOGGLE_SEARCH_ONLY_DB",
    "memberof": "src/client/search/searchActions.js",
    "longname": "src/client/search/searchActions.js~TOGGLE_SEARCH_ONLY_DB",
    "access": null,
    "export": true,
    "importPath": "solid-octo-disco/src/client/search/searchActions.js",
    "importStyle": "{TOGGLE_SEARCH_ONLY_DB}",
    "description": null,
    "lineNumber": 126,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 174,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "toggleSearchOnlyDb",
    "memberof": "src/client/search/searchActions.js",
    "longname": "src/client/search/searchActions.js~toggleSearchOnlyDb",
    "access": null,
    "export": true,
    "importPath": "solid-octo-disco/src/client/search/searchActions.js",
    "importStyle": "{toggleSearchOnlyDb}",
    "description": null,
    "lineNumber": 127,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 175,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/client/search/searchActions.spec.js",
    "memberof": null,
    "longname": "src/client/search/searchActions.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import { should } from 'chai';\r\nimport * as actions from './searchActions';\r\n\r\ndescribe('#SearchActions', () => {\r\n  let searchTermId = 0;\r\n\r\n  it('should create an action to add a hashtag', () => {\r\n    const query = '#Footy';\r\n\r\n    const expectedQuery = 'Footy';\r\n    const expectedAction = {\r\n      type: 'ADD_SEARCH_TERM',\r\n      id: searchTermId++,\r\n      query: expectedQuery,\r\n      paramTypes: ['hashtag'],\r\n      source: 'twitter',\r\n    };\r\n\r\n    actions.addSearchTerm(query).should.deep.equal(expectedAction);\r\n  });\r\n\r\n  it('should create an action to add just a keyword', () => {\r\n    const query = '*Footy';\r\n\r\n    const expectedQuery = 'Footy';\r\n    const expectedAction = {\r\n      type: 'ADD_SEARCH_TERM',\r\n      id: searchTermId++,\r\n      query: expectedQuery,\r\n      paramTypes: ['keyword'],\r\n      source: 'twitter',\r\n    };\r\n\r\n    actions.addSearchTerm(query).should.deep.equal(expectedAction);\r\n  });\r\n\r\n  it('should create an action to add an author and mention', () => {\r\n    const query = '@Manchester';\r\n\r\n    const expectedQuery = 'Manchester';\r\n    const expectedAction = {\r\n      type: 'ADD_SEARCH_TERM',\r\n      id: searchTermId++,\r\n      query: expectedQuery,\r\n      paramTypes: ['author', 'mention'],\r\n      source: 'twitter',\r\n    };\r\n\r\n    actions.addSearchTerm(query).should.deep.equal(expectedAction);\r\n  });\r\n\r\n  it('should create an action to add everything apart from a hashtag', () => {\r\n    const query = '^#Footy';\r\n\r\n    const expectedQuery = 'Footy';\r\n    const expectedAction = {\r\n      type: 'ADD_SEARCH_TERM',\r\n      id: searchTermId++,\r\n      query: expectedQuery,\r\n      paramTypes: ['author', 'keyword', 'mention'],\r\n      source: 'twitter',\r\n    };\r\n\r\n    actions.addSearchTerm(query).should.deep.equal(expectedAction);\r\n  });\r\n\r\n  it('should create an action to add everything apart from a keyword', () => {\r\n    const query = '^*Footy';\r\n\r\n    const expectedQuery = 'Footy';\r\n    const expectedAction = {\r\n      type: 'ADD_SEARCH_TERM',\r\n      id: searchTermId++,\r\n      query: expectedQuery,\r\n      paramTypes: ['author', 'hashtag', 'mention'],\r\n      source: 'twitter',\r\n    };\r\n\r\n    actions.addSearchTerm(query).should.deep.equal(expectedAction);\r\n  });\r\n\r\n  it('should create an action to add everything apart from author and mention', () => {\r\n    const query = '^@Footy';\r\n\r\n    const expectedQuery = 'Footy';\r\n    const expectedAction = {\r\n      type: 'ADD_SEARCH_TERM',\r\n      id: searchTermId++,\r\n      query: expectedQuery,\r\n      paramTypes: ['hashtag', 'keyword'],\r\n      source: 'twitter',\r\n    };\r\n\r\n    actions.addSearchTerm(query).should.deep.equal(expectedAction);\r\n  });\r\n\r\n  it('should create an action to add a default search term if ^ without a symbol afterwards', () => {\r\n    const query = '^Footy';\r\n\r\n    const expectedQuery = 'Footy';\r\n    const expectedAction = {\r\n      type: 'ADD_SEARCH_TERM',\r\n      id: searchTermId++,\r\n      query: expectedQuery,\r\n      paramTypes: ['author', 'hashtag', 'keyword', 'mention'],\r\n      source: 'twitter',\r\n    };\r\n\r\n    actions.addSearchTerm(query).should.deep.equal(expectedAction);\r\n  });\r\n\r\n  it('should create an action to add a default search term', () => {\r\n    const query = 'Winning';\r\n\r\n    const expectedQuery = 'Winning';\r\n    const expectedAction = {\r\n      type: 'ADD_SEARCH_TERM',\r\n      id: searchTermId++,\r\n      query: expectedQuery,\r\n      paramTypes: ['author', 'hashtag', 'keyword', 'mention'],\r\n      source: 'twitter',\r\n    };\r\n\r\n    actions.addSearchTerm(query).should.deep.equal(expectedAction);\r\n  });\r\n\r\n  it('should create an action to delete search term with id', () => {\r\n    const id = 1;\r\n\r\n    const expectedAction = {\r\n      type: actions.DELETE_SEARCH_TERM,\r\n      id,\r\n    };\r\n\r\n    actions.deleteSearchTerm(id).should.deep.equal(expectedAction);\r\n  });\r\n\r\n  it('should create an action to toggle a search term with id paramtype selection', () => {\r\n    const id = 1;\r\n    const paramTypeName = 'author';\r\n\r\n    const expectedAction = {\r\n      type: actions.TOGGLE_SEARCH_TERM_PARAMTYPE_SELECTION,\r\n      id,\r\n      paramTypeName,\r\n    };\r\n\r\n    actions.toggleSearchTermParamTypeSelection(id, paramTypeName)\r\n      .should.deep.equal(expectedAction);\r\n  });\r\n});\r\n"
  },
  {
    "__docId__": 176,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/client/search/searchReducer.js",
    "memberof": null,
    "longname": "src/client/search/searchReducer.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import moment from 'moment';\r\nimport {\r\n  ADD_SEARCH_TERM, TOGGLE_SEARCH_TERM_PARAMTYPE_SELECTION, DELETE_SEARCH_TERM,\r\n  RECEIVE_FEED_RESULTS, SET_FEED_PAGE_NUMBER, SET_FEED_PAGE_LIMIT, TOGGLE_SEARCH_ONLY_DB,\r\n  INVALIDATE_FEED_RESULTS\r\n} from './searchActions';\r\nimport { createTwitterParamTypes, toggleParamType } from '../../shared/utilities';\r\nimport { groupedCountWords, mostFrequentWords, mostFrequentUsers } from './../tweetAnalysis';\r\n\r\nexport const searchTermsReducer = (state = [], action) => {\r\n  switch (action.type) {\r\n  case ADD_SEARCH_TERM:\r\n    return [\r\n      ...state,\r\n      searchTermReducer(undefined, action),\r\n    ];\r\n  case TOGGLE_SEARCH_TERM_PARAMTYPE_SELECTION:\r\n    return state.map(searchTerm => searchTermReducer(searchTerm, action));\r\n  case DELETE_SEARCH_TERM: {\r\n    if (state.length === 1) return [];\r\n\r\n    const termIndex = state.map(term => (term.id)).indexOf(action.id);\r\n    return [\r\n      ...state.slice(0, termIndex),\r\n      ...state.slice(termIndex + 1),\r\n    ];\r\n  }\r\n  default:\r\n    return state;\r\n  }\r\n};\r\n\r\nconst searchTermReducer = (state, action) => {\r\n  switch (action.type) {\r\n  case ADD_SEARCH_TERM:\r\n    return {\r\n      id: action.id,\r\n      query: action.query,\r\n      paramTypes: createTwitterParamTypes(action.paramTypes),\r\n      source: action.source,\r\n    };\r\n  case TOGGLE_SEARCH_TERM_PARAMTYPE_SELECTION: {\r\n    if (state.id !== action.id) {\r\n      return state;\r\n    }\r\n\r\n    return {\r\n      ...state,\r\n      paramTypes: toggleParamType(state.paramTypes, action.paramTypeName),\r\n    };\r\n  }\r\n\r\n  default:\r\n    return state;\r\n  }\r\n};\r\n\r\nexport const searchOnlyDB = (state = false, action) => {\r\n  switch (action.type) {\r\n  case TOGGLE_SEARCH_ONLY_DB:\r\n    return !state;\r\n  default:\r\n    return state;\r\n  }\r\n};\r\n\r\nconst feedReducerInitialState = {\r\n  posts: [],\r\n  paginationInfo: {\r\n    number: 1,\r\n    limit: 10,\r\n  },\r\n  groupedMostFrequentWords: [],\r\n  mostFrequentUsers: [],\r\n  fetchingRequestFromDB: false,\r\n  lastRequestId: 0,\r\n};\r\n\r\nexport const feedReducer = (state = feedReducerInitialState, action) => {\r\n  switch (action.type) {\r\n    case INVALIDATE_FEED_RESULTS:\r\n      return {\r\n        ...state,\r\n        lastRequestId: action.requestId,\r\n        fetchingRequestFromDB: true,\r\n      };\r\n    case RECEIVE_FEED_RESULTS:\r\n      if (state.lastRequestId > action.requestId) {\r\n        // Response is from an old request, ignore it\r\n        return state;\r\n      } else {\r\n        // Response is from the most recent request, actually show the posts\r\n        return {\r\n          ...state,\r\n          posts: sortPostsForFeed(action.data.data.records),\r\n          groupedMostFrequentWords: groupedCountWords(mostFrequentWords(action.data.data.records.map((post) => post.data.content))),\r\n          mostFrequentUsers: mostFrequentUsers(action.data.data.records),\r\n          fetchingRequestFromDB: action.fetchedRequestFromTwitter,\r\n        };\r\n      }\r\n    case SET_FEED_PAGE_NUMBER:\r\n      return { ...state, paginationInfo: { ...state.paginationInfo, number: action.number } };\r\n    case SET_FEED_PAGE_LIMIT:\r\n      return { ...state, paginationInfo: { ...state.paginationInfo, limit: action.limit } };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst sortPostsForFeed = (feed) => (\r\n  [...feed].sort(\r\n    (post1, post2) => (\r\n      moment(post2.data.date).diff(moment(post1.data.date))\r\n    )\r\n  )\r\n);\r\n"
  },
  {
    "__docId__": 177,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "searchTermsReducer",
    "memberof": "src/client/search/searchReducer.js",
    "longname": "src/client/search/searchReducer.js~searchTermsReducer",
    "access": null,
    "export": true,
    "importPath": "solid-octo-disco/src/client/search/searchReducer.js",
    "importStyle": "{searchTermsReducer}",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 178,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "searchTermReducer",
    "memberof": "src/client/search/searchReducer.js",
    "longname": "src/client/search/searchReducer.js~searchTermReducer",
    "access": null,
    "export": false,
    "importPath": "solid-octo-disco/src/client/search/searchReducer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 179,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "searchOnlyDB",
    "memberof": "src/client/search/searchReducer.js",
    "longname": "src/client/search/searchReducer.js~searchOnlyDB",
    "access": null,
    "export": true,
    "importPath": "solid-octo-disco/src/client/search/searchReducer.js",
    "importStyle": "{searchOnlyDB}",
    "description": null,
    "lineNumber": 58,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 180,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "feedReducerInitialState",
    "memberof": "src/client/search/searchReducer.js",
    "longname": "src/client/search/searchReducer.js~feedReducerInitialState",
    "access": null,
    "export": false,
    "importPath": "solid-octo-disco/src/client/search/searchReducer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 67,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 181,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "feedReducer",
    "memberof": "src/client/search/searchReducer.js",
    "longname": "src/client/search/searchReducer.js~feedReducer",
    "access": null,
    "export": true,
    "importPath": "solid-octo-disco/src/client/search/searchReducer.js",
    "importStyle": "{feedReducer}",
    "description": null,
    "lineNumber": 79,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 182,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "sortPostsForFeed",
    "memberof": "src/client/search/searchReducer.js",
    "longname": "src/client/search/searchReducer.js~sortPostsForFeed",
    "access": null,
    "export": false,
    "importPath": "solid-octo-disco/src/client/search/searchReducer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 110,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 183,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/client/search/searchReducer.spec.js",
    "memberof": null,
    "longname": "src/client/search/searchReducer.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import { should } from 'chai';\r\nimport deepFreeze from 'deep-freeze';\r\nimport { searchTermsReducer, feedReducer } from './searchReducer';\r\nimport * as actions from './searchActions';\r\nimport { createTwitterParamTypes } from '../../shared/utilities';\r\nimport { groupedCountWords, mostFrequentWords, mostFrequentUsers } from './../tweetAnalysis';\r\n\r\ndescribe('#SearchTermsReducer', () => {\r\n  it('should add a hashtag search term', () => {\r\n    const stateBefore = [];\r\n    const action = actions.addSearchTerm('#Football');\r\n\r\n    const stateAfter = [{\r\n      id: action.id,\r\n      query: 'Football',\r\n      paramTypes: createTwitterParamTypes(['hashtag']),\r\n      source: 'twitter',\r\n    }, ];\r\n\r\n    deepFreeze(stateBefore);\r\n    deepFreeze(action);\r\n\r\n    searchTermsReducer(stateBefore, action).should.deep.equal(stateAfter);\r\n  });\r\n\r\n  it('should add a new query to existing queries', () => {\r\n    const stateBefore = [{\r\n      id: 0,\r\n      query: 'Football',\r\n      paramTypes: createTwitterParamTypes(['mention']),\r\n      source: 'twitter',\r\n    }, ];\r\n    const action = actions.addSearchTerm('@Manchester');\r\n\r\n    const stateAfter = [\r\n      ...stateBefore,\r\n      {\r\n        id: 9,\r\n        query: 'Manchester',\r\n        paramTypes: createTwitterParamTypes(['mention', 'author']),\r\n        source: 'twitter',\r\n      }, ];\r\n\r\n    deepFreeze(stateBefore);\r\n    deepFreeze(action);\r\n\r\n    searchTermsReducer(stateBefore, action).should.deep.equal(stateAfter);\r\n  });\r\n\r\n  it('should return empty search terms when deleting search terms with single term', () => {\r\n    const stateBefore = [{\r\n      id: 0,\r\n      query: 'Football',\r\n      paramTypes: createTwitterParamTypes(['mention']),\r\n      source: 'twitter',\r\n    }, ];\r\n    const action = actions.deleteSearchTerm(0);\r\n\r\n    const stateAfter = [];\r\n\r\n    deepFreeze(stateBefore);\r\n    deepFreeze(action);\r\n\r\n    searchTermsReducer(stateBefore, action).should.deep.equal(stateAfter);\r\n  });\r\n\r\n  it('should delete term with id', () => {\r\n    const stateBefore = [{\r\n      id: 0,\r\n      query: 'Football',\r\n      paramTypes: createTwitterParamTypes(['mention']),\r\n      source: 'twitter',\r\n    }, {\r\n      id: 1,\r\n      query: 'Manchester',\r\n      paramTypes: createTwitterParamTypes(['hashtag', 'author']),\r\n      source: 'twitter',\r\n    }, ];\r\n    const action = actions.deleteSearchTerm(0);\r\n\r\n    const stateAfter = [{\r\n      id: 1,\r\n      query: 'Manchester',\r\n      paramTypes: createTwitterParamTypes(['hashtag', 'author']),\r\n      source: 'twitter',\r\n    }, ];\r\n\r\n    deepFreeze(stateBefore);\r\n    deepFreeze(action);\r\n\r\n    searchTermsReducer(stateBefore, action).should.deep.equal(stateAfter);\r\n  });\r\n\r\n  it('should edit term paramType with id', () => {\r\n    const stateBefore = [{\r\n      id: 0,\r\n      query: 'Football',\r\n      paramTypes: createTwitterParamTypes(['mention']),\r\n      source: 'twitter',\r\n    }, {\r\n      id: 1,\r\n      query: 'Manchester',\r\n      paramTypes: createTwitterParamTypes(['hashtag', 'author']),\r\n      source: 'twitter',\r\n    }, ];\r\n    const action = actions.toggleSearchTermParamTypeSelection(0, 'author');\r\n\r\n    const stateAfter = [{\r\n      id: 0,\r\n      query: 'Football',\r\n      paramTypes: createTwitterParamTypes(['author', 'mention']),\r\n      source: 'twitter',\r\n    }, {\r\n      id: 1,\r\n      query: 'Manchester',\r\n      paramTypes: createTwitterParamTypes(['hashtag', 'author']),\r\n      source: 'twitter',\r\n    }, ];\r\n\r\n    deepFreeze(stateBefore);\r\n    deepFreeze(action);\r\n\r\n    searchTermsReducer(stateBefore, action).should.deep.equal(stateAfter);\r\n  });\r\n});\r\n\r\ndescribe('#FeedReducer', () => {\r\n  it('can receive new feed results, and will group and sort them', () => {\r\n    const stateBefore = {};\r\n\r\n    const records = [\r\n      { data:{ content:'some record', date: '2016-04-06' }, author:{ id: '1' } },\r\n      { data:{ content:'another', date: '2014-04-06' }, author:{ id: '2' } },\r\n    ];\r\n\r\n    const action = {\r\n      type: actions.RECEIVE_FEED_RESULTS,\r\n      data: {\r\n        data: {\r\n          records: records,\r\n        },\r\n      },\r\n      fetchedRequestFromTwitter: false,\r\n    };\r\n\r\n    const stateAfter = {\r\n      posts: records,\r\n      groupedMostFrequentWords: groupedCountWords(mostFrequentWords(records.map((post) => post.data.content))),\r\n      mostFrequentUsers: mostFrequentUsers(records),\r\n      fetchingRequestFromDB: false,\r\n    };\r\n\r\n    deepFreeze(stateBefore);\r\n    deepFreeze(action);\r\n\r\n    feedReducer(stateBefore, action).should.deep.equal(stateAfter);\r\n  });\r\n\r\n  it('can set the pagination page', () => {\r\n    const stateBefore = { paginationInfo: { number: 1, limit: 10 } };\r\n\r\n    const action = {\r\n      type: actions.SET_FEED_PAGE_NUMBER,\r\n      number: 5,\r\n    };\r\n\r\n    const stateAfter = { paginationInfo: { number: 5, limit: 10 } };\r\n\r\n    deepFreeze(stateBefore);\r\n    deepFreeze(action);\r\n\r\n    feedReducer(stateBefore, action).should.deep.equal(stateAfter);\r\n  });\r\n\r\n  it('can set the pagination limit', () => {\r\n    const stateBefore = { paginationInfo: { number: 1, limit: 10 } };\r\n\r\n    const action = {\r\n      type: actions.SET_FEED_PAGE_LIMIT,\r\n      limit: 5,\r\n    };\r\n\r\n    const stateAfter = { paginationInfo: { number: 1, limit: 5 } };\r\n\r\n    deepFreeze(stateBefore);\r\n    deepFreeze(action);\r\n\r\n    feedReducer(stateBefore, action).should.deep.equal(stateAfter);\r\n  });\r\n});\r\n"
  },
  {
    "__docId__": 184,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/client/search/SearchTermsList.js",
    "memberof": null,
    "longname": "src/client/search/SearchTermsList.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { throttleFunction } from './../../shared/utilities';\r\nimport TermItem from './TermItem';\r\nimport {\r\n  deleteSearchTerm, invalidateFeedResults, toggleSearchTermParamTypeSelection\r\n} from './searchActions';\r\n\r\nclass TermsList extends Component {\r\n  componentWillReceiveProps() {\r\n    this.props.onSearchTermsChange();\r\n    $('.icon.param.types.popup').popup();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div onClick={this.props.showSearchTerm} className=\"ui grid\">\r\n        <div className=\"one wide column\">\r\n          <i className=\"large search icon\"></i>\r\n        </div>\r\n\r\n        <div className=\"fifteen wide column\">\r\n          {this.props.searchTerms.map(term => (\r\n            <TermItem\r\n              onToggleParamTypeClick={(paramTypeToggle) =>\r\n                this.props.onSearchTermParamTypeToggleClick(term.id, paramTypeToggle)\r\n              }\r\n              key={term.id}\r\n              {...term}\r\n              onDeleteClick={() => this.props.onSearchTermDeleteClick(term.id)}\r\n            />\r\n          ))}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nTermsList.propTypes = {\r\n  searchTerms: React.PropTypes.array,\r\n  showSearchTerm: React.PropTypes.func,\r\n  onSearchTermParamTypeToggleClick: React.PropTypes.func,\r\n  onSearchTermDeleteClick: React.PropTypes.func,\r\n  onSearchTermsChange: React.PropTypes.func,\r\n};\r\n\r\nconst mapStateToProps = (state) => ({ searchTerms: state.searchTerms });\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  onSearchTermParamTypeToggleClick: (id, paramTypeName) => {\r\n    dispatch(toggleSearchTermParamTypeSelection(id, paramTypeName));\r\n  },\r\n  onSearchTermDeleteClick: (id) => {\r\n    dispatch(deleteSearchTerm(id));\r\n  },\r\n  onSearchTermsChange: throttleFunction(() => dispatch(invalidateFeedResults()), 1000),\r\n});\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(TermsList);\r\n"
  },
  {
    "__docId__": 185,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "TermsList",
    "memberof": "src/client/search/SearchTermsList.js",
    "longname": "src/client/search/SearchTermsList.js~TermsList",
    "access": null,
    "export": false,
    "importPath": "solid-octo-disco/src/client/search/SearchTermsList.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "interface": false,
    "extends": [
      "react~Component"
    ]
  },
  {
    "__docId__": 186,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "componentWillReceiveProps",
    "memberof": "src/client/search/SearchTermsList.js~TermsList",
    "longname": "src/client/search/SearchTermsList.js~TermsList#componentWillReceiveProps",
    "access": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 187,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "render",
    "memberof": "src/client/search/SearchTermsList.js~TermsList",
    "longname": "src/client/search/SearchTermsList.js~TermsList#render",
    "access": null,
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 188,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "mapStateToProps",
    "memberof": "src/client/search/SearchTermsList.js",
    "longname": "src/client/search/SearchTermsList.js~mapStateToProps",
    "access": null,
    "export": false,
    "importPath": "solid-octo-disco/src/client/search/SearchTermsList.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 46,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 189,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "mapDispatchToProps",
    "memberof": "src/client/search/SearchTermsList.js",
    "longname": "src/client/search/SearchTermsList.js~mapDispatchToProps",
    "access": null,
    "export": false,
    "importPath": "solid-octo-disco/src/client/search/SearchTermsList.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 48,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 190,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/client/search/TermItem.js",
    "memberof": null,
    "longname": "src/client/search/TermItem.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import React, { Component } from 'react';\r\n\r\nconst TermItem = ({ onDeleteClick, onToggleParamTypeClick, query, source, paramTypes, id }) => (\r\n  <div data-id={id} className=\"ui multiple dropdown labeled icon violet button\"\r\n    onClick={(e) => e.stopPropagation()} style={{ marginBottom: '7px', marginRight: '5px' }}\r\n  >\r\n    <div className=\"ui grid\">\r\n      <div className=\"two wide middle aligned column\" style={{ paddingLeft: 0 }}>\r\n        <i className={`large blue ${source} icon`}></i>\r\n      </div>\r\n      <div className=\"thirteen wide center aligned column\">\r\n        <div style={{ fontSize: '1.25em', whiteSpace: 'nowrap', paddingBottom: '5px', paddingTop: '5px' }}>\r\n          {query}\r\n        </div>\r\n        <div>\r\n          {paramTypes\r\n            .filter((paramType) => paramType.selected)\r\n            .map((paramType, paramId) => {\r\n              // This is to create an icon with className or not depending on if\r\n              // the param type icon is a semantic class (ie #)\r\n              if (paramType.icon.length > 1) {\r\n                return (\r\n                  <i key={paramId}\r\n                    className={`tiny inverted blue circular ${paramType.icon} param types popup`}\r\n                    data-title={`Search by ${paramType.name}`}\r\n                  />\r\n                );\r\n              } else {\r\n                return (\r\n                  <i key={paramId} className={'tiny inverted blue circular icon param types popup'}\r\n                    data-title={`Search by ${paramType.name}`}\r\n                  >\r\n                    {paramType.icon}\r\n                  </i>\r\n                );\r\n              }\r\n            })\r\n          }\r\n        </div>\r\n        <div>\r\n          <i className=\"dropdown icon\" style={{ paddingTop: 0, paddingRight: '25px' }}></i>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <i className=\"delete icon\" onClick={() => onDeleteClick()}></i>\r\n    <TermItemMenu\r\n      termId={id}\r\n      highlightColor={source === 'twitter' ? 'blue' : ''}\r\n      paramTypes={paramTypes}\r\n      onToggleParamType={(paramTypeToggle) => onToggleParamTypeClick(paramTypeToggle)}\r\n    />\r\n  </div>\r\n);\r\n\r\nclass TermItemMenu extends Component {\r\n  componentDidMount() {\r\n    $(`.ui.dropdown[data-id=\"${this.props.termId}\"]`)\r\n      .dropdown({\r\n        action: (value, text) => {\r\n          this.props.onToggleParamType(text);\r\n        },\r\n      });\r\n  }\r\n\r\n  render() {\r\n    const menuItems = this.props.paramTypes.map((paramType, id) => {\r\n      let paramTypeIcon;\r\n      const highlighted = paramType.selected ? this.props.highlightColor : 'black';\r\n\r\n      // This is to create an icon with className or not depending on if\r\n      // the param type icon is a semantic class (ie #)\r\n      if (paramType.icon.length > 1) {\r\n        paramTypeIcon = <i className={`inverted ${highlighted} circular ${paramType.icon}`}></i>;\r\n      } else {\r\n        paramTypeIcon = <i className={`inverted ${highlighted} circular icon`}>{paramType.icon}</i>;\r\n      }\r\n\r\n      return (\r\n        <div key={id} data-value={paramType.name} className=\"item\">\r\n          {paramTypeIcon}\r\n          <span className={`ui ${highlighted} label`}>{paramType.name}</span>\r\n        </div>\r\n      );\r\n    });\r\n\r\n    return (\r\n      <div className=\"menu\">\r\n        {menuItems}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TermItem;\r\n"
  },
  {
    "__docId__": 191,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "TermItemMenu",
    "memberof": "src/client/search/TermItem.js",
    "longname": "src/client/search/TermItem.js~TermItemMenu",
    "access": null,
    "export": false,
    "importPath": "solid-octo-disco/src/client/search/TermItem.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 55,
    "undocument": true,
    "interface": false,
    "extends": [
      "react~Component"
    ]
  },
  {
    "__docId__": 192,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "componentDidMount",
    "memberof": "src/client/search/TermItem.js~TermItemMenu",
    "longname": "src/client/search/TermItem.js~TermItemMenu#componentDidMount",
    "access": null,
    "description": null,
    "lineNumber": 56,
    "undocument": true,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 193,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "render",
    "memberof": "src/client/search/TermItem.js~TermItemMenu",
    "longname": "src/client/search/TermItem.js~TermItemMenu#render",
    "access": null,
    "description": null,
    "lineNumber": 65,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 194,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "TermItem",
    "memberof": "src/client/search/TermItem.js",
    "longname": "src/client/search/TermItem.js~TermItem",
    "access": null,
    "export": true,
    "importPath": "solid-octo-disco/src/client/search/TermItem.js",
    "importStyle": "TermItem",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 195,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/client/tweetAnalysis.js",
    "memberof": null,
    "longname": "src/client/tweetAnalysis.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import moment from 'moment';\r\n\r\n// http://www.ranks.nl/stopwords\r\nconst stopList = ['a', 'about', 'above', 'after', 'again', 'against', 'all', 'am', 'an', 'and', 'any', 'are', \"aren't\", 'as', 'at', 'be', 'because', 'been', 'before', 'being', 'below', 'between', 'both', 'but', 'by', \"can't\", 'cannot', 'could', \"couldn't\", 'did', \"didn't\", 'do', 'does', \"doesn't\", 'doing', \"don't\", 'down', 'during', 'each', 'few', 'for', 'from', 'further', 'had', \"hadn't\", 'has', \"hasn't\", 'have', \"haven't\", 'having', 'he', \"he'd\", \"he'll\", \"he's\", 'her', 'here', \"here's\", 'hers', 'herself', 'him', 'himself', 'his', 'how', \"how's\", 'i', \"i'd\", \"i'll\", \"i'm\", \"i've\", 'if', 'in', 'into', 'is', \"isn't\", 'it', \"it's\", 'its', 'itself', \"let's\", 'me', 'more', 'most', \"mustn't\", 'my', 'myself', 'no', 'nor', 'not', 'of', 'off', 'on', 'once', 'only', 'or', 'other', 'ought', 'our', 'ours\tourselves', 'out', 'over', 'own', 'same', \"shan't\", 'she', \"she'd\", \"she'll\", \"she's\", 'should', \"shouldn't\", 'so', 'some', 'such', 'than', 'that', \"that's\", 'the', 'their', 'theirs', 'them', 'themselves', 'then', 'there', \"there's\", 'these', 'they', \"they'd\", \"they'll\", \"they're\", \"they've\", 'this', 'those', 'through', 'to', 'too', 'under', 'until', 'up', 'very', 'was', \"wasn't\", 'we', \"we'd\", \"we'll\", \"we're\", \"we've\", 'were', \"weren't\", 'what', \"what's\", 'when', \"when's\", 'where', \"where's\", 'which', 'while', 'who', \"who's\", 'whom', 'why', \"why's\", 'with', \"won't\", 'would', \"wouldn't\", 'you', \"you'd\", \"you'll\", \"you're\", \"you've\", 'your', 'yours', 'yourself', 'yourselves'];\r\n\r\n/**\r\n * Given a list of Tweet objects, return a sorted list of the most frequent words in them\r\n * @param tweets\r\n * @returns {Array}\r\n */\r\nexport const mostFrequentWords = (tweets) => (\r\n  wordCountToSortedList(countWords(tweets, stopList))\r\n);\r\n\r\n/**\r\n * Given counted words, return a new list with counts broken down by word casing\r\n * @param countedWords\r\n * @returns {Array}\r\n */\r\nexport const groupedCountWords = (countedWords) => {\r\n  const wordCount = [];\r\n  for (const wordInfo of countedWords) {\r\n    const normalisedWord = wordInfo.word.toLowerCase().replace('#', '');\r\n\r\n    let found = false;\r\n    for (const innerWordInfo of wordCount) {\r\n      if (innerWordInfo.word === normalisedWord) {\r\n        found = true;\r\n        innerWordInfo.count += wordInfo.count;\r\n        innerWordInfo.makeup.push(wordInfo);\r\n      }\r\n    }\r\n\r\n    if (!found) {\r\n      wordCount.push(\r\n        {\r\n          word: normalisedWord,\r\n          count: wordInfo.count,\r\n          makeup: [\r\n            {\r\n              word: wordInfo.word,\r\n              count: wordInfo.count,\r\n            },\r\n          ],\r\n        }\r\n      );\r\n    }\r\n  }\r\n\r\n  return wordCount.sort((wordCount1, wordCount2) => (wordCount2.count - wordCount1.count));\r\n};\r\n\r\n/**\r\n * Given a list of Tweet objects, return a sorted list of the 10 most active users.\r\n * If there are more than 10 most active users that have more than 1 tweet then\r\n * include them as well along with their tweets.\r\n * @param tweets\r\n * @returns {Array}\\\r\n */\r\nexport const mostFrequentUsers = (tweets, minimumTopUserCount = 10) => {\r\n  const sortedTopUsers = categoriseByUser(tweets).sort((tweetList1, tweetList2) => (\r\n    tweetList2.posts.length - tweetList1.posts.length\r\n  ));\r\n  let topRestUsers = [];\r\n  if (sortedTopUsers.length > minimumTopUserCount) {\r\n    topRestUsers = sortedTopUsers\r\n      .slice(minimumTopUserCount + 1)\r\n      .filter(user => user.posts.length > 1);\r\n  }\r\n\r\n  return [...sortedTopUsers.slice(0, minimumTopUserCount), ...topRestUsers];\r\n};\r\n\r\n/**\r\n * Group a list of posts by their author.\r\n * @param [posts]\r\n * @returns {{}}\r\n */\r\nconst categoriseByUser = (posts) => (\r\n  posts.reduce((userPostCount, post) => {\r\n    let categorizedUserIndex = -1;\r\n    userPostCount.forEach((categorizedUserPost, index) => {\r\n      if (categorizedUserPost.author.id === post.author.id) {\r\n        categorizedUserIndex = index;\r\n      }\r\n    });\r\n\r\n    if (categorizedUserIndex === -1) {\r\n      userPostCount.push({\r\n        author: post.author,\r\n        posts: [post.data],\r\n        source: post.source,\r\n      });\r\n    } else {\r\n      userPostCount[categorizedUserIndex].posts.push(post.data);\r\n    }\r\n\r\n    return userPostCount;\r\n  }, [])\r\n);\r\n\r\n// ---------------------------------------------------------------------------------------\r\n\r\n/**\r\n * Given some list of tweets, create a dictionary of how often each word appears.\r\n * Removes matched https://t.co/~ URLs\r\n * Correctly matches @mentions and #hashtags\r\n * Punctuation (hyphens, commas, full stops) are counted as spaces.\r\n * @param tweets An array of Tweet objects\r\n * @returns {{}} e.g. {'hello': 5, 'world': 8}\r\n */\r\nconst countWords = (tweets, stopList = []) => {\r\n  const wordCount = {};\r\n  for (const content of tweets) {\r\n    // Match against either a t.co URL, a mention, hashtag or an entire word.\r\n    const matcher = /(https\\:\\/\\/t\\.co\\/.+?)\\b|([@#]?\\w+)/gmi;\r\n    const matches = content.match(matcher) || [];\r\n\r\n    for (const word of matches) {\r\n      if (word.indexOf('https://t.co') > -1) {\r\n        continue;\r\n      }\r\n      const wordIsInStopList = stopList.indexOf(word.toLowerCase()) > -1;\r\n      if (!wordIsInStopList && word.length >= 3) {\r\n        // ~~ will convert floats to integer,\r\n        // but importantly quickly convert undefined to 0\r\n        wordCount[word] = ~~wordCount[word] + 1;\r\n      }\r\n    }\r\n  }\r\n\r\n  return wordCount;\r\n};\r\n\r\n/**\r\n * Converts some word count object to a list of word/count pairs,\r\n * sorted from most frequent to least.\r\n * @param wordCounts An object like {'hello': 5, 'world': 8}\r\n * @returns {Array} A sorted list of word/count pairs, e.g. [{'word': 'hello', 'count': 5}, ...]\r\n */\r\nconst wordCountToSortedList = (wordCounts) => {\r\n  const result = [];\r\n  for (let key in wordCounts) {\r\n    if (wordCounts.hasOwnProperty(key)) {\r\n      result.push({\r\n        word: key,\r\n        count: wordCounts[key],\r\n      });\r\n    }\r\n  }\r\n\r\n  return result.sort((wordCount1, wordCount2) => (wordCount2.count - wordCount1.count));\r\n};\r\n\r\n/**\r\n * Give a feed of Tweets, decide if the feed is still relevant.\r\n * If a feed had less than 100 results, or more than 5 results are\r\n * over 10 minutes old, it is considered not relevant.\r\n * @param feedResults\r\n * @returns {boolean}\r\n */\r\nexport const doesFeedHaveUsefulResults = (feedResults) => {\r\n  const twentyMinutesAgo = moment().subtract(20, 'minutes');\r\n  const minRecentPosts = 20;\r\n\r\n  let inDateCount = 0;\r\n  for (const result of feedResults.data.records) {\r\n    const test = moment(result.data.date);\r\n    if (test.isAfter(twentyMinutesAgo)) {\r\n      inDateCount += 1;\r\n    }\r\n  }\r\n\r\n  return feedResults.data.count > 100 && inDateCount > minRecentPosts;\r\n};\r\n"
  },
  {
    "__docId__": 196,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "stopList",
    "memberof": "src/client/tweetAnalysis.js",
    "longname": "src/client/tweetAnalysis.js~stopList",
    "access": null,
    "export": false,
    "importPath": "solid-octo-disco/src/client/tweetAnalysis.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 197,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "mostFrequentWords",
    "memberof": "src/client/tweetAnalysis.js",
    "longname": "src/client/tweetAnalysis.js~mostFrequentWords",
    "access": null,
    "export": true,
    "importPath": "solid-octo-disco/src/client/tweetAnalysis.js",
    "importStyle": "{mostFrequentWords}",
    "description": "Given a list of Tweet objects, return a sorted list of the most frequent words in them",
    "lineNumber": 11,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "tweets",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 198,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "groupedCountWords",
    "memberof": "src/client/tweetAnalysis.js",
    "longname": "src/client/tweetAnalysis.js~groupedCountWords",
    "access": null,
    "export": true,
    "importPath": "solid-octo-disco/src/client/tweetAnalysis.js",
    "importStyle": "{groupedCountWords}",
    "description": "Given counted words, return a new list with counts broken down by word casing",
    "lineNumber": 20,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "countedWords",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 199,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "mostFrequentUsers",
    "memberof": "src/client/tweetAnalysis.js",
    "longname": "src/client/tweetAnalysis.js~mostFrequentUsers",
    "access": null,
    "export": true,
    "importPath": "solid-octo-disco/src/client/tweetAnalysis.js",
    "importStyle": "{mostFrequentUsers}",
    "description": "Given a list of Tweet objects, return a sorted list of the 10 most active users.\nIf there are more than 10 most active users that have more than 1 tweet then\ninclude them as well along with their tweets.",
    "lineNumber": 60,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array}\\"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "tweets",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "{Array}\\"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 200,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "categoriseByUser",
    "memberof": "src/client/tweetAnalysis.js",
    "longname": "src/client/tweetAnalysis.js~categoriseByUser",
    "access": null,
    "export": false,
    "importPath": "solid-octo-disco/src/client/tweetAnalysis.js",
    "importStyle": null,
    "description": "Group a list of posts by their author.",
    "lineNumber": 79,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{{}}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "name": "posts",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{}"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 201,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "countWords",
    "memberof": "src/client/tweetAnalysis.js",
    "longname": "src/client/tweetAnalysis.js~countWords",
    "access": null,
    "export": false,
    "importPath": "solid-octo-disco/src/client/tweetAnalysis.js",
    "importStyle": null,
    "description": "Given some list of tweets, create a dictionary of how often each word appears.\nRemoves matched https://t.co/~ URLs\nCorrectly matches @mentions and #hashtags\nPunctuation (hyphens, commas, full stops) are counted as spaces.",
    "lineNumber": 112,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{{}} e.g. {'hello': 5, 'world': 8}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "tweets",
        "description": "An array of Tweet objects"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{}"
      ],
      "spread": false,
      "description": "e.g. {'hello': 5, 'world': 8}"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 202,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "wordCountToSortedList",
    "memberof": "src/client/tweetAnalysis.js",
    "longname": "src/client/tweetAnalysis.js~wordCountToSortedList",
    "access": null,
    "export": false,
    "importPath": "solid-octo-disco/src/client/tweetAnalysis.js",
    "importStyle": null,
    "description": "Converts some word count object to a list of word/count pairs,\nsorted from most frequent to least.",
    "lineNumber": 141,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array} A sorted list of word/count pairs, e.g. [{'word': 'hello', 'count': 5}, ...]"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "wordCounts",
        "description": "An object like {'hello': 5, 'world': 8}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "A sorted list of word/count pairs, e.g. [{'word': 'hello', 'count': 5}, ...]"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 203,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "doesFeedHaveUsefulResults",
    "memberof": "src/client/tweetAnalysis.js",
    "longname": "src/client/tweetAnalysis.js~doesFeedHaveUsefulResults",
    "access": null,
    "export": true,
    "importPath": "solid-octo-disco/src/client/tweetAnalysis.js",
    "importStyle": "{doesFeedHaveUsefulResults}",
    "description": "Give a feed of Tweets, decide if the feed is still relevant.\nIf a feed had less than 100 results, or more than 5 results are\nover 10 minutes old, it is considered not relevant.",
    "lineNumber": 162,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "feedResults",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 204,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/client/tweetAnalysis.spec.js",
    "memberof": null,
    "longname": "src/client/tweetAnalysis.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import { should } from 'chai';\r\nimport { mostFrequentWords, mostFrequentUsers, groupedCountWords } from './tweetAnalysis';\r\n\r\nshould();\r\n\r\ndescribe('#TweetAnalysis', () => {\r\n  describe('Frequent words counter', () => {\r\n    const exampleFrequentWords = [\r\n      { word: 'three', count: 3 },\r\n      { word: 'two', count: 2 },\r\n      { word: 'one', count: 1 },\r\n    ];\r\n\r\n    it('returns an empty list on empty input', () => {\r\n      const tweets = [];\r\n      mostFrequentWords(tweets).should.deep.equal([]);\r\n    });\r\n\r\n    it('counts words in a single tweet, most frequent first', () => {\r\n      const tweet = ['one three two three two three'];\r\n      mostFrequentWords(tweet).should.deep.equal(exampleFrequentWords);\r\n    });\r\n\r\n    it('counts words across several tweets, most frequent first', () => {\r\n      const tweets = ['one two three three', 'two three'];\r\n      mostFrequentWords(tweets).should.deep.equal(exampleFrequentWords);\r\n    });\r\n\r\n    it('ignores punctuation when splitting words', () => {\r\n      const tweets = ['one, two,two three.three !three'];\r\n      mostFrequentWords(tweets).should.deep.equal(exampleFrequentWords);\r\n    });\r\n\r\n    it('correctly identifies and removes t.co URLS', () => {\r\n      const tweets = ['one, two three https://t.co/url1 https://t.co/url2 four https://t.co/url3'];\r\n      mostFrequentWords(tweets).should.deep.equal([\r\n        { word: 'one', count: 1 },\r\n        { word: 'two', count: 1 },\r\n        { word: 'three', count: 1 },\r\n        { word: 'four', count: 1 },\r\n      ]);\r\n    });\r\n\r\n    it('correctly identifies @mentions', () => {\r\n      const tweets = ['one, @Winwardo two'];\r\n      mostFrequentWords(tweets).should.deep.equal([\r\n        { word: 'one', count: 1 },\r\n        { word: '@Winwardo', count: 1 },\r\n        { word: 'two', count: 1 },\r\n      ]);\r\n    });\r\n\r\n    it('correctly identifies #hashtags', () => {\r\n      const tweets = ['one, #FOOTBALL two'];\r\n      mostFrequentWords(tweets).should.deep.equal([\r\n        { word: 'one', count: 1 },\r\n        { word: '#FOOTBALL', count: 1 },\r\n        { word: 'two', count: 1 },\r\n      ]);\r\n    });\r\n\r\n    it('can conflate words of different cases together with one word', () => {\r\n      const exampleCountedAndSortedWords = [\r\n        { word: 'football', count: 10 },\r\n      ];\r\n\r\n      groupedCountWords(exampleCountedAndSortedWords).should.deep.equal(\r\n        [\r\n          {\r\n            word: 'football',\r\n            count: 10,\r\n            makeup: [\r\n              { word: 'football', count: 10 },\r\n            ],\r\n          },\r\n        ]\r\n      );\r\n    });\r\n\r\n    it('can conflate words of different cases together with one uppercase word', () => {\r\n      const exampleCountedAndSortedWords = [\r\n        { word: 'FOOTBALL', count: 10 },\r\n      ];\r\n\r\n      groupedCountWords(exampleCountedAndSortedWords).should.deep.equal(\r\n        [\r\n          {\r\n            word: 'football',\r\n            count: 10,\r\n            makeup: [\r\n              { word: 'FOOTBALL', count: 10 },\r\n            ],\r\n          },\r\n        ]\r\n      );\r\n    });\r\n\r\n    it('can conflate words of different cases together with one uppercase word and one lower case', () => {\r\n      const exampleCountedAndSortedWords = [\r\n        { word: 'FOOTBALL', count: 10 },\r\n        { word: 'football', count: 5 },\r\n      ];\r\n\r\n      groupedCountWords(exampleCountedAndSortedWords).should.deep.equal(\r\n        [\r\n          {\r\n            word: 'football',\r\n            count: 15,\r\n            makeup: [\r\n              { word: 'FOOTBALL', count: 10 },\r\n              { word: 'football', count: 5 },\r\n            ],\r\n          },\r\n        ]\r\n      );\r\n    });\r\n\r\n    it('can conflate hashtags with normal words', () => {\r\n      const exampleCountedAndSortedWords = [\r\n        { word: 'Football', count: 10 },\r\n        { word: '#footBALL', count: 5 },\r\n      ];\r\n\r\n      groupedCountWords(exampleCountedAndSortedWords).should.deep.equal(\r\n        [\r\n          {\r\n            word: 'football',\r\n            count: 15,\r\n            makeup: [\r\n              { word: 'Football', count: 10 },\r\n              { word: '#footBALL', count: 5 },\r\n            ],\r\n          },\r\n        ]\r\n      );\r\n    });\r\n\r\n    it('can conflate words of different cases together in a complex example', () => {\r\n      const exampleCountedAndSortedWords = [\r\n        { word: 'MANCHESTER', count: 16 },\r\n        { word: 'football', count: 10 },\r\n        { word: 'liverpool', count: 7 },\r\n        { word: 'Football', count: 5 },\r\n        { word: 'FOOTBALL', count: 5 },\r\n      ];\r\n\r\n      groupedCountWords(exampleCountedAndSortedWords).should.deep.equal(\r\n        [\r\n          {\r\n            word: 'football',\r\n            count: 20,\r\n            makeup: [\r\n              { word: 'football', count: 10 },\r\n              { word: 'Football', count: 5 },\r\n              { word: 'FOOTBALL', count: 5 },\r\n            ],\r\n          },\r\n          {\r\n            word: 'manchester',\r\n            count: 16,\r\n            makeup: [\r\n              { word: 'MANCHESTER', count: 16 },\r\n            ],\r\n          },\r\n          {\r\n            word: 'liverpool',\r\n            count: 7,\r\n            makeup: [\r\n              { word: 'liverpool', count: 7 },\r\n            ],\r\n          },\r\n        ]\r\n      );\r\n    });\r\n  });\r\n\r\n  describe('Most active users counter', () => {\r\n    it('returns an empty list on an empty input', () => {\r\n      const tweets = [];\r\n      mostFrequentUsers(tweets).should.deep.equal([]);\r\n    });\r\n\r\n    it('returns the Tweeter and their tweets', () => {\r\n      const tweets = [\r\n        {\r\n          author: {\r\n            id: 1,\r\n            name: 'example',\r\n            handle: 'exampleHandle',\r\n          },\r\n          data: { content: 'hello world' },\r\n          source: 'twitter',\r\n        }, {\r\n          author: {\r\n            id: 1,\r\n            name: 'example',\r\n            handle: 'exampleHandle',\r\n          },\r\n          data: { content: 'second tweet' },\r\n          source: 'twitter',\r\n        },\r\n      ];\r\n      mostFrequentUsers(tweets).should.deep.equal(\r\n        [\r\n          {\r\n            author: {\r\n              id: 1,\r\n              name: 'example',\r\n              handle: 'exampleHandle',\r\n            },\r\n            posts: [\r\n              { content: 'hello world' },\r\n              { content: 'second tweet' },\r\n            ],\r\n            source: 'twitter',\r\n          },\r\n        ]\r\n      );\r\n    });\r\n\r\n    it('returns the Tweeter and their tweets, sorted by most active first', () => {\r\n      const tweets = [\r\n        {\r\n          author: {\r\n            id: 2,\r\n            name: 'example2',\r\n            handle: 'exampleHandle2',\r\n          },\r\n          data: { content: 'hello world' },\r\n          source: 'twitter',\r\n        }, {\r\n          author: {\r\n            id: 1,\r\n            name: 'example',\r\n            handle: 'exampleHandle',\r\n          },\r\n          data: { content: 'hey there' },\r\n          source: 'twitter',\r\n        }, {\r\n          author: {\r\n            id: 1,\r\n            name: 'example',\r\n            handle: 'exampleHandle',\r\n          },\r\n          data: { content: 'I am second' },\r\n          source: 'twitter',\r\n        }, {\r\n          author: {\r\n            id: 2,\r\n            name: 'example2',\r\n            handle: 'exampleHandle2',\r\n          },\r\n          data: { content: 'second tweet' },\r\n          source: 'twitter',\r\n        }, {\r\n          author: {\r\n            id: 3,\r\n            name: 'example3',\r\n            handle: 'exampleHandle3',\r\n          },\r\n          data: { content: 'I am third' },\r\n          source: 'twitter',\r\n        }, {\r\n          author: {\r\n            id: 2,\r\n            name: 'example2',\r\n            handle: 'exampleHandle2',\r\n          },\r\n          data: { content: 'I am first' },\r\n          source: 'twitter',\r\n        },\r\n      ];\r\n      mostFrequentUsers(tweets).should.deep.equal(\r\n        [\r\n          {\r\n            author: {\r\n              id: 2,\r\n              name: 'example2',\r\n              handle: 'exampleHandle2',\r\n            },\r\n            posts: [\r\n              { content: 'hello world' },\r\n              { content: 'second tweet' },\r\n              { content: 'I am first' },\r\n            ],\r\n            source: 'twitter',\r\n          },\r\n          {\r\n            author: {\r\n              id: 1,\r\n              name: 'example',\r\n              handle: 'exampleHandle',\r\n            },\r\n            posts: [\r\n              { content: 'hey there' },\r\n              { content: 'I am second' },\r\n            ],\r\n            source: 'twitter',\r\n          },\r\n          {\r\n            author: {\r\n              id: 3,\r\n              name: 'example3',\r\n              handle: 'exampleHandle3',\r\n            },\r\n            posts: [\r\n              { content: 'I am third' },\r\n            ],\r\n            source: 'twitter',\r\n          },\r\n        ]\r\n      );\r\n    });\r\n  });\r\n});\r\n"
  },
  {
    "__docId__": 205,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/client/Twitter.js",
    "memberof": null,
    "longname": "src/client/Twitter.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import React, { Component } from 'react';\r\n\r\nexport const TwitterProfilePicture = ({ author, size }) => (\r\n  <img className={`ui left floated bordered ${size} rounded image`}\r\n       src={author.profile_image_url.replace('_normal', '')}\r\n       alt={`${author.name}'s Twitter profile picture`}\r\n       style={{ maxHeight: '80px', maxWidth: '80px' }}\r\n  />\r\n);\r\n"
  },
  {
    "__docId__": 206,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "TwitterProfilePicture",
    "memberof": "src/client/Twitter.js",
    "longname": "src/client/Twitter.js~TwitterProfilePicture",
    "access": null,
    "export": true,
    "importPath": "solid-octo-disco/src/client/Twitter.js",
    "importStyle": "{TwitterProfilePicture}",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 207,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/server/footballSearch.js",
    "memberof": null,
    "longname": "src/server/footballSearch.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import fetch from 'isomorphic-fetch';\r\nimport  { db } from './orientdb';\r\nimport { newPromiseChain } from './../shared/utilities';\r\n\r\n// These keys should be hidden in a private config file or environment variables\r\n// For simplicity of this assignment, they will be visible here\r\nconst footballAccessOptions = {\r\n  method: 'GET',\r\n  headers: {\r\n    'X-Auth-Token': 'f39c0cf21f95409498f8eea5eb129b0f',\r\n    'X-Response-Control': 'minified',\r\n  },\r\n  dataType: 'json',\r\n\r\n};\r\n\r\nconst footballAPIHost = 'http://api.football-data.org';\r\nconst footballAPIVersion = '/v1';\r\n\r\nexport const searchFootballSeasons = (res, year) => {\r\n  const footballRequestUrl = `${footballAPIHost}${footballAPIVersion}/soccerseasons/?season=${year}`;\r\n\r\n  return newPromiseChain()\r\n    .then(() => db.query('SELECT FROM league WHERE year=:year', { params: { year: year } }))\r\n    .then((results) => {\r\n      if (results.length === 0) { // If our cache is empty, call the Football API\r\n        return newPromiseChain()\r\n          .then(() => fetchFromFootballAPI(footballRequestUrl))\r\n          .then((footballSeasons) => cacheAPIJsonArray(db, 'League', footballSeasons.length > 0 ? footballSeasons : []));\r\n      } else {\r\n        return results; // Return our cached data\r\n      }\r\n    })\r\n    .then(\r\n      (footballSeasons) => {\r\n        res.writeHead(200, { 'Content-Type': 'application/json' });\r\n        res.end(JSON.stringify(footballSeasons));\r\n      },\r\n      (rejection) => {\r\n        res.writeHead(500, { 'Content-Type': 'application/json' });\r\n        res.end('An unexpected internal error occurred.');\r\n        console.warn(`Unable to get ${year}`, rejection);\r\n      });\r\n};\r\n\r\nexport const searchFootballSeasonTeams = (res, year, leagues) =>\r\n  newPromiseChain()\r\n    .then(() =>\r\n      Promise.all(\r\n        leagues.map(\r\n          league => newPromiseChain()\r\n            .then(() => fetchLeagueTeamsById(league.id))\r\n            .then(leagueTeams => ({\r\n              name: league.name,\r\n              id: league.id,\r\n              ...leagueTeams,\r\n            }))\r\n        )\r\n      )\r\n    )\r\n    .then(\r\n      (allYearsLeagueTeams) => {\r\n        res.writeHead(200, { 'Content-Type': 'application/json' });\r\n        res.end(JSON.stringify({\r\n          data: {\r\n            teamsByLeague: allYearsLeagueTeams,\r\n          },\r\n        }));\r\n      },\r\n      (rejection) => {\r\n        res.writeHead(500, { 'Content-Type': 'application/json' });\r\n        res.end('An unexpected internal error occurred.');\r\n        console.warn(`Unable to search for query year:${year}'s league's teams`, rejection);\r\n      }\r\n  );\r\n\r\nconst fetchLeagueTeamsById = (leagueId) => {\r\n  const footballRequestUrl = `${footballAPIHost}${footballAPIVersion}/soccerseasons/${leagueId}/teams`;\r\n  return newPromiseChain()\r\n    .then(() => db.query('SELECT FROM team WHERE leagueid=:leagueid', { params: { leagueid: leagueId } }))\r\n    .then((results) => {\r\n      if (results.length === 0) {\r\n        return newPromiseChain()\r\n          .then(() => fetchFromFootballAPI(footballRequestUrl))\r\n          .then((league) =>\r\n            cacheAPIJsonArray(db, 'Team', league.teams.map(\r\n              (team) => ({ ...team, leagueid: leagueId }))\r\n            )\r\n          );\r\n      } else {\r\n        return results;\r\n      }\r\n    })\r\n    .then((teams) => ({ teams: teams }))\r\n    .then(\r\n      leagueTeamsResolved => leagueTeamsResolved,\r\n      rejection => console.warn(`Major error requesting the league with id:${leagueId}.`, rejection)\r\n    );\r\n};\r\n\r\nexport const searchFootballTeamPlayers = (res, teamId) => {\r\n  const footballRequestUrl = `${footballAPIHost}${footballAPIVersion}/teams/${teamId}/players`;\r\n\r\n  return newPromiseChain()\r\n    .then(() => db.query('SELECT FROM player WHERE teamid=:teamid', { params: { teamid: teamId } }))\r\n    .then((results) => {\r\n      if (results.length === 0) { // If our cache is empty, call the Football API\r\n        return newPromiseChain()\r\n          .then(() => fetchFromFootballAPI(footballRequestUrl))\r\n          .then((league) =>\r\n            cacheAPIJsonArray(db, 'Player', league.players.map(\r\n              (player) => ({ ...player, teamid: teamId }))\r\n            )\r\n          );\r\n      } else {\r\n        return results; // Return our cached data\r\n      }\r\n    })\r\n    .then((players) => ({ players: players }))\r\n    .then(\r\n      (footballPlayers) => {\r\n        res.writeHead(200, { 'Content-Type': 'application/json' });\r\n        res.end(JSON.stringify(footballPlayers));\r\n      },\r\n      (rejection) => {\r\n        res.writeHead(500, { 'Content-Type': 'application/json' });\r\n        res.end('An unexpected internal error occurred.');\r\n        console.warn(`Unable to get ${teamId}`, rejection);\r\n      });\r\n};\r\n\r\nconst fetchFromFootballAPI = (footballRequestUrl) => (\r\n  newPromiseChain()\r\n    .then(() => console.info('Hitting Football API:', footballRequestUrl))\r\n    .then(() => fetch(footballRequestUrl, footballAccessOptions))\r\n    .then(response => response.json())\r\n);\r\n\r\nconst cacheAPIJsonArray = (db, datatype, dataArray) => (\r\n  newPromiseChain()\r\n    .then(() => Promise.all(// Insert all the seasons to our cache\r\n      dataArray.map(\r\n        (data) => db.insert().into(datatype).set(data).one()\r\n          .then((res) => {}, (rej) => {}))\r\n    ))\r\n    .then(() => {\r\n      if (dataArray.length > 0) {\r\n        return dataArray;\r\n      } else {\r\n        return {};\r\n      }\r\n    }) // Return the actual API data as we already have it\r\n);\r\n"
  },
  {
    "__docId__": 208,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "footballAccessOptions",
    "memberof": "src/server/footballSearch.js",
    "longname": "src/server/footballSearch.js~footballAccessOptions",
    "access": null,
    "export": false,
    "importPath": "solid-octo-disco/src/server/footballSearch.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 209,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "footballAPIHost",
    "memberof": "src/server/footballSearch.js",
    "longname": "src/server/footballSearch.js~footballAPIHost",
    "access": null,
    "export": false,
    "importPath": "solid-octo-disco/src/server/footballSearch.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 210,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "footballAPIVersion",
    "memberof": "src/server/footballSearch.js",
    "longname": "src/server/footballSearch.js~footballAPIVersion",
    "access": null,
    "export": false,
    "importPath": "solid-octo-disco/src/server/footballSearch.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 211,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "searchFootballSeasons",
    "memberof": "src/server/footballSearch.js",
    "longname": "src/server/footballSearch.js~searchFootballSeasons",
    "access": null,
    "export": true,
    "importPath": "solid-octo-disco/src/server/footballSearch.js",
    "importStyle": "{searchFootballSeasons}",
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 212,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "searchFootballSeasonTeams",
    "memberof": "src/server/footballSearch.js",
    "longname": "src/server/footballSearch.js~searchFootballSeasonTeams",
    "access": null,
    "export": true,
    "importPath": "solid-octo-disco/src/server/footballSearch.js",
    "importStyle": "{searchFootballSeasonTeams}",
    "description": null,
    "lineNumber": 46,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 213,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "fetchLeagueTeamsById",
    "memberof": "src/server/footballSearch.js",
    "longname": "src/server/footballSearch.js~fetchLeagueTeamsById",
    "access": null,
    "export": false,
    "importPath": "solid-octo-disco/src/server/footballSearch.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 77,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 214,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "searchFootballTeamPlayers",
    "memberof": "src/server/footballSearch.js",
    "longname": "src/server/footballSearch.js~searchFootballTeamPlayers",
    "access": null,
    "export": true,
    "importPath": "solid-octo-disco/src/server/footballSearch.js",
    "importStyle": "{searchFootballTeamPlayers}",
    "description": null,
    "lineNumber": 101,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 215,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "fetchFromFootballAPI",
    "memberof": "src/server/footballSearch.js",
    "longname": "src/server/footballSearch.js~fetchFromFootballAPI",
    "access": null,
    "export": false,
    "importPath": "solid-octo-disco/src/server/footballSearch.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 132,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 216,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "cacheAPIJsonArray",
    "memberof": "src/server/footballSearch.js",
    "longname": "src/server/footballSearch.js~cacheAPIJsonArray",
    "access": null,
    "export": false,
    "importPath": "solid-octo-disco/src/server/footballSearch.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 139,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 217,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/server/orientdb.js",
    "memberof": null,
    "longname": "src/server/orientdb.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import OrientDB from 'orientjs';\r\nimport { schema } from './../shared/data/databaseSchema';\r\nimport { newPromiseChain } from '../shared/utilities';\r\n\r\n// Credentials should be stored in a hidden config file, or in environment variables.\r\n// As this is a student project, for simplicity, they will reside here.\r\nconst SERVER = OrientDB({\r\n  host: 'localhost',\r\n  port: 2424,\r\n  username: 'root',\r\n  password: 'admin',\r\n});\r\nconst DATABASE_NAME = 'footballers1';\r\n\r\n/**\r\n * Insert a new class into the database based on some properties.\r\n * It will not override existing classes.\r\n * @param db The OrientDb instance\r\n * @param name The name of the new class, like 'Tweet'\r\n * @param classSchema The schema of the class\r\n */\r\nconst insertClass = (db, name, classSchema) => {\r\n  const superclass = classSchema.superclass;\r\n  const properties = classSchema.properties;\r\n\r\n  return newPromiseChain()\r\n    .then(() => db.class.create(name, superclass))\r\n    .then((clazz) => createClassProperties(clazz, properties))\r\n    .then(() => (\r\n\r\n      // Add indexes\r\n      Promise.all(classSchema.indexes.map((index) => {\r\n        const defaults = {\r\n          name: `${name}.${index.properties.join('_')}`,\r\n          class: name,\r\n        };\r\n        const indexToInsert = { ...defaults, ...index };\r\n\r\n        return db.index.create(indexToInsert);\r\n      }))\r\n    ))\r\n    .then(() => console.log(`Successfully generated class ${name}.`))\r\n    .catch((error) => console.warn(`Error: Unable to generate class ${name};`, error.message));\r\n};\r\n\r\n/**\r\n * Add the properties to the db class\r\n * @param class The db OrientDb class\r\n * @param properties The class paramater's properties\r\n */\r\nconst createClassProperties = (clazz, properties) => {\r\n  const transformedProperties = properties.map((input) => (\r\n    { ...input, mandatory: true }\r\n  ));\r\n\r\n  // Add the properties to the class\r\n  return clazz.property.create(transformedProperties);\r\n};\r\n\r\n/**\r\n * Update the database to have all the classes in a given schema.\r\n * @param db The OrientDb instance\r\n * @param schema See ./shared/data/databaseSchema.js for an example\r\n */\r\nconst insertClassesFromSchema = (db, schema) => {\r\n  return Promise.all(Object.keys(schema).map((name) => {\r\n    const clazz = schema[name];\r\n    return insertClass(db, name, clazz);\r\n  }));\r\n};\r\n\r\n/**\r\n * Ensure a database exists in a working format, creating a new one if it does not.\r\n * After ensuring it exists, set up all classes on it.\r\n * Not guaranteed to succeed, please check the console for results.\r\n * @param res The HTTP response object.\r\n */\r\nexport const generateDatabase = (res) => {\r\n  res.writeHead(200, { 'Content-Type': 'application/json' });\r\n\r\n  SERVER.list().then((dbs) => {\r\n    let foundDb = null;\r\n\r\n    dbs.forEach((db) => {\r\n      if (db.name === DATABASE_NAME) {\r\n        foundDb = db;\r\n      };\r\n    });\r\n\r\n    if (foundDb === null) {\r\n      return newPromiseChain()\r\n        .then(() => SERVER.create(DATABASE_NAME))\r\n        .then((db) => insertClassesFromSchema(db, schema))\r\n        .then(() => {\r\n          res.end(JSON.stringify(\r\n            `Attempted to generate new database ${DATABASE_NAME} with classes.`\r\n          ));\r\n        });\r\n    } else {\r\n      return newPromiseChain()\r\n        .then(() => insertClassesFromSchema(foundDb, schema))\r\n        .then(() => {\r\n          res.end(JSON.stringify(\r\n            `Found database ${DATABASE_NAME}, attempted to add missing classes.`\r\n          ));\r\n        });\r\n    }\r\n  });\r\n};\r\n\r\nexport const db = SERVER.use(DATABASE_NAME);\r\n"
  },
  {
    "__docId__": 218,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "SERVER",
    "memberof": "src/server/orientdb.js",
    "longname": "src/server/orientdb.js~SERVER",
    "access": null,
    "export": false,
    "importPath": "solid-octo-disco/src/server/orientdb.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 219,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "DATABASE_NAME",
    "memberof": "src/server/orientdb.js",
    "longname": "src/server/orientdb.js~DATABASE_NAME",
    "access": null,
    "export": false,
    "importPath": "solid-octo-disco/src/server/orientdb.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 220,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "insertClass",
    "memberof": "src/server/orientdb.js",
    "longname": "src/server/orientdb.js~insertClass",
    "access": null,
    "export": false,
    "importPath": "solid-octo-disco/src/server/orientdb.js",
    "importStyle": null,
    "description": "Insert a new class into the database based on some properties.\nIt will not override existing classes.",
    "lineNumber": 22,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "db",
        "description": "The OrientDb instance"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "The name of the new class, like 'Tweet'"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "classSchema",
        "description": "The schema of the class"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 221,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "createClassProperties",
    "memberof": "src/server/orientdb.js",
    "longname": "src/server/orientdb.js~createClassProperties",
    "access": null,
    "export": false,
    "importPath": "solid-octo-disco/src/server/orientdb.js",
    "importStyle": null,
    "description": "Add the properties to the db class",
    "lineNumber": 51,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "class",
        "description": "The db OrientDb class"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "properties",
        "description": "The class paramater's properties"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 222,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "insertClassesFromSchema",
    "memberof": "src/server/orientdb.js",
    "longname": "src/server/orientdb.js~insertClassesFromSchema",
    "access": null,
    "export": false,
    "importPath": "solid-octo-disco/src/server/orientdb.js",
    "importStyle": null,
    "description": "Update the database to have all the classes in a given schema.",
    "lineNumber": 65,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "db",
        "description": "The OrientDb instance"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "schema",
        "description": "See ./shared/data/databaseSchema.js for an example"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 223,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "generateDatabase",
    "memberof": "src/server/orientdb.js",
    "longname": "src/server/orientdb.js~generateDatabase",
    "access": null,
    "export": true,
    "importPath": "solid-octo-disco/src/server/orientdb.js",
    "importStyle": "{generateDatabase}",
    "description": "Ensure a database exists in a working format, creating a new one if it does not.\nAfter ensuring it exists, set up all classes on it.\nNot guaranteed to succeed, please check the console for results.",
    "lineNumber": 78,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "The HTTP response object."
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 224,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "db",
    "memberof": "src/server/orientdb.js",
    "longname": "src/server/orientdb.js~db",
    "access": null,
    "export": true,
    "importPath": "solid-octo-disco/src/server/orientdb.js",
    "importStyle": "{db}",
    "description": null,
    "lineNumber": 111,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 225,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/server/server.js",
    "memberof": null,
    "longname": "src/server/server.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import express from 'express';\r\nimport config from '../../webpack.config.js';\r\nimport { searchQuery, getTweetFromDb } from './tweetFinder';\r\nimport { generateDatabase } from './orientdb';\r\nimport { stream, TwitAccess } from './twitterSearch';\r\nimport bodyParser from 'body-parser';\r\nimport {\r\n  searchFootballSeasons, searchFootballSeasonTeams, searchFootballTeamPlayers\r\n} from './footballSearch';\r\n\r\nconst app = express();\r\nconst port = process.env.PORT || 3000;\r\n\r\n// In development hotload React using webpack-hot-middleware\r\nif ((process.env.NODE_ENV === 'development')) {\r\n  const webpack = require('webpack');\r\n  const compiler = webpack(config[1]);\r\n  app.use(require('webpack-dev-middleware')(compiler, {\r\n    noInfo: true,\r\n    publicPath: config[1].output.publicPath,\r\n  }));\r\n\r\n  app.use(require('webpack-hot-middleware')(compiler));\r\n}\r\n\r\n// parse application/x-www-form-urlencoded\r\napp.use(bodyParser.urlencoded({ extended: false }));\r\n\r\n// parse application/json\r\napp.use(bodyParser.json());\r\n\r\n//--------------------------------------------------------------------------\r\n\r\napp.use('/public', express.static('public'));\r\n\r\napp.get('/', (req, res) => {\r\n  res.sendFile('index.html', { root: 'public' });\r\n});\r\n\r\napp.get('/orient/generate', (req, res) => {\r\n  generateDatabase(res);\r\n});\r\n\r\napp.post('/search', (req, res) => {\r\n  searchQuery(req, res);\r\n});\r\n\r\napp.get('/tweet/:id', (req, res) => {\r\n  getTweetFromDb(res, req.params.id);\r\n});\r\n\r\n// not used in Socto web interface, example test if we could stream\r\napp.get('/twit/stream/:query', (req, res) => {\r\n  res.writeHead(200, { 'Content-Type': 'application/json' });\r\n  stream(req, res);\r\n});\r\n\r\napp.get('/football/seasons/:year', (req, res) => {\r\n  searchFootballSeasons(res, req.params.year);\r\n});\r\n\r\napp.post('/football/seasons/:year/teams', (req, res) => {\r\n  searchFootballSeasonTeams(res, req.params.year, req.body.leagues);\r\n});\r\n\r\napp.get('/football/teams/:teamid/players', (req, res) => {\r\n  searchFootballTeamPlayers(res, req.params.teamid);\r\n});\r\n\r\n// Used for development purposes to make sure we're hitting the correct twitter end point\r\napp.get('/exampleTwitterJson', (req, res) => {\r\n  res.writeHead(200, { 'Content-Type': 'application/json' });\r\n  TwitAccess.get('statuses/show/:id', { id: '718691141239975936' }) //718691141239975936, 717000298338750465, 693770454784425984, 718691141239975936\r\n    .then(tweets => res.end(JSON.stringify(tweets.data.user)));\r\n});\r\n\r\napp.get('*', (req, res) => {\r\n  res.status(404).sendFile('404.html', { root: 'public' });\r\n});\r\n\r\n// Listen on port 3000, IP defaults to 127.0.0.1 (localhost)\r\napp.listen(port, (err) => {\r\n  if (err) {\r\n    console.log(err);\r\n    return;\r\n  }\r\n\r\n  console.log(`Server running at http://localhost:${port}`);\r\n});\r\n"
  },
  {
    "__docId__": 226,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "app",
    "memberof": "src/server/server.js",
    "longname": "src/server/server.js~app",
    "access": null,
    "export": false,
    "importPath": "solid-octo-disco/src/server/server.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 227,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "port",
    "memberof": "src/server/server.js",
    "longname": "src/server/server.js~port",
    "access": null,
    "export": false,
    "importPath": "solid-octo-disco/src/server/server.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 228,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/server/tweetFinder.js",
    "memberof": null,
    "longname": "src/server/tweetFinder.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import { db } from './orientdb';\r\nimport { TweetBuilder, TweeterBuilder } from '../shared/data/databaseObjects';\r\nimport { newPromiseChain, flattenImmutableObject } from '../shared/utilities';\r\nimport { searchAndSaveFromTwitter, buildTweeterFromRaw, TwitAccess } from './twitterSearch';\r\n\r\nexport const MAX_TWEET_RESULTS = 500;\r\n\r\n/**\r\n * Searches our database for Tweets and returns them.\r\n * If the returned results are not satisfactory (such\r\n * as not enough relevant results, or they are too old,)\r\n * then the Twitter API will be called directly.\r\n * @param req A HTTP Request object\r\n * @param res A HTTP Response object\r\n * @returns {Promise.<T>|*}\r\n */\r\nexport const searchQuery = (req, res) => (\r\n  newPromiseChain()\r\n    .then(() => potentiallySearchTwitter(req.body.searchTwitter, req.body.searchTerms))\r\n    .then(() => Promise.all(req.body.searchTerms.map((queryItem) => searchDatabase(queryItem))))\r\n    .then((tweetResultsForAllQueries) => splatTogether(tweetResultsForAllQueries, 'OR'))\r\n    .then((splattedTweets) => getTweetsAsResults(splattedTweets))\r\n    .then((tweetsAsResults) => resultsToPresentableOutput(tweetsAsResults))\r\n    .then(\r\n      (presentableTweets) => {\r\n        res.writeHead(200, { 'Content-Type': 'application/json' });\r\n        res.end(JSON.stringify(presentableTweets));\r\n      },\r\n      (rejection) => {\r\n        console.warn(`Unable to search for query '${req.body.searchTerms}'`, rejection);\r\n        res.writeHead(500, { 'Content-Type': 'application/json' });\r\n        res.end('An unexpected internal error occurred.');\r\n      }\r\n    )\r\n);\r\n\r\n/**\r\n * May asynchronously search Twitter for new tweet results based on queries.\r\n * @param {Object} body { searchTwitter: true, searchTerms: ... }\r\n * @returns {Promise.<T>} Either resolves immediately or a promise for searching Twitter\r\n */\r\nconst potentiallySearchTwitter = (searchTwitter, searchTerms) => {\r\n  if (searchTwitter) {\r\n    const twitterQueries = buildTwitterQuery(searchTerms);\r\n    return Promise.all(\r\n      twitterQueries.map((twitterQuery) => searchAndSaveFromTwitter(twitterQuery))\r\n    );\r\n  } else {\r\n    return Promise.resolve();\r\n  }\r\n};\r\n\r\n/**\r\n * Given some search terms with param types, convert it to Twitter API\r\n * friendly queries.\r\n * @param searchTerms\r\n * @returns {Array} Some Twitter API queries, like [\"#arsenal OR @manchester\"]\r\n */\r\nexport const buildTwitterQuery = (searchTerms) => {\r\n  const maxTwitterQueryTerms = 10;\r\n  const joinKeyword = ' OR ';\r\n\r\n  const result = [];\r\n\r\n  let lastQuery = [];\r\n  searchTerms.forEach((searchTerm) => {\r\n    const actualTerm = searchTerm.query;\r\n    const termWithNoSpaces = actualTerm.replace(/ /g, '');\r\n    const currentQueryAddition = [];\r\n    let alreadyHadAuthorOrMention = false;\r\n\r\n    searchTerm.paramTypes\r\n      .filter((paramType) => paramType.selected)\r\n      .forEach((paramType) => {\r\n        switch (paramType.name) {\r\n        case 'keyword':\r\n          currentQueryAddition.push(`\"${actualTerm}\"`);\r\n          break;\r\n        case 'hashtag':\r\n          currentQueryAddition.push(`#${termWithNoSpaces}`);\r\n          break;\r\n        case 'author':\r\n        case 'mention':\r\n          if (!alreadyHadAuthorOrMention) {\r\n            alreadyHadAuthorOrMention = true;\r\n            currentQueryAddition.push(`@${termWithNoSpaces}`);\r\n          }\r\n          break;\r\n        default:\r\n          break;\r\n        }\r\n      });\r\n\r\n    if (lastQuery.length + currentQueryAddition.length <= maxTwitterQueryTerms) {\r\n      lastQuery = lastQuery.concat(currentQueryAddition);\r\n    } else {\r\n      result.push(lastQuery.join(joinKeyword));\r\n      lastQuery = currentQueryAddition;\r\n    }\r\n  });\r\n\r\n  if (lastQuery.length > 0) {\r\n    result.push(lastQuery.join(joinKeyword));\r\n  }\r\n\r\n  return result;\r\n};\r\n\r\nconst splatTogether = (allTweetResults, type) => {\r\n  if (type === 'OR') {\r\n    return unionTweets(allTweetResults);\r\n  } else {\r\n    throw (`Undefined splatting of type ${type} occurred. Type should be 'AND' or 'OR'.`);\r\n  }\r\n};\r\n\r\n/**\r\n * Given a list of resultLists, union all the Tweets together.\r\n * That is, given the following list of Tweet ids:\r\n *  [[1,2], [2, 3], [1, 4, 5]]\r\n * return\r\n *  [1,2,3,4,5]\r\n * @param {Array[]} allTweetResults - A list of Tweet result lists.\r\n * @return {[tweetDatas]} A list of unique Tweets\r\n */\r\nexport const unionTweets = (allTweetResults) => {\r\n  const dict = {};\r\n\r\n  // Create a dictionary of all Tweets, effectively cancelling out any duplicates\r\n  allTweetResults.forEach((tweetList) =>\r\n    tweetList.forEach((tweetData) =>\r\n      dict[tweetData.tweet.id] = tweetData\r\n    )\r\n  );\r\n\r\n  const union = [];\r\n  for (const key in dict) {\r\n    union.push(dict[key]);\r\n  }\r\n\r\n  return union;\r\n};\r\n\r\nconst resultsToPresentableOutput = (results) => (\r\n  {\r\n    data: {\r\n      count: results.length,\r\n      records: results,\r\n    },\r\n  }\r\n);\r\n\r\nconst searchDatabase = (searchObject) => (\r\n  newPromiseChain()\r\n    .then(() => Promise.all(\r\n      searchObject.paramTypes\r\n        .filter((paramType) => paramType.selected)\r\n        .map((paramType) => searchByParamType(searchObject, paramType.name))\r\n      )\r\n    )\r\n    .then((searchResults) => searchResults.reduce(\r\n      (previous, current) => previous.concat(current), []\r\n    ))\r\n    .then((tweetRecords) => makeTweets(tweetRecords))\r\n    .then(\r\n      (resolved) => resolved,\r\n      (rejection) => console.warn('Major error querying the database.', rejection)\r\n    )\r\n);\r\n\r\nconst searchByParamType = (searchObject, paramType) => {\r\n  switch (paramType) {\r\n  case 'keyword': return searchByKeyword(searchObject.query);\r\n  case 'author': return searchByAuthor(searchObject.query);\r\n  case 'mention': return searchByMention(searchObject.query);\r\n  case 'hashtag': return searchByHashtag(searchObject.query);\r\n  }\r\n\r\n  throw (`Invalid paramType for database Tweet searching: '${paramType}'. Should be [author, hashtag, keyword, mention].`);\r\n};\r\n\r\nconst searchByKeyword = (keyword) => {\r\n  const tweetSelection = makeTweetQuerySelectingFrom(\r\n    'SELECT FROM tweet WHERE content LUCENE :query'\r\n  );\r\n  return db.query(tweetSelection, { params: { query: normaliseQueryTerm(keyword), limit: MAX_TWEET_RESULTS } });\r\n};\r\n\r\nconst searchByAuthor = (author) => {\r\n  const tweetSelection = makeTweetQuerySelectingFrom(\r\n    'TRAVERSE out(\\'TWEETED\\') FROM (SELECT FROM Tweeter WHERE name LUCENE :query OR handle LUCENE :query)'\r\n  );\r\n  return db.query(tweetSelection, { params: { query: normaliseQueryTerm(author), limit: MAX_TWEET_RESULTS } });\r\n};\r\n\r\nconst searchByMention = (mention) => {\r\n  const tweetSelection = makeTweetQuerySelectingFrom(\r\n    'TRAVERSE in(\\'MENTIONS\\') FROM (SELECT FROM Tweeter WHERE name LUCENE :query OR handle LUCENE :query)'\r\n  );\r\n  return db.query(tweetSelection, { params: { query: normaliseQueryTerm(mention), limit: MAX_TWEET_RESULTS } });\r\n};\r\n\r\nconst searchByHashtag = (hashtag) => {\r\n  const tweetSelection = makeTweetQuerySelectingFrom(\r\n    'TRAVERSE in(\\'HAS_HASHTAG\\') FROM (SELECT FROM hashtag WHERE content LUCENE :query)'\r\n  );\r\n  return db.query(tweetSelection, { params: { query: normaliseQueryTerm(hashtag), limit: MAX_TWEET_RESULTS } });\r\n};\r\n\r\n/**\r\n * Make a query more search-friendly in our database.\r\n * Multiple term queries will receive quotes to preserve order\r\n * e.g. \"Manchester United\" won't return results for \"united manchester\"\r\n * Long single term queries will receive ~ for fuzzy matching\r\n * @param term Some phrase, like `manchester united`\r\n * @returns {*} The normalised term.\r\n */\r\nexport const normaliseQueryTerm = (query) => {\r\n  const terms = query.split(' ');\r\n\r\n  if (terms.length === 1) {\r\n    if (query.length > 4) {\r\n      return `${query}~`; // fuzzy search\r\n    } else {\r\n      return query;\r\n    }\r\n  } else {\r\n    return `\"${query}\"`; // add quotes to preserve order\r\n  }\r\n};\r\n\r\nconst makeTweetQuerySelectingFrom = (from) => (\r\n  `SELECT `\r\n    + '  *' // All the tweet data\r\n    + ', in(\\'TWEETED\\').id AS authorId ' // Now the tweet info\r\n    + ', in(\\'TWEETED\\').name AS authorName '\r\n    + ', in(\\'TWEETED\\').handle AS authorHandle '\r\n    + ', in(\\'TWEETED\\').profile_image_url as authorProfileImage '\r\n    + ', in(\\'TWEETED\\').is_verified as isVerified '\r\n    + ', in(\\'TWEETED\\').is_user_mention as isUserMention '\r\n    + ` FROM (${from}) ` // Selected from a subset of tweets\r\n    + ' WHERE @class = \\'Tweet\\' ' // Don't accidentally select authors or hastags etc\r\n    + ' ORDER BY date DESC ' // Might be irrelevant\r\n    + ' UNWIND authorId, authorName, authorHandle, authorProfileImage, isUserMention, isVerified ' // Converts from ['Steve'] to 'Steve'\r\n    + ' LIMIT :limit ' // Don't select too many results\r\n);\r\n\r\nconst makeTweets = (tweetRecords) => (\r\n  tweetRecords\r\n    .filter(tweetRecord => tweetRecord.id && tweetRecord.authorId)\r\n    .map(tweetRecord => makeTweetAndAuthorFromDatabaseTweetRecord(tweetRecord))\r\n);\r\n\r\nconst makeTweetAndAuthorFromDatabaseTweetRecord = (tweetRecord) => (\r\n  {\r\n    tweet: flattenImmutableObject(buildTweetFromDatabaseRecord(tweetRecord)),\r\n    author: flattenImmutableObject(buildTweeterFromDatabaseTweetRecord(tweetRecord)),\r\n  }\r\n);\r\n\r\nconst buildTweeterFromDatabaseTweetRecord = (record) => {\r\n  // will spit out which record couldn't be processed.\r\n  if (!(record.authorId && record.authorName && record.authorHandle && record.authorProfileImage)) {\r\n    console.log('this record is invalid and cannot be processed', record);\r\n  }\r\n  return (\r\n    TweeterBuilder()\r\n      .id(record.authorId)\r\n      .name(record.authorName)\r\n      .handle(record.authorHandle)\r\n      .profile_image_url(record.authorProfileImage)\r\n      .is_user_mention(record.isUserMention)\r\n      .is_verified(record.isVerified)\r\n      .build()\r\n  );\r\n};\r\n\r\nconst buildTweetFromDatabaseRecord = (record) => (\r\n  TweetBuilder()\r\n    .id(record.id)\r\n    .content(record.content)\r\n    .date(record.date.toISOString())\r\n    .likes(record.likes)\r\n    .retweets(record.retweets)\r\n    .longitude(record.longitude)\r\n    .latitude(record.latitude)\r\n    .contains_a_quoted_tweet(record.contains_a_quoted_tweet)\r\n    .image_url(record.image_url)\r\n    .build()\r\n);\r\n\r\nconst getTweetsAsResults = (data) => (\r\n  data.map(\r\n    (tweet) => ({ data: tweet.tweet, author: tweet.author, source: 'twitter' })\r\n  )\r\n);\r\n\r\nexport const getTweetFromDb = (res, id) => (\r\n  newPromiseChain()\r\n    .then(() => (\r\n       db.query(\r\n         makeTweetQuerySelectingFrom('SELECT FROM tweet WHERE id =:id'), { params: { id, limit: 1 }, }\r\n       )\r\n    ))\r\n    .then((results) => makeTweetAndAuthorFromDatabaseTweetRecord(results[0]))\r\n    .then(\r\n      (response) => res.status(200).end(JSON.stringify(response)),\r\n      (rej) => res.status(500).end(\r\n        JSON.stringify({\r\n          message: 'Unable to get tweet from the database.',\r\n          reason: rej,\r\n        })\r\n      )\r\n    )\r\n);\r\n\r\n/**\r\n * Used in ./twitterSearch.js:169.\r\n * Tries to get the missing user tweeter for the original tweet from DB\r\n * If not in DB then make a call to twitter to retrieve the whole tweet that contains the user tweeter\r\n * @param String representing the original tweet's id\r\n * @return Tweeter An Immutable Object representing the tweet's user\r\n */\r\nexport const getOriginalTweetUserFromTweet = (tweetId) =>\r\n  newPromiseChain()\r\n    .then(() => (\r\n       db.query(\r\n         makeTweetQuerySelectingFrom('SELECT FROM tweet WHERE id =:id'), { params: { id: tweetId, limit: 1 }, }\r\n       )\r\n    ))\r\n    .then(tweetRecords => {\r\n      if (tweetRecords.length === 1) {\r\n        return buildTweeterFromDatabaseTweetRecord(tweetRecords[0]);\r\n      }\r\n\r\n      return TwitAccess.get('statuses/show/:id', { id: tweetId })\r\n        .then(tweetResult => buildTweeterFromRaw(tweetResult.data.user, false));\r\n    });\r\n"
  },
  {
    "__docId__": 229,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "MAX_TWEET_RESULTS",
    "memberof": "src/server/tweetFinder.js",
    "longname": "src/server/tweetFinder.js~MAX_TWEET_RESULTS",
    "access": null,
    "export": true,
    "importPath": "solid-octo-disco/src/server/tweetFinder.js",
    "importStyle": "{MAX_TWEET_RESULTS}",
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 230,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "searchQuery",
    "memberof": "src/server/tweetFinder.js",
    "longname": "src/server/tweetFinder.js~searchQuery",
    "access": null,
    "export": true,
    "importPath": "solid-octo-disco/src/server/tweetFinder.js",
    "importStyle": "{searchQuery}",
    "description": "Searches our database for Tweets and returns them.\nIf the returned results are not satisfactory (such\nas not enough relevant results, or they are too old,)\nthen the Twitter API will be called directly.",
    "lineNumber": 17,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise.<T>|*}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "req",
        "description": "A HTTP Request object"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "A HTTP Response object"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise.<T>",
        "*"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 231,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "potentiallySearchTwitter",
    "memberof": "src/server/tweetFinder.js",
    "longname": "src/server/tweetFinder.js~potentiallySearchTwitter",
    "access": null,
    "export": false,
    "importPath": "solid-octo-disco/src/server/tweetFinder.js",
    "importStyle": null,
    "description": "May asynchronously search Twitter for new tweet results based on queries.",
    "lineNumber": 42,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise.<T>} Either resolves immediately or a promise for searching Twitter"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "body",
        "description": "{ searchTwitter: true, searchTerms: ... }"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise.<T>"
      ],
      "spread": false,
      "description": "Either resolves immediately or a promise for searching Twitter"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 232,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "buildTwitterQuery",
    "memberof": "src/server/tweetFinder.js",
    "longname": "src/server/tweetFinder.js~buildTwitterQuery",
    "access": null,
    "export": true,
    "importPath": "solid-octo-disco/src/server/tweetFinder.js",
    "importStyle": "{buildTwitterQuery}",
    "description": "Given some search terms with param types, convert it to Twitter API\nfriendly queries.",
    "lineNumber": 59,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array} Some Twitter API queries, like [\"#arsenal OR @manchester\"]"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "searchTerms",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "Some Twitter API queries, like [\"#arsenal OR @manchester\"]"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 233,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "splatTogether",
    "memberof": "src/server/tweetFinder.js",
    "longname": "src/server/tweetFinder.js~splatTogether",
    "access": null,
    "export": false,
    "importPath": "solid-octo-disco/src/server/tweetFinder.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 109,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 234,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "unionTweets",
    "memberof": "src/server/tweetFinder.js",
    "longname": "src/server/tweetFinder.js~unionTweets",
    "access": null,
    "export": true,
    "importPath": "solid-octo-disco/src/server/tweetFinder.js",
    "importStyle": "{unionTweets}",
    "description": "Given a list of resultLists, union all the Tweets together.\nThat is, given the following list of Tweet ids:\n [[1,2], [2, 3], [1, 4, 5]]\nreturn\n [1,2,3,4,5]",
    "lineNumber": 126,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array[]"
        ],
        "spread": false,
        "optional": false,
        "name": "allTweetResults",
        "description": "A list of Tweet result lists."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "[tweetDatas]"
      ],
      "spread": false,
      "description": "A list of unique Tweets"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 235,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "resultsToPresentableOutput",
    "memberof": "src/server/tweetFinder.js",
    "longname": "src/server/tweetFinder.js~resultsToPresentableOutput",
    "access": null,
    "export": false,
    "importPath": "solid-octo-disco/src/server/tweetFinder.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 144,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 236,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "searchDatabase",
    "memberof": "src/server/tweetFinder.js",
    "longname": "src/server/tweetFinder.js~searchDatabase",
    "access": null,
    "export": false,
    "importPath": "solid-octo-disco/src/server/tweetFinder.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 153,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 237,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "searchByParamType",
    "memberof": "src/server/tweetFinder.js",
    "longname": "src/server/tweetFinder.js~searchByParamType",
    "access": null,
    "export": false,
    "importPath": "solid-octo-disco/src/server/tweetFinder.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 171,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 238,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "searchByKeyword",
    "memberof": "src/server/tweetFinder.js",
    "longname": "src/server/tweetFinder.js~searchByKeyword",
    "access": null,
    "export": false,
    "importPath": "solid-octo-disco/src/server/tweetFinder.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 182,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 239,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "searchByAuthor",
    "memberof": "src/server/tweetFinder.js",
    "longname": "src/server/tweetFinder.js~searchByAuthor",
    "access": null,
    "export": false,
    "importPath": "solid-octo-disco/src/server/tweetFinder.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 189,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 240,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "searchByMention",
    "memberof": "src/server/tweetFinder.js",
    "longname": "src/server/tweetFinder.js~searchByMention",
    "access": null,
    "export": false,
    "importPath": "solid-octo-disco/src/server/tweetFinder.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 196,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 241,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "searchByHashtag",
    "memberof": "src/server/tweetFinder.js",
    "longname": "src/server/tweetFinder.js~searchByHashtag",
    "access": null,
    "export": false,
    "importPath": "solid-octo-disco/src/server/tweetFinder.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 203,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 242,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "normaliseQueryTerm",
    "memberof": "src/server/tweetFinder.js",
    "longname": "src/server/tweetFinder.js~normaliseQueryTerm",
    "access": null,
    "export": true,
    "importPath": "solid-octo-disco/src/server/tweetFinder.js",
    "importStyle": "{normaliseQueryTerm}",
    "description": "Make a query more search-friendly in our database.\nMultiple term queries will receive quotes to preserve order\ne.g. \"Manchester United\" won't return results for \"united manchester\"\nLong single term queries will receive ~ for fuzzy matching",
    "lineNumber": 218,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{*} The normalised term."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "term",
        "description": "Some phrase, like `manchester united`"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "The normalised term."
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 243,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "makeTweetQuerySelectingFrom",
    "memberof": "src/server/tweetFinder.js",
    "longname": "src/server/tweetFinder.js~makeTweetQuerySelectingFrom",
    "access": null,
    "export": false,
    "importPath": "solid-octo-disco/src/server/tweetFinder.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 232,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 244,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "makeTweets",
    "memberof": "src/server/tweetFinder.js",
    "longname": "src/server/tweetFinder.js~makeTweets",
    "access": null,
    "export": false,
    "importPath": "solid-octo-disco/src/server/tweetFinder.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 248,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 245,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "makeTweetAndAuthorFromDatabaseTweetRecord",
    "memberof": "src/server/tweetFinder.js",
    "longname": "src/server/tweetFinder.js~makeTweetAndAuthorFromDatabaseTweetRecord",
    "access": null,
    "export": false,
    "importPath": "solid-octo-disco/src/server/tweetFinder.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 254,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 246,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "buildTweeterFromDatabaseTweetRecord",
    "memberof": "src/server/tweetFinder.js",
    "longname": "src/server/tweetFinder.js~buildTweeterFromDatabaseTweetRecord",
    "access": null,
    "export": false,
    "importPath": "solid-octo-disco/src/server/tweetFinder.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 261,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 247,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "buildTweetFromDatabaseRecord",
    "memberof": "src/server/tweetFinder.js",
    "longname": "src/server/tweetFinder.js~buildTweetFromDatabaseRecord",
    "access": null,
    "export": false,
    "importPath": "solid-octo-disco/src/server/tweetFinder.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 278,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 248,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "getTweetsAsResults",
    "memberof": "src/server/tweetFinder.js",
    "longname": "src/server/tweetFinder.js~getTweetsAsResults",
    "access": null,
    "export": false,
    "importPath": "solid-octo-disco/src/server/tweetFinder.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 292,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 249,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "getTweetFromDb",
    "memberof": "src/server/tweetFinder.js",
    "longname": "src/server/tweetFinder.js~getTweetFromDb",
    "access": null,
    "export": true,
    "importPath": "solid-octo-disco/src/server/tweetFinder.js",
    "importStyle": "{getTweetFromDb}",
    "description": null,
    "lineNumber": 298,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 250,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "getOriginalTweetUserFromTweet",
    "memberof": "src/server/tweetFinder.js",
    "longname": "src/server/tweetFinder.js~getOriginalTweetUserFromTweet",
    "access": null,
    "export": true,
    "importPath": "solid-octo-disco/src/server/tweetFinder.js",
    "importStyle": "{getOriginalTweetUserFromTweet}",
    "description": "Used in ./twitterSearch.js:169.\nTries to get the missing user tweeter for the original tweet from DB\nIf not in DB then make a call to twitter to retrieve the whole tweet that contains the user tweeter",
    "lineNumber": 324,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "String",
        "description": "representing the original tweet's id"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "Tweeter An Immutable Object representing the tweet's user"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 251,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/server/tweetFinder.spec.js",
    "memberof": null,
    "longname": "src/server/tweetFinder.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import { should } from 'chai';\r\nimport * as tweetFinder from './tweetFinder';\r\n\r\ndescribe('#TweetFinder', () => {\r\n  describe('Unioning tweets', () => {\r\n    it('should return an empty list given an empty list', () => {\r\n      const inputResultList = [];\r\n      const expected = [];\r\n\r\n      tweetFinder.unionTweets(inputResultList).should.deep.equals(expected);\r\n    });\r\n\r\n    it('should return the identity of a single resultlist', () => {\r\n      const inputResultList = [[makeTweetWithId(10)]];\r\n      const expected = [makeTweetWithId(10)];\r\n\r\n      tweetFinder.unionTweets(inputResultList).should.deep.equals(expected);\r\n    });\r\n\r\n    it('should append two unique lists together', () => {\r\n      const inputResultList = [[makeTweetWithId(10)], [makeTweetWithId(33)]];\r\n      const expected = [makeTweetWithId(10), makeTweetWithId(33)];\r\n\r\n      tweetFinder.unionTweets(inputResultList).should.deep.equals(expected);\r\n    });\r\n\r\n    it('should union two non-unique lists together', () => {\r\n      const inputResultList = [[makeTweetWithId(10), makeTweetWithId(50)], [makeTweetWithId(33), makeTweetWithId(50)]];\r\n      const expected = [makeTweetWithId(10), makeTweetWithId(33), makeTweetWithId(50)];\r\n\r\n      tweetFinder.unionTweets(inputResultList).should.deep.equals(expected);\r\n    });\r\n\r\n    const makeTweetWithId = (id, content='Hello world') => ({ tweet: { id: id, content: content } });\r\n\r\n  });\r\n});\r\n\r\ndescribe('#QueryBuilder', () => {\r\n  const makeQuery = (term, paramTypes) => {\r\n    const result = {\r\n      query: term,\r\n      paramTypes: [],\r\n    };\r\n    for (const paramTypeName of paramTypes) {\r\n      result.paramTypes.push({\r\n        name: paramTypeName,\r\n        selected: true,\r\n      });\r\n    }\r\n    return result;\r\n  };\r\n\r\n  it('should return the empty array for an empty array', () => {\r\n    tweetFinder.buildTwitterQuery([]).should.deep.equal([]);\r\n  });\r\n\r\n  it('should build a single Twitter query for a single search query', () => {\r\n    tweetFinder.buildTwitterQuery(\r\n      [\r\n        makeQuery('arsenal', ['keyword', 'author', 'hashtag', 'mention']),\r\n      ]\r\n    ).should.deep.equal(\r\n      [\r\n        '\"arsenal\" OR @arsenal OR #arsenal',\r\n      ]\r\n    );\r\n  });\r\n\r\n  it('should build a single Twitter query for a single search query with differently ordered paraas', () => {\r\n    tweetFinder.buildTwitterQuery(\r\n      [\r\n        makeQuery('arsenal', ['hashtag', 'keyword', 'author', 'mention']),\r\n      ]\r\n    ).should.deep.equal(\r\n      [\r\n        '#arsenal OR \"arsenal\" OR @arsenal',\r\n      ]\r\n    );\r\n  });\r\n\r\n  it('should remove spaces in authors/mentions and hashtags', () => {\r\n    tweetFinder.buildTwitterQuery(\r\n      [\r\n        makeQuery('manchester united fc', ['keyword', 'author', 'hashtag', 'mention']),\r\n      ]\r\n    ).should.deep.equal(\r\n      [\r\n        '\"manchester united fc\" OR @manchesterunitedfc OR #manchesterunitedfc',\r\n      ]\r\n    );\r\n  });\r\n\r\n  it('should build a single Twitter query for a multiple search query', () => {\r\n    tweetFinder.buildTwitterQuery(\r\n      [\r\n        makeQuery('arsenal', ['keyword', 'author', 'hashtag', 'mention']),\r\n        makeQuery('spurs', ['keyword', 'author', 'hashtag', 'mention']),\r\n      ]\r\n    ).should.deep.equal(\r\n      [\r\n        '\"arsenal\" OR @arsenal OR #arsenal OR \"spurs\" OR @spurs OR #spurs',\r\n      ]\r\n    );\r\n  });\r\n\r\n  it('should build two Twitter queries for a large multiple search query, splitting on query term', () => {\r\n    tweetFinder.buildTwitterQuery(\r\n      [\r\n        makeQuery('arsenal', ['keyword', 'author', 'hashtag', 'mention']),\r\n        makeQuery('spurs', ['keyword', 'author', 'hashtag', 'mention']),\r\n        makeQuery('manchester', ['keyword', 'author', 'hashtag', 'mention']),\r\n        makeQuery('liverpool', ['keyword', 'author', 'hashtag', 'mention']),\r\n      ]\r\n    ).should.deep.equal(\r\n      [\r\n        '\"arsenal\" OR @arsenal OR #arsenal OR \"spurs\" OR @spurs OR #spurs OR \"manchester\" OR @manchester OR #manchester',\r\n        '\"liverpool\" OR @liverpool OR #liverpool',\r\n      ]\r\n    );\r\n  });\r\n\r\n  it('should be able to search just keywords', () => {\r\n    tweetFinder.buildTwitterQuery(\r\n      [\r\n        makeQuery('arsenal', ['keyword']),\r\n      ]\r\n    ).should.deep.equal(\r\n      [\r\n        '\"arsenal\"',\r\n      ]\r\n    );\r\n  });\r\n\r\n  it('should be able to search just hashtags', () => {\r\n    tweetFinder.buildTwitterQuery(\r\n      [\r\n        makeQuery('arsenal', ['hashtag']),\r\n      ]\r\n    ).should.deep.equal(\r\n      [\r\n        '#arsenal',\r\n      ]\r\n    );\r\n  });\r\n\r\n  it('should conflate mention and author', () => {\r\n    tweetFinder.buildTwitterQuery(\r\n      [\r\n        makeQuery('arsenal', ['mention']),\r\n        makeQuery('spurs', ['author']),\r\n      ]\r\n    ).should.deep.equal(\r\n      [\r\n        '@arsenal OR @spurs',\r\n      ]\r\n    );\r\n  });\r\n});\r\n\r\ndescribe('#QueryNormaliser', () => {\r\n  it('leaves short single terms alone', () => {\r\n    tweetFinder.normaliseQueryTerm('hi').should.equal('hi');\r\n  });\r\n\r\n  it('fuzzes longer single terms', () => {\r\n    tweetFinder.normaliseQueryTerm('manchester').should.equal('manchester~');\r\n  });\r\n\r\n  it('surrounds multiple term queries in quotes', () => {\r\n    tweetFinder.normaliseQueryTerm('manchester united').should.equal('\"manchester united\"');\r\n  });\r\n});\r\n"
  },
  {
    "__docId__": 252,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/server/twitterSearch.js",
    "memberof": null,
    "longname": "src/server/twitterSearch.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "const Twit = require('twit');\r\nconst moment = require('moment');\r\nimport { db } from './orientdb';\r\nimport { linkTweetToHashtag, linkTweeterToTweet, linkTweeterToRetweet, linkTweetToTweeterViaMention,\r\n  linkTweetToPlace, linkPlaceToCountry, linkQuoteTweetToOriginalTweet,\r\n  upsertHashtag, upsertTweet, upsertTweeter, upsertPlace, upsertCountry\r\n} from '../shared/data/databaseInsertActions';\r\nimport { getOriginalTweetUserFromTweet } from './tweetFinder';\r\nimport * as Builders from '../shared/data/databaseObjects';\r\nimport { newPromiseChain } from '../shared/utilities';\r\n\r\nexport const TWITTER_ENABLED = true;\r\nconst MAX_TWEETS_FROM_TWITTER_API = 100;\r\n\r\n// These keys should be hidden in a private config file or environment variables\r\n// For simplicity of this assignment, they will be visible here\r\nexport const TwitAccess = new Twit({\r\n  access_token: '1831536590-kX7HPRraGcbs5t9xz1wg0QdsvbOAW4pFK5L0Y68',\r\n  access_token_secret: 'ceYqZAulg2MT89Jw11rA44FOwHOFcEccFv9HXFIG9ckJf',\r\n  consumer_key: 'YiSLB0kOlsTd21UGYT32YOUgg',\r\n  consumer_secret: '78b5VrGzkcIkpmftLdlFwirraelPRq2t5bFlgEcMkfaQqQh1Mb',\r\n  timeout_ms: 60 * 1000,  // optional HTTP request timeout to apply to all requests.\r\n});\r\n\r\n/**\r\n * Convert some raw status from the Twitter API into a proper immutable Tweet object.\r\n * @param rawTweet From the Twitter API.\r\n * @returns {ImmutableTweet}\r\n */\r\nconst buildTweetFromRaw = (rawTweet) => {\r\n  const coordinates = findLatitudeLongitude(rawTweet);\r\n  const image_url = getImageUrl(rawTweet);\r\n\r\n  return Builders.TweetBuilder()\r\n    .id(rawTweet.id_str)\r\n    .content(rawTweet.text)\r\n    .date(moment(new Date(rawTweet.created_at)).format('YYYY-MM-DD HH:mm:ss'))\r\n    .likes(rawTweet.favorite_count)\r\n    .retweets(rawTweet.retweet_count)\r\n    .latitude(coordinates.latitude)\r\n    .longitude(coordinates.longitude)\r\n    .contains_a_quoted_tweet(rawTweet.quoted_status ? rawTweet.quoted_status.id_str : '')\r\n    .image_url(image_url)\r\n    .build();\r\n};\r\n\r\n/**\r\n  * Finds if Latitude/Longitude coordinates exist in raw tweet, otherwise return 0.0 for both\r\n  * @param rawTweet From the Twitter API.\r\n  * @returns [latitude, longitude]\r\n  */\r\nconst findLatitudeLongitude = (rawTweet) => {\r\n  let test;\r\n  try {\r\n    if (rawTweet.geo) {\r\n      test = 'geo';\r\n      if (rawTweet.geo.coordinate) {\r\n        return {\r\n          latitude: rawTweet.geo.coordinate[0],\r\n          longitude: rawTweet.geo.coordinate[1],\r\n        };\r\n      } else {\r\n        return {\r\n          latitude: rawTweet.geo.coordinates[0],\r\n          longitude: rawTweet.geo.coordinates[1],\r\n        };\r\n      }\r\n    } else if (rawTweet.coordinates) {\r\n      test = 'coord';\r\n      return {\r\n        latitude: rawTweet.coordinates.coordinate[1],\r\n        longitude: rawTweet.coordinates.coordinate[0],\r\n      };\r\n    } else if (rawTweet.place) {\r\n      test = 'place';\r\n      return {\r\n        latitude: rawTweet.place.bounding_box.coordinates[0][0][1],\r\n        longitude: rawTweet.place.bounding_box.coordinates[0][0][0],\r\n      };\r\n    }\r\n  } catch (err) {\r\n    console.warn(`Error parsing ${test} data in tweet #${rawTweet.id_str}.`);\r\n  }\r\n\r\n  return {\r\n    latitude: 0.0,\r\n    longitude: 0.0,\r\n  };\r\n};\r\n\r\n/**\r\n * Pulls the image url out of a tweet if it has one.\r\n * @param rawTweet\r\n * @returns {*} A direct link to the image being displayed\r\n */\r\nconst getImageUrl = (rawTweet) => {\r\n  try {\r\n    const media = rawTweet.entities.media[0];\r\n    if (media.type === 'photo') {\r\n      return media.media_url_https;\r\n    }\r\n  } catch (err) {\r\n    return 'none';\r\n  }\r\n\r\n  return 'none';\r\n}\r\n\r\n/**\r\n * Convert some raw user from the Twitter API into a proper immutable Tweeter object.\r\n * @param rawTweeter From the Twitter API.\r\n * @param Boolean to signify if the passed in rawTweeter is a mention object\r\n * or a full user object that has a profile_image_url_https\r\n * @returns {ImmutableTweet}\r\n */\r\nexport const buildTweeterFromRaw = (rawTweeter, isMentionUser) => {\r\n  const tweeter = Builders.TweeterBuilder()\r\n    .id(rawTweeter.id_str)\r\n    .name(rawTweeter.name)\r\n    .handle(rawTweeter.screen_name);\r\n\r\n  if (isMentionUser) {\r\n    tweeter\r\n      .profile_image_url('none')\r\n      .is_verified(false)\r\n      .is_user_mention(true);\r\n  } else {\r\n    tweeter\r\n      .profile_image_url(rawTweeter.profile_image_url_https)\r\n      .is_verified(rawTweeter.verified)\r\n      .is_user_mention(false);\r\n  }\r\n\r\n  return tweeter.build();\r\n};\r\n\r\nconst buildPlaceFromRaw = (rawPlace) => (\r\n  Builders.PlaceBuilder()\r\n    .id(rawPlace.id)\r\n    .name(rawPlace.name)\r\n    .full_name(rawPlace.full_name)\r\n    .type(rawPlace.place_type)\r\n    .build()\r\n);\r\n\r\n/**\r\n * Given some raw status we know is a retweet, insert it and add a RETWEETED link.\r\n * @param db The OrientDB instance\r\n * @param retweeter An immutable Tweeter object representing the author of the rawTweet\r\n * @param rawRetweet A raw status from the Twitter API representing a retweet\r\n * @returns {Promise}\r\n */\r\nconst processRawRetweet = (db, retweeter, rawRetweet) => {\r\n  const originalTweeter = buildTweeterFromRaw(rawRetweet.user, false);\r\n  const originalTweet = buildTweetFromRaw(rawRetweet);\r\n  const rawQuotedStatus = rawRetweet.quoted_status;\r\n\r\n  return newPromiseChain()\r\n    .then(() => upsertTweeter(db, retweeter))\r\n    .then(() => {\r\n      // if the retweet is a quoted tweet then process the quote tweet\r\n      // link the quote tweet to the retweet\r\n      if (rawQuotedStatus) {\r\n        return processQuoteTweet(db, rawRetweet, rawQuotedStatus);\r\n      }\r\n\r\n      return processRawOriginalTweet(db, rawRetweet, originalTweeter);\r\n    })\r\n    .then(() => linkTweeterToRetweet(db, retweeter, originalTweet));\r\n};\r\n\r\n/**\r\n * Given some raw status we know is a quote, insert it and a QUOTED link.\r\n * @param db The OrientDB instance\r\n * @param rawQuoteTweet A raw status from the twitter API which represents the tweet that quoted the rawOriginalTweet\r\n * @param rawOriginalTweet A raw status from the twitter API which represents the tweet that was quoted\r\n * @returns {Promise}\r\n */\r\nconst processQuoteTweet = (db, rawQuoteTweet, rawOriginalTweet) => {\r\n  const originalTweet = buildTweetFromRaw(rawOriginalTweet);\r\n  const quoteTweet = buildTweetFromRaw(rawQuoteTweet);\r\n  const quoteTweeter = buildTweeterFromRaw(rawQuoteTweet.user, false);\r\n\r\n  return newPromiseChain()\r\n    .then(() => processRawOriginalTweet(db, rawQuoteTweet, quoteTweeter))\r\n    .then(() => {\r\n      // There's an edge case where the quote in a quoted tweet doesn't have a user Object\r\n      // found this is particular to a certain android client\r\n      if (rawOriginalTweet.user) {\r\n        return buildTweeterFromRaw(rawOriginalTweet.user, false);\r\n      }\r\n\r\n      // If there isn't a user then try to get the user (see ./twitterFinder.js:317-331)\r\n      return getOriginalTweetUserFromTweet(rawOriginalTweet.id_str);\r\n    })\r\n    .then((originalTweeter) => processRawOriginalTweet(db, rawOriginalTweet, originalTweeter))\r\n    .then(() => linkQuoteTweetToOriginalTweet(db, quoteTweet, originalTweet));\r\n};\r\n\r\n/**\r\n * Link a tweet to all of its hashtags\r\n * @param db The OrientDB instance\r\n * @param rawHashtags The original hashtags\r\n * @param tweet\r\n * @returns {Promise}\r\n */\r\nconst linkTweetToHashtags = (db, rawHashtags, tweet) => (\r\n  Promise.all(\r\n    rawHashtags.map((rawHashtag) => {\r\n      const hashtag = Builders.HashtagBuilder().content(rawHashtag.text.toLowerCase()).build();\r\n\r\n      return newPromiseChain()\r\n        .then(() => upsertHashtag(db, hashtag))\r\n        .then(() => linkTweetToHashtag(db, tweet, hashtag));\r\n    })\r\n  )\r\n);\r\n\r\nconst linkTweetToMentions = (db, rawMentions, tweet) => (\r\n  Promise.all(\r\n    rawMentions.map((rawMention) => {\r\n      const mentionedTweeter = buildTweeterFromRaw(rawMention, true);\r\n\r\n      return newPromiseChain()\r\n        .then(() => upsertTweeter(db, mentionedTweeter))\r\n        .then(() => linkTweetToTweeterViaMention(db, tweet, mentionedTweeter));\r\n    })\r\n  )\r\n);\r\n\r\n/**\r\n * Given a raw status we know is not a retweet, insert it and upsert the user.\r\n * @param db The OrientDB instance\r\n * @param rawTweet A raw status from the Twitter API\r\n * @param originalTweeter An immutable Tweeter object\r\n * @returns {Promise}\r\n */\r\nconst processRawOriginalTweet = (db, rawTweet, originalTweeter) => {\r\n  const tweet = buildTweetFromRaw(rawTweet);\r\n  const rawHashtags = rawTweet.entities.hashtags;\r\n  const rawMentions = rawTweet.entities.user_mentions;\r\n\r\n  return newPromiseChain()\r\n    .then(() => upsertTweet(db, tweet))\r\n    .then(() => upsertTweeter(db, originalTweeter))\r\n    .then(() => linkTweeterToTweet(db, originalTweeter, tweet))\r\n    .then(() => linkTweetToLocation(db, tweet, rawTweet.place))\r\n    .then(() => linkTweetToHashtags(db, rawHashtags, tweet))\r\n    .then(() => linkTweetToMentions(db, rawMentions, tweet));\r\n};\r\n\r\n/**\r\n * Given a tweet, if it has a place upsert the place and link it to a country\r\n * @param db the OrientDB instance\r\n * @param tweet A processed tweet to link to a place\r\n * @param rawTweet A raw tweet's place property from the Twitter API\r\n * @returns {Promise}\r\n */\r\nconst linkTweetToLocation = (db, tweet, rawPlace) => {\r\n  if (rawPlace) {\r\n    const place = buildPlaceFromRaw(rawPlace);\r\n    const country = Builders.CountryBuilder()\r\n      .code(rawPlace.country_code)\r\n      .name(rawPlace.country)\r\n      .build();\r\n\r\n    return newPromiseChain()\r\n      .then(() => upsertPlace(db, place))\r\n      .then(() => upsertCountry(db, country))\r\n      .then(() => linkTweetToPlace(db, tweet, place))\r\n      .then(() => linkPlaceToCountry(db, place, country));\r\n  }\r\n\r\n  return Promise.resolve();\r\n};\r\n\r\n/**\r\n * Given a raw tweet, extract information about the tweeter,\r\n * if it was a retweet, etc, and store all information in\r\n * the database.\r\n * @param db The OrientDB instance\r\n * @param rawTweet The original status object from the Twitter API\r\n * @returns {Promise.<TwitAccess>}\r\n */\r\nconst processTweet = (db, rawTweet) => {\r\n  const tweeter = buildTweeterFromRaw(rawTweet.user, false);\r\n  const rawRetweetedStatus = rawTweet.retweeted_status;\r\n  const rawQuotedStatus = rawTweet.quoted_status;\r\n\r\n  if (rawRetweetedStatus) {\r\n    return processRawRetweet(db, tweeter, rawRetweetedStatus);\r\n  }\r\n  if (rawQuotedStatus) {\r\n    return processQuoteTweet(db, rawTweet, rawQuotedStatus);\r\n  }\r\n\r\n  return processRawOriginalTweet(db, rawTweet, tweeter);\r\n};\r\n\r\n/**\r\n * Search the Twitter API for some query, saving and displaying the results.\r\n * @param query Query to search twitter\r\n */\r\nexport const searchAndSaveFromTwitter = (query, count = 300) => {\r\n  if (TWITTER_ENABLED) {\r\n    console.info(`Searching Twitter for query '${query}'.`);\r\n    return newPromiseChain()\r\n      .then(() => sweepTwitterAndConcat(query, count))\r\n      .then(\r\n        (statuses) => {\r\n          console.info(`Twitter search for '${query}' successful! Found ${statuses.length} relevant Tweets.`);\r\n\r\n          return Promise.all(\r\n            statuses.map((rawTweet) => processTweet(db, rawTweet))\r\n          ).then(\r\n            () => console.log('Successfully processed the Tweets.'),\r\n            (rej) => console.warn('failed to process the tweet into the database cache', rej)\r\n          );\r\n        },\r\n        (rej) => {\r\n          console.warn('Unable to search Twitter.', rej);\r\n        }\r\n      );\r\n  } else {\r\n    console.info(`Twitter disabled, not searching query '${query}'.`);\r\n    return Promise.resolve();\r\n  }\r\n};\r\n\r\nconst sweepTwitterAndConcat = (query, count, existingStatuses = [], lowestId = null) => {\r\n  let extendedQuery = query;\r\n  if (lowestId !== null) {\r\n    extendedQuery += ` max_id:${lowestId}`;\r\n  };\r\n\r\n  return newPromiseChain()\r\n    .then(() => potentiallySearchTwitter(extendedQuery, count))\r\n    .then((twitStatuses) => {\r\n      const countLeft = count - MAX_TWEETS_FROM_TWITTER_API;\r\n      const added = twitStatuses.length;\r\n\r\n      if (countLeft > 0 && added > 0) {\r\n        const newLowestId = Math.min(...twitStatuses.map((status) => status.id));\r\n\r\n        return newPromiseChain()\r\n          .then(() => sweepTwitterAndConcat(query, countLeft, twitStatuses, newLowestId))\r\n          .then((results) => existingStatuses.concat(results));\r\n      } else {\r\n        return existingStatuses.concat(twitStatuses);\r\n      }\r\n    });\r\n};\r\n\r\nconst potentiallySearchTwitter = (exactQuery, count) => {\r\n  if (count > 0) {\r\n    const actualCount = Math.min(count, MAX_TWEETS_FROM_TWITTER_API); // Twitter will only return a max of 100 Tweets at any time\r\n    return newPromiseChain()\r\n      .then(() => TwitAccess.get('search/tweets', { q: `${exactQuery} filter:safe`, count: actualCount }))\r\n      .then((twitResults) => twitResults.data.statuses);\r\n  } else {\r\n    return [];\r\n  }\r\n};\r\n\r\nexport const searchAndSaveResponse = (res, query) => (\r\n  searchAndSaveFromTwitter(query).then((result) => {\r\n    res.end(JSON.stringify(result));\r\n  })\r\n);\r\n\r\n/**\r\n * Connect to the Twitter Stream API for one minute, processing all results.\r\n * @param req HTTP Request object with `query` parameter\r\n * @param res HTTP Response object\r\n */\r\nexport const stream = (req, res) => {\r\n  const stream = TwitAccess.stream('statuses/filter', { track: req.params.query });\r\n\r\n  stream.on('tweet', (tweet) => {\r\n    processTweet(tweet);\r\n    console.log(tweet.text);\r\n    res.write(`${tweet.text}`);\r\n  });\r\n\r\n  setTimeout(() => {\r\n    stream.stop();\r\n    console.log('END');\r\n    res.end('END');\r\n  }, 60000);\r\n};\r\n"
  },
  {
    "__docId__": 253,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "Twit",
    "memberof": "src/server/twitterSearch.js",
    "longname": "src/server/twitterSearch.js~Twit",
    "access": null,
    "export": false,
    "importPath": "solid-octo-disco/src/server/twitterSearch.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 254,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "moment",
    "memberof": "src/server/twitterSearch.js",
    "longname": "src/server/twitterSearch.js~moment",
    "access": null,
    "export": false,
    "importPath": "solid-octo-disco/src/server/twitterSearch.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 255,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "TWITTER_ENABLED",
    "memberof": "src/server/twitterSearch.js",
    "longname": "src/server/twitterSearch.js~TWITTER_ENABLED",
    "access": null,
    "export": true,
    "importPath": "solid-octo-disco/src/server/twitterSearch.js",
    "importStyle": "{TWITTER_ENABLED}",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 256,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "MAX_TWEETS_FROM_TWITTER_API",
    "memberof": "src/server/twitterSearch.js",
    "longname": "src/server/twitterSearch.js~MAX_TWEETS_FROM_TWITTER_API",
    "access": null,
    "export": false,
    "importPath": "solid-octo-disco/src/server/twitterSearch.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 257,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "TwitAccess",
    "memberof": "src/server/twitterSearch.js",
    "longname": "src/server/twitterSearch.js~TwitAccess",
    "access": null,
    "export": true,
    "importPath": "solid-octo-disco/src/server/twitterSearch.js",
    "importStyle": "{TwitAccess}",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "Twit"
      ]
    }
  },
  {
    "__docId__": 258,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "buildTweetFromRaw",
    "memberof": "src/server/twitterSearch.js",
    "longname": "src/server/twitterSearch.js~buildTweetFromRaw",
    "access": null,
    "export": false,
    "importPath": "solid-octo-disco/src/server/twitterSearch.js",
    "importStyle": null,
    "description": "Convert some raw status from the Twitter API into a proper immutable Tweet object.",
    "lineNumber": 30,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ImmutableTweet}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "rawTweet",
        "description": "From the Twitter API."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ImmutableTweet"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 259,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "findLatitudeLongitude",
    "memberof": "src/server/twitterSearch.js",
    "longname": "src/server/twitterSearch.js~findLatitudeLongitude",
    "access": null,
    "export": false,
    "importPath": "solid-octo-disco/src/server/twitterSearch.js",
    "importStyle": null,
    "description": "Finds if Latitude/Longitude coordinates exist in raw tweet, otherwise return 0.0 for both",
    "lineNumber": 52,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "[latitude, longitude]"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "rawTweet",
        "description": "From the Twitter API."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "[latitude, longitude]"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 260,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "getImageUrl",
    "memberof": "src/server/twitterSearch.js",
    "longname": "src/server/twitterSearch.js~getImageUrl",
    "access": null,
    "export": false,
    "importPath": "solid-octo-disco/src/server/twitterSearch.js",
    "importStyle": null,
    "description": "Pulls the image url out of a tweet if it has one.",
    "lineNumber": 96,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{*} A direct link to the image being displayed"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "rawTweet",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "A direct link to the image being displayed"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 261,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "buildTweeterFromRaw",
    "memberof": "src/server/twitterSearch.js",
    "longname": "src/server/twitterSearch.js~buildTweeterFromRaw",
    "access": null,
    "export": true,
    "importPath": "solid-octo-disco/src/server/twitterSearch.js",
    "importStyle": "{buildTweeterFromRaw}",
    "description": "Convert some raw user from the Twitter API into a proper immutable Tweeter object.",
    "lineNumber": 116,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ImmutableTweet}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "rawTweeter",
        "description": "From the Twitter API."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "Boolean",
        "description": "to signify if the passed in rawTweeter is a mention object\nor a full user object that has a profile_image_url_https"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ImmutableTweet"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 262,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "buildPlaceFromRaw",
    "memberof": "src/server/twitterSearch.js",
    "longname": "src/server/twitterSearch.js~buildPlaceFromRaw",
    "access": null,
    "export": false,
    "importPath": "solid-octo-disco/src/server/twitterSearch.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 137,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 263,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "processRawRetweet",
    "memberof": "src/server/twitterSearch.js",
    "longname": "src/server/twitterSearch.js~processRawRetweet",
    "access": null,
    "export": false,
    "importPath": "solid-octo-disco/src/server/twitterSearch.js",
    "importStyle": null,
    "description": "Given some raw status we know is a retweet, insert it and add a RETWEETED link.",
    "lineNumber": 153,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "db",
        "description": "The OrientDB instance"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "retweeter",
        "description": "An immutable Tweeter object representing the author of the rawTweet"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "rawRetweet",
        "description": "A raw status from the Twitter API representing a retweet"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 264,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "processQuoteTweet",
    "memberof": "src/server/twitterSearch.js",
    "longname": "src/server/twitterSearch.js~processQuoteTweet",
    "access": null,
    "export": false,
    "importPath": "solid-octo-disco/src/server/twitterSearch.js",
    "importStyle": null,
    "description": "Given some raw status we know is a quote, insert it and a QUOTED link.",
    "lineNumber": 179,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "db",
        "description": "The OrientDB instance"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "rawQuoteTweet",
        "description": "A raw status from the twitter API which represents the tweet that quoted the rawOriginalTweet"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "rawOriginalTweet",
        "description": "A raw status from the twitter API which represents the tweet that was quoted"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 265,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "linkTweetToHashtags",
    "memberof": "src/server/twitterSearch.js",
    "longname": "src/server/twitterSearch.js~linkTweetToHashtags",
    "access": null,
    "export": false,
    "importPath": "solid-octo-disco/src/server/twitterSearch.js",
    "importStyle": null,
    "description": "Link a tweet to all of its hashtags",
    "lineNumber": 207,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "db",
        "description": "The OrientDB instance"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "rawHashtags",
        "description": "The original hashtags"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "tweet",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 266,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "linkTweetToMentions",
    "memberof": "src/server/twitterSearch.js",
    "longname": "src/server/twitterSearch.js~linkTweetToMentions",
    "access": null,
    "export": false,
    "importPath": "solid-octo-disco/src/server/twitterSearch.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 219,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 267,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "processRawOriginalTweet",
    "memberof": "src/server/twitterSearch.js",
    "longname": "src/server/twitterSearch.js~processRawOriginalTweet",
    "access": null,
    "export": false,
    "importPath": "solid-octo-disco/src/server/twitterSearch.js",
    "importStyle": null,
    "description": "Given a raw status we know is not a retweet, insert it and upsert the user.",
    "lineNumber": 238,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "db",
        "description": "The OrientDB instance"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "rawTweet",
        "description": "A raw status from the Twitter API"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "originalTweeter",
        "description": "An immutable Tweeter object"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 268,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "linkTweetToLocation",
    "memberof": "src/server/twitterSearch.js",
    "longname": "src/server/twitterSearch.js~linkTweetToLocation",
    "access": null,
    "export": false,
    "importPath": "solid-octo-disco/src/server/twitterSearch.js",
    "importStyle": null,
    "description": "Given a tweet, if it has a place upsert the place and link it to a country",
    "lineNumber": 259,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "db",
        "description": "the OrientDB instance"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "tweet",
        "description": "A processed tweet to link to a place"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "rawTweet",
        "description": "A raw tweet's place property from the Twitter API"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 269,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "processTweet",
    "memberof": "src/server/twitterSearch.js",
    "longname": "src/server/twitterSearch.js~processTweet",
    "access": null,
    "export": false,
    "importPath": "solid-octo-disco/src/server/twitterSearch.js",
    "importStyle": null,
    "description": "Given a raw tweet, extract information about the tweeter,\nif it was a retweet, etc, and store all information in\nthe database.",
    "lineNumber": 285,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise.<TwitAccess>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "db",
        "description": "The OrientDB instance"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "rawTweet",
        "description": "The original status object from the Twitter API"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise.<TwitAccess>"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 270,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "searchAndSaveFromTwitter",
    "memberof": "src/server/twitterSearch.js",
    "longname": "src/server/twitterSearch.js~searchAndSaveFromTwitter",
    "access": null,
    "export": true,
    "importPath": "solid-octo-disco/src/server/twitterSearch.js",
    "importStyle": "{searchAndSaveFromTwitter}",
    "description": "Search the Twitter API for some query, saving and displaying the results.",
    "lineNumber": 304,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "query",
        "description": "Query to search twitter"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 271,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "sweepTwitterAndConcat",
    "memberof": "src/server/twitterSearch.js",
    "longname": "src/server/twitterSearch.js~sweepTwitterAndConcat",
    "access": null,
    "export": false,
    "importPath": "solid-octo-disco/src/server/twitterSearch.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 330,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 272,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "potentiallySearchTwitter",
    "memberof": "src/server/twitterSearch.js",
    "longname": "src/server/twitterSearch.js~potentiallySearchTwitter",
    "access": null,
    "export": false,
    "importPath": "solid-octo-disco/src/server/twitterSearch.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 354,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 273,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "searchAndSaveResponse",
    "memberof": "src/server/twitterSearch.js",
    "longname": "src/server/twitterSearch.js~searchAndSaveResponse",
    "access": null,
    "export": true,
    "importPath": "solid-octo-disco/src/server/twitterSearch.js",
    "importStyle": "{searchAndSaveResponse}",
    "description": null,
    "lineNumber": 365,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 274,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "stream",
    "memberof": "src/server/twitterSearch.js",
    "longname": "src/server/twitterSearch.js~stream",
    "access": null,
    "export": true,
    "importPath": "solid-octo-disco/src/server/twitterSearch.js",
    "importStyle": "{stream}",
    "description": "Connect to the Twitter Stream API for one minute, processing all results.",
    "lineNumber": 376,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "req",
        "description": "HTTP Request object with `query` parameter"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "HTTP Response object"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 275,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/shared/data/databaseInsertActions.js",
    "memberof": null,
    "longname": "src/shared/data/databaseInsertActions.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import { flattenImmutableObject, newPromiseChain } from '../utilities';\r\n\r\nconst runQueryOnImmutableObject = (db, query, objectToFlatten) =>\r\n  db.query(query, { params: flattenImmutableObject(objectToFlatten) });\r\n\r\nexport const upsertTweeter = (db, tweeter) => {\r\n  // This is more complex than the other upsert queries\r\n  // First check if our Tweeter already exists in the database\r\n  // If they do, ONLY overwrite their current information, if the\r\n  // new information is complete, e.g. isn't from a mention\r\n  // and therefore has profile image information\r\n  const checkQuery = 'SELECT FROM tweeter WHERE id=:id';\r\n\r\n  const update = 'UPDATE tweeter SET id=:id, name=:name, handle=:handle, profile_image_url=:profile_image_url, is_user_mention=:is_user_mention, is_verified=:is_verified WHERE id=:id';\r\n  const upsert = 'UPDATE tweeter SET id=:id, name=:name, handle=:handle, profile_image_url=:profile_image_url, is_user_mention=:is_user_mention, is_verified=:is_verified UPSERT WHERE id=:id';\r\n\r\n  return newPromiseChain()\r\n    .then(() => runQueryOnImmutableObject(db, checkQuery, tweeter))\r\n    .then(\r\n      (response) => {\r\n        if (response.length === 1) { // Do we have this author already?\r\n          if (!tweeter.is_user_mention()) { // Is it worth updating?\r\n            return runQueryOnImmutableObject(db, update, tweeter);\r\n          }\r\n        } else {\r\n          // We can't find the user, so upsert them\r\n          return runQueryOnImmutableObject(db, upsert, tweeter);\r\n        }\r\n      }\r\n    )\r\n    .then(() => {}, (rej) => { console.error('Upsert tweeter', rej); });\r\n};\r\n\r\nexport const upsertTweet = (db, tweet) => (\r\n  runQueryOnImmutableObject(\r\n    db,\r\n    'UPDATE tweet SET id=:id, content=:content, date=:date, likes=:likes, retweets=:retweets, longitude=:longitude, latitude=:latitude, contains_a_quoted_tweet=:contains_a_quoted_tweet, image_url=:image_url UPSERT WHERE id=:id',\r\n    tweet\r\n  ).then(() => {}, (rej) => { console.error('Upsert tweet', rej); })\r\n);\r\n\r\nexport const upsertHashtag = (db, hashtag) => (\r\n  runQueryOnImmutableObject(\r\n    db,\r\n    'UPDATE hashtag SET content=:content UPSERT WHERE content=:content',\r\n    hashtag\r\n  ).then(() => {}, (rej) => { console.error('Upsert hashtag', rej); })\r\n);\r\n\r\nexport const upsertPlace = (db, place) => (\r\n  runQueryOnImmutableObject(\r\n    db,\r\n    'UPDATE place SET id=:id, name=:name, full_name=:full_name, type=:type UPSERT WHERE id=:id',\r\n    place\r\n  ).then(() => {}, (rej) => console.error('Upsert place', rej))\r\n);\r\n\r\nexport const upsertCountry = (db, country) => (\r\n  runQueryOnImmutableObject(\r\n    db,\r\n    'UPDATE country SET code=:code, name=:name UPSERT WHERE code=:code',\r\n    country\r\n  ).then(() => {}, (rej) => {console.error('Upsert country', rej);})\r\n);\r\n\r\nexport const linkTweeterToTweet = (db, tweeter, tweet) => (\r\n  db.query(\r\n    'CREATE EDGE TWEETED FROM (SELECT FROM tweeter WHERE id = :tweeterId) TO (SELECT FROM tweet WHERE id = :tweetId)',\r\n    {\r\n      params: {\r\n        tweetId: tweet.id(),\r\n        tweeterId: tweeter.id(),\r\n      },\r\n    }).then(\r\n      () => {},\r\n      (rej) => expectRejection(rej, 'TWEETED.in_out', 'tweeter', 'tweet'),\r\n    )\r\n);\r\n\r\nexport const linkTweeterToRetweet = (db, tweeter, tweet) => (\r\n  db.query(\r\n    'CREATE EDGE RETWEETED FROM (SELECT FROM tweeter WHERE id = :tweeterId) TO (SELECT FROM tweet WHERE id = :tweetId)',\r\n    {\r\n      params: {\r\n        tweetId: tweet.id(),\r\n        tweeterId: tweeter.id(),\r\n      },\r\n    }).then(\r\n    () => {},\r\n    (rej) => expectRejection(rej, 'RETWEETED.in_out', 'tweeter', 'retweet'),\r\n  )\r\n);\r\n\r\nexport const linkQuoteTweetToOriginalTweet = (db, quoteTweet, originalTweet) => (\r\n  db.query(\r\n    'CREATE EDGE QUOTED FROM (SELECT FROM tweet WHERE id = :quoteTweetId) TO (SELECT FROM tweet WHERE id = :originalTweetId)',\r\n    {\r\n      params: {\r\n        quoteTweetId: quoteTweet.id(),\r\n        originalTweetId: originalTweet.id(),\r\n      },\r\n    }).then(\r\n    () => {},\r\n    (rej) => expectRejection(rej, 'QUOTED.in_out', 'quoteTweet', 'quotedTweet')\r\n  )\r\n);\r\n\r\nexport const linkTweetToHashtag = (db, tweet, hashtag) => (\r\n  db.query(\r\n    'CREATE EDGE HAS_HASHTAG FROM (SELECT FROM tweet WHERE id = :tweetId) TO (SELECT FROM hashtag WHERE content = :hashtagContent)',\r\n    {\r\n      params: {\r\n        tweetId: tweet.id(),\r\n        hashtagContent: hashtag.content(),\r\n      },\r\n    }).then(\r\n      () => {},\r\n      (rej) => expectRejection(rej, 'HAS_HASHTAG.in_out', 'tweet', 'hashtag'),\r\n    )\r\n);\r\n\r\nexport const linkTweetToTweeterViaMention = (db, tweet, mentionedTweeter) => (\r\n  db.query(\r\n    'CREATE EDGE MENTIONS FROM (SELECT FROM tweet WHERE id = :tweetId) TO (SELECT FROM tweeter WHERE id = :mentionedTweeterId)',\r\n    {\r\n      params: {\r\n        tweetId: tweet.id(),\r\n        mentionedTweeterId: mentionedTweeter.id(),\r\n      },\r\n    }).then(\r\n      () => {},\r\n      (rej) => expectRejection(rej, 'MENTIONS.in_out', 'tweet', 'mentioned tweeter'),\r\n    )\r\n);\r\n\r\nexport const linkTweetToPlace = (db, tweet, place) => (\r\n  db.query(\r\n    'CREATE EDGE HAS_PLACE FROM (SELECT FROM tweet WHERE id = :tweetId) TO (SELECT FROM place WHERE id = :placeId)',\r\n    {\r\n      params: {\r\n        tweetId: tweet.id(),\r\n        placeId: place.id(),\r\n      },\r\n    }).then(\r\n      () => {},\r\n      (rej) => expectRejection(rej, 'HAS_PLACE.in_out', 'tweet', 'place'),\r\n    )\r\n);\r\n\r\nexport const linkPlaceToCountry = (db, place, country) => (\r\n  db.query(\r\n    'CREATE EDGE IN_COUNTRY FROM (SELECT FROM place WHERE id = :placeId) TO (SELECT FROM country WHERE code = :countryCode)',\r\n    {\r\n      params: {\r\n        placeId: place.id(),\r\n        countryCode: country.code(),\r\n      },\r\n    }).then(\r\n      () => {},\r\n      (rej) => expectRejection(rej, 'IN_COUNTRY.in_out', 'place', 'country'),\r\n    )\r\n);\r\n\r\nconst expectRejection = (rejection, expect, from, to) => {\r\n  if (rejection.message.indexOf(expect) === -1) {\r\n    console.error(`Unexpected error linking ${from} => ${to}.`, rejection);\r\n  }\r\n};\r\n"
  },
  {
    "__docId__": 276,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "runQueryOnImmutableObject",
    "memberof": "src/shared/data/databaseInsertActions.js",
    "longname": "src/shared/data/databaseInsertActions.js~runQueryOnImmutableObject",
    "access": null,
    "export": false,
    "importPath": "solid-octo-disco/src/shared/data/databaseInsertActions.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 277,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "upsertTweeter",
    "memberof": "src/shared/data/databaseInsertActions.js",
    "longname": "src/shared/data/databaseInsertActions.js~upsertTweeter",
    "access": null,
    "export": true,
    "importPath": "solid-octo-disco/src/shared/data/databaseInsertActions.js",
    "importStyle": "{upsertTweeter}",
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 278,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "upsertTweet",
    "memberof": "src/shared/data/databaseInsertActions.js",
    "longname": "src/shared/data/databaseInsertActions.js~upsertTweet",
    "access": null,
    "export": true,
    "importPath": "solid-octo-disco/src/shared/data/databaseInsertActions.js",
    "importStyle": "{upsertTweet}",
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 279,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "upsertHashtag",
    "memberof": "src/shared/data/databaseInsertActions.js",
    "longname": "src/shared/data/databaseInsertActions.js~upsertHashtag",
    "access": null,
    "export": true,
    "importPath": "solid-octo-disco/src/shared/data/databaseInsertActions.js",
    "importStyle": "{upsertHashtag}",
    "description": null,
    "lineNumber": 42,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 280,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "upsertPlace",
    "memberof": "src/shared/data/databaseInsertActions.js",
    "longname": "src/shared/data/databaseInsertActions.js~upsertPlace",
    "access": null,
    "export": true,
    "importPath": "solid-octo-disco/src/shared/data/databaseInsertActions.js",
    "importStyle": "{upsertPlace}",
    "description": null,
    "lineNumber": 50,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 281,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "upsertCountry",
    "memberof": "src/shared/data/databaseInsertActions.js",
    "longname": "src/shared/data/databaseInsertActions.js~upsertCountry",
    "access": null,
    "export": true,
    "importPath": "solid-octo-disco/src/shared/data/databaseInsertActions.js",
    "importStyle": "{upsertCountry}",
    "description": null,
    "lineNumber": 58,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 282,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "linkTweeterToTweet",
    "memberof": "src/shared/data/databaseInsertActions.js",
    "longname": "src/shared/data/databaseInsertActions.js~linkTweeterToTweet",
    "access": null,
    "export": true,
    "importPath": "solid-octo-disco/src/shared/data/databaseInsertActions.js",
    "importStyle": "{linkTweeterToTweet}",
    "description": null,
    "lineNumber": 66,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 283,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "linkTweeterToRetweet",
    "memberof": "src/shared/data/databaseInsertActions.js",
    "longname": "src/shared/data/databaseInsertActions.js~linkTweeterToRetweet",
    "access": null,
    "export": true,
    "importPath": "solid-octo-disco/src/shared/data/databaseInsertActions.js",
    "importStyle": "{linkTweeterToRetweet}",
    "description": null,
    "lineNumber": 80,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 284,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "linkQuoteTweetToOriginalTweet",
    "memberof": "src/shared/data/databaseInsertActions.js",
    "longname": "src/shared/data/databaseInsertActions.js~linkQuoteTweetToOriginalTweet",
    "access": null,
    "export": true,
    "importPath": "solid-octo-disco/src/shared/data/databaseInsertActions.js",
    "importStyle": "{linkQuoteTweetToOriginalTweet}",
    "description": null,
    "lineNumber": 94,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 285,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "linkTweetToHashtag",
    "memberof": "src/shared/data/databaseInsertActions.js",
    "longname": "src/shared/data/databaseInsertActions.js~linkTweetToHashtag",
    "access": null,
    "export": true,
    "importPath": "solid-octo-disco/src/shared/data/databaseInsertActions.js",
    "importStyle": "{linkTweetToHashtag}",
    "description": null,
    "lineNumber": 108,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 286,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "linkTweetToTweeterViaMention",
    "memberof": "src/shared/data/databaseInsertActions.js",
    "longname": "src/shared/data/databaseInsertActions.js~linkTweetToTweeterViaMention",
    "access": null,
    "export": true,
    "importPath": "solid-octo-disco/src/shared/data/databaseInsertActions.js",
    "importStyle": "{linkTweetToTweeterViaMention}",
    "description": null,
    "lineNumber": 122,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 287,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "linkTweetToPlace",
    "memberof": "src/shared/data/databaseInsertActions.js",
    "longname": "src/shared/data/databaseInsertActions.js~linkTweetToPlace",
    "access": null,
    "export": true,
    "importPath": "solid-octo-disco/src/shared/data/databaseInsertActions.js",
    "importStyle": "{linkTweetToPlace}",
    "description": null,
    "lineNumber": 136,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 288,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "linkPlaceToCountry",
    "memberof": "src/shared/data/databaseInsertActions.js",
    "longname": "src/shared/data/databaseInsertActions.js~linkPlaceToCountry",
    "access": null,
    "export": true,
    "importPath": "solid-octo-disco/src/shared/data/databaseInsertActions.js",
    "importStyle": "{linkPlaceToCountry}",
    "description": null,
    "lineNumber": 150,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 289,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "expectRejection",
    "memberof": "src/shared/data/databaseInsertActions.js",
    "longname": "src/shared/data/databaseInsertActions.js~expectRejection",
    "access": null,
    "export": false,
    "importPath": "solid-octo-disco/src/shared/data/databaseInsertActions.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 164,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 290,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/shared/data/databaseObjects.js",
    "memberof": null,
    "longname": "src/shared/data/databaseObjects.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import { BuilderDecorator } from 'js-builder-decorator';\r\nimport { schema } from './databaseSchema';\r\n\r\n/**\r\n * Given a schema object, as seen in ./databaseSchema.js, convert it into an object\r\n * for use in the BuilderDecorator.\r\n * @param name Schema object name\r\n * @returns {Object} e.g. {'name': null, 'age': null}\r\n */\r\nexport const convertSchemaObjectToClass = (name, schema) => {\r\n  const newObject = {};\r\n  const schemaObject = schema[name];\r\n  schemaObject.properties.forEach((property) => {\r\n    newObject[property.name] = null;\r\n  });\r\n  return newObject;\r\n};\r\n\r\n/**\r\n * Given an object name in the databaseSchema, create a useful immutable Builder.\r\n * @param name e.g. 'Tweet'\r\n * @returns {Builder}\r\n */\r\nconst generateBuilder = (name) => BuilderDecorator.BuilderDecorator(\r\n  convertSchemaObjectToClass(name, schema),\r\n  { allFieldsMustBeSet: true }\r\n);\r\n\r\n// ----------------------\r\n\r\nexport const TweetBuilder = generateBuilder('Tweet');\r\nexport const TweeterBuilder = generateBuilder('Tweeter');\r\nexport const HashtagBuilder = generateBuilder('Hashtag');\r\nexport const PlaceBuilder = generateBuilder('Place');\r\nexport const CountryBuilder = generateBuilder('Country');\r\n"
  },
  {
    "__docId__": 291,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "convertSchemaObjectToClass",
    "memberof": "src/shared/data/databaseObjects.js",
    "longname": "src/shared/data/databaseObjects.js~convertSchemaObjectToClass",
    "access": null,
    "export": true,
    "importPath": "solid-octo-disco/src/shared/data/databaseObjects.js",
    "importStyle": "{convertSchemaObjectToClass}",
    "description": "Given a schema object, as seen in ./databaseSchema.js, convert it into an object\nfor use in the BuilderDecorator.",
    "lineNumber": 10,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object} e.g. {'name': null, 'age': null}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "Schema object name"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "e.g. {'name': null, 'age': null}"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 292,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "generateBuilder",
    "memberof": "src/shared/data/databaseObjects.js",
    "longname": "src/shared/data/databaseObjects.js~generateBuilder",
    "access": null,
    "export": false,
    "importPath": "solid-octo-disco/src/shared/data/databaseObjects.js",
    "importStyle": null,
    "description": "Given an object name in the databaseSchema, create a useful immutable Builder.",
    "lineNumber": 24,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Builder}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "e.g. 'Tweet'"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Builder"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 293,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "TweetBuilder",
    "memberof": "src/shared/data/databaseObjects.js",
    "longname": "src/shared/data/databaseObjects.js~TweetBuilder",
    "access": null,
    "export": true,
    "importPath": "solid-octo-disco/src/shared/data/databaseObjects.js",
    "importStyle": "{TweetBuilder}",
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 294,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "TweeterBuilder",
    "memberof": "src/shared/data/databaseObjects.js",
    "longname": "src/shared/data/databaseObjects.js~TweeterBuilder",
    "access": null,
    "export": true,
    "importPath": "solid-octo-disco/src/shared/data/databaseObjects.js",
    "importStyle": "{TweeterBuilder}",
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 295,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "HashtagBuilder",
    "memberof": "src/shared/data/databaseObjects.js",
    "longname": "src/shared/data/databaseObjects.js~HashtagBuilder",
    "access": null,
    "export": true,
    "importPath": "solid-octo-disco/src/shared/data/databaseObjects.js",
    "importStyle": "{HashtagBuilder}",
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 296,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "PlaceBuilder",
    "memberof": "src/shared/data/databaseObjects.js",
    "longname": "src/shared/data/databaseObjects.js~PlaceBuilder",
    "access": null,
    "export": true,
    "importPath": "solid-octo-disco/src/shared/data/databaseObjects.js",
    "importStyle": "{PlaceBuilder}",
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 297,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "CountryBuilder",
    "memberof": "src/shared/data/databaseObjects.js",
    "longname": "src/shared/data/databaseObjects.js~CountryBuilder",
    "access": null,
    "export": true,
    "importPath": "solid-octo-disco/src/shared/data/databaseObjects.js",
    "importStyle": "{CountryBuilder}",
    "description": null,
    "lineNumber": 35,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 298,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/shared/data/databaseObjects.spec.js",
    "memberof": null,
    "longname": "src/shared/data/databaseObjects.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import { should } from 'chai';\r\nimport { convertSchemaObjectToClass } from './databaseObjects';\r\nimport { schema } from './databaseSchema';\r\n\r\ndescribe('#DatabaseObject', () => {\r\n  it('should convert a schema object to raw object keys', () => {\r\n    const exampleSchema = schema;\r\n    const exampleClass = convertSchemaObjectToClass('Tweet', exampleSchema);\r\n\r\n    exampleClass.should.include.keys(['id', 'content', 'date', 'likes', 'retweets']);\r\n    exampleClass.should.not.include.keys(['some', 'other', 'keys']);\r\n  });\r\n});\r\n"
  },
  {
    "__docId__": 299,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/shared/data/databaseSchema.js",
    "memberof": null,
    "longname": "src/shared/data/databaseSchema.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "const Boolean = 'Boolean';\r\nconst Datetime = 'Datetime';\r\nconst Double = 'Double';\r\nconst Integer = 'Integer';\r\nconst String = 'String';\r\n\r\nconst Edge = 'E';\r\nconst Vertex = 'V';\r\n\r\nconst None = [];\r\n\r\nconst LUCENE = 'FULLTEXT ENGINE LUCENE';\r\nconst UNIQUE = 'UNIQUE';\r\n\r\nconst EmptyEdge = {\r\n  superclass: Edge,\r\n  properties: [\r\n    { name: 'in', type: 'LINK' },\r\n    { name: 'out', type: 'LINK' },\r\n  ],\r\n  indexes: [\r\n    { properties: ['in', 'out'], type: UNIQUE, },\r\n  ],\r\n};\r\n\r\nexport const schema = {\r\n  Tweet: {\r\n    superclass: Vertex,\r\n    properties: [\r\n      { name: 'id', type: String },\r\n      { name: 'content', type: String },\r\n      { name: 'date', type: Datetime },\r\n      { name: 'likes', type: Integer },\r\n      { name: 'retweets', type: Integer },\r\n      { name: 'longitude', type: Double },\r\n      { name: 'latitude', type: Double },\r\n      { name: 'contains_a_quoted_tweet', type: String },\r\n      { name: 'image_url', type: String },\r\n    ],\r\n    indexes: [\r\n      { properties: ['id'], type: UNIQUE, },\r\n      { properties: ['content'], type: LUCENE, },\r\n    ],\r\n  },\r\n  Tweeter: {\r\n    superclass: Vertex,\r\n    properties: [\r\n      { name: 'id', type: String },\r\n      { name: 'name', type: String },\r\n      { name: 'handle', type: String },\r\n      { name: 'profile_image_url', type: String },\r\n      { name: 'is_user_mention', type: Boolean },\r\n      { name: 'is_verified', type: Boolean },\r\n    ],\r\n    indexes: [\r\n      { properties: ['id'], type: UNIQUE, },\r\n      { properties: ['name'], type: LUCENE, },\r\n      { properties: ['handle'], type: LUCENE, },\r\n    ],\r\n  },\r\n  Hashtag: {\r\n    superclass: Vertex,\r\n    properties: [\r\n      { name: 'content', type: String },\r\n    ],\r\n    indexes: [\r\n      { properties: ['content'], type: LUCENE, },\r\n    ],\r\n  },\r\n  Place: {\r\n    superclass: Vertex,\r\n    properties: [\r\n      { name: 'id', type: String },\r\n      { name: 'name', type: String },\r\n      { name: 'full_name', type: String },\r\n      { name: 'type', type: String },\r\n    ],\r\n    indexes: [\r\n      { properties: ['id'], type: UNIQUE, },\r\n      { properties: ['full_name'], type: LUCENE, },\r\n    ],\r\n  },\r\n  Country: {\r\n    superclass: Vertex,\r\n    properties: [\r\n      { name: 'code', type: String },\r\n      { name: 'name', type: String },\r\n    ],\r\n    indexes: [\r\n      { properties: ['code'], type: UNIQUE, },\r\n      { properties: ['name'], type: LUCENE, },\r\n    ],\r\n  },\r\n  League: {\r\n    superclass: Vertex,\r\n    properties: [\r\n      { name: 'id', type: Integer },\r\n      { name: 'year', type: String },\r\n      { name: 'caption', type: String },\r\n      { name: 'league', type: String },\r\n    ],\r\n    indexes: [\r\n      { properties: ['id'], type: UNIQUE, },\r\n    ],\r\n  },\r\n  Team: {\r\n    superclass: Vertex,\r\n    properties: [\r\n      { name: 'id', type: Integer },\r\n      { name: 'name', type: String },\r\n      { name: 'shortName', type: String },\r\n      { name: 'crestUrl', type: String },\r\n    ],\r\n    indexes: [\r\n      { properties: ['id'], type: UNIQUE, },\r\n    ],\r\n  },\r\n  Player: {\r\n    superclass: Vertex,\r\n    properties: [\r\n      { name: 'id', type: Integer },\r\n      { name: 'name', type: String },\r\n      { name: 'nationality', type: String },\r\n    ],\r\n    indexes: [\r\n      { properties: ['id'], type: UNIQUE, },\r\n    ],\r\n  },\r\n  TWEETED: EmptyEdge,\r\n  RETWEETED: EmptyEdge,\r\n  QUOTED: EmptyEdge,\r\n  FOLLOWS: EmptyEdge,\r\n  MENTIONS: EmptyEdge,\r\n  HAS_HASHTAG: EmptyEdge,\r\n  HAS_PLACE: EmptyEdge,\r\n  IN_COUNTRY: EmptyEdge,\r\n};\r\n"
  },
  {
    "__docId__": 300,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "Boolean",
    "memberof": "src/shared/data/databaseSchema.js",
    "longname": "src/shared/data/databaseSchema.js~Boolean",
    "access": null,
    "export": false,
    "importPath": "solid-octo-disco/src/shared/data/databaseSchema.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 301,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "Datetime",
    "memberof": "src/shared/data/databaseSchema.js",
    "longname": "src/shared/data/databaseSchema.js~Datetime",
    "access": null,
    "export": false,
    "importPath": "solid-octo-disco/src/shared/data/databaseSchema.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 302,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "Double",
    "memberof": "src/shared/data/databaseSchema.js",
    "longname": "src/shared/data/databaseSchema.js~Double",
    "access": null,
    "export": false,
    "importPath": "solid-octo-disco/src/shared/data/databaseSchema.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 303,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "Integer",
    "memberof": "src/shared/data/databaseSchema.js",
    "longname": "src/shared/data/databaseSchema.js~Integer",
    "access": null,
    "export": false,
    "importPath": "solid-octo-disco/src/shared/data/databaseSchema.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 304,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "String",
    "memberof": "src/shared/data/databaseSchema.js",
    "longname": "src/shared/data/databaseSchema.js~String",
    "access": null,
    "export": false,
    "importPath": "solid-octo-disco/src/shared/data/databaseSchema.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 305,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "Edge",
    "memberof": "src/shared/data/databaseSchema.js",
    "longname": "src/shared/data/databaseSchema.js~Edge",
    "access": null,
    "export": false,
    "importPath": "solid-octo-disco/src/shared/data/databaseSchema.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 306,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "Vertex",
    "memberof": "src/shared/data/databaseSchema.js",
    "longname": "src/shared/data/databaseSchema.js~Vertex",
    "access": null,
    "export": false,
    "importPath": "solid-octo-disco/src/shared/data/databaseSchema.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 307,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "None",
    "memberof": "src/shared/data/databaseSchema.js",
    "longname": "src/shared/data/databaseSchema.js~None",
    "access": null,
    "export": false,
    "importPath": "solid-octo-disco/src/shared/data/databaseSchema.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 308,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "LUCENE",
    "memberof": "src/shared/data/databaseSchema.js",
    "longname": "src/shared/data/databaseSchema.js~LUCENE",
    "access": null,
    "export": false,
    "importPath": "solid-octo-disco/src/shared/data/databaseSchema.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 309,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "UNIQUE",
    "memberof": "src/shared/data/databaseSchema.js",
    "longname": "src/shared/data/databaseSchema.js~UNIQUE",
    "access": null,
    "export": false,
    "importPath": "solid-octo-disco/src/shared/data/databaseSchema.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 310,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "EmptyEdge",
    "memberof": "src/shared/data/databaseSchema.js",
    "longname": "src/shared/data/databaseSchema.js~EmptyEdge",
    "access": null,
    "export": false,
    "importPath": "solid-octo-disco/src/shared/data/databaseSchema.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 311,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "schema",
    "memberof": "src/shared/data/databaseSchema.js",
    "longname": "src/shared/data/databaseSchema.js~schema",
    "access": null,
    "export": true,
    "importPath": "solid-octo-disco/src/shared/data/databaseSchema.js",
    "importStyle": "{schema}",
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 312,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/shared/utilities.js",
    "memberof": null,
    "longname": "src/shared/utilities.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import fetch from 'isomorphic-fetch';\r\n\r\n/**\r\n * Converts an object of style {'a': {'b': c}, 'd': {'e': f}} to [{'b': c}, {'e': f}]\r\n * @param {Object} givenObject Any object.\r\n * @returns {Array}\r\n */\r\nexport const flattenObjectToArray = (givenObject) => {\r\n  const result = [];\r\n  for (const key in givenObject) {\r\n    if (givenObject.hasOwnProperty(key)) {\r\n      result.push(givenObject[key]);\r\n    }\r\n  }\r\n\r\n  return result;\r\n};\r\n\r\n/**\r\n * Converts an immutable object (one with purely getter methods) to a plain key/value\r\n * object, by calling the functions and storing the result.\r\n * @param givenObject Similar to {'name': () => { return 'John'; }}\r\n * @returns {{}} Similar to {'name': 'John'}\r\n */\r\nexport const flattenImmutableObject = (givenObject) => {\r\n  if (typeof givenObject !== 'object') { return givenObject; }\r\n\r\n  const result = {};\r\n  for (const key in givenObject) {\r\n    if (givenObject.hasOwnProperty(key)) {\r\n      const field = givenObject[key];\r\n\r\n      if (typeof field === 'function') {\r\n        result[key] = flattenImmutableObject(field());\r\n      } else {\r\n        result[key] = field;\r\n      }\r\n    }\r\n  }\r\n\r\n  return result;\r\n};\r\n\r\n/**\r\n * Checks if the element is in the array, if it is, then return a new array\r\n * with it removed else add it to the new array\r\n * @param any primitive type that can be .indexOf(ed) from an array\r\n * @return new [Array]\r\n */\r\nexport const toggleArrayElement = (array, element) => {\r\n  const termIndex = array.indexOf(element);\r\n  if (termIndex > -1) {\r\n    return [\r\n      ...array.slice(0, termIndex),\r\n      ...array.slice(termIndex + 1),\r\n    ];\r\n  }\r\n\r\n  return [...array, element];\r\n};\r\n\r\n/**\r\n * Starts a new Promise chain, resolving immediately.\r\n * @param callback Must return a Promise.\r\n * @returns {Promise}\r\n */\r\nexport const newPromiseChain = () => (\r\n  new Promise((resolve) => {\r\n    resolve();\r\n  })\r\n);\r\n\r\n/**\r\n * Generates the boilerplate headers for a JSON GET request\r\n * @returns {{method: string, headers: {Accept: string, Content-Type: string}}}\r\n */\r\nexport const makeGetHeader = () => ({\r\n  method: 'GET',\r\n  headers: {\r\n    Accept: 'application/json',\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n/**\r\n * Generates the boilerplate headers for a JSON POST request\r\n * @param body The body of the request, e.g. {'query': 'liverpool'}\r\n * @returns {{method: string, headers: {Accept: string, Content-Type: string}, body: *}}\r\n */\r\nexport const makePostHeader = (body) => {\r\n  if (typeof body === 'object') {\r\n    body = JSON.stringify(body);\r\n  }\r\n\r\n  return {\r\n    method: 'POST',\r\n    headers: {\r\n      Accept: 'application/json',\r\n      'Content-Type': 'application/json',\r\n    },\r\n    body,\r\n  };\r\n};\r\n\r\n/**\r\n * Creates a JSON POST fetch promise with a given url and body\r\n * @param url Where to POST, e.g. '/search'\r\n * @param body The body of the request, e.g. {'query': 'liverpool'}\r\n */\r\nexport const fetchPost = (url, body) => (\r\n  fetch(url, makePostHeader(body))\r\n);\r\n\r\n/**\r\n * Creates the paramTypes for a Twitter specific search term.\r\n * @param array of strings representing search paramaterTypes\r\n * @returns [{Object}] representing search terms with meta data\r\n */\r\nexport const createTwitterParamTypes = (selectedParamTypes) =>\r\n  ['author', 'hashtag', 'keyword', 'mention']\r\n    .map((paramType) => makeParamType(selectedParamTypes, paramType));\r\n\r\nconst makeParamType = (selectedParamTypes, type) => ({\r\n  name: type,\r\n  selected: selectedParamTypes.indexOf(type) > -1,\r\n  icon: getParamTypeIcon(type),\r\n});\r\n\r\n/**\r\n * Returns a copy of the paramTypes with the name of the passed\r\n * in paramType toggled\r\n * @param paramTypes array\r\n * @param paramTypeToggleName which is the paramType you want to toggle\r\n * @returns copy of paramtypes with the paramTypeToggleName paramType toggled\r\n */\r\nexport const toggleParamType = (paramTypes, paramTypeToggleName) => (\r\n  paramTypes.map((paramType) => {\r\n    if (paramType.name !== paramTypeToggleName) {\r\n      return paramType;\r\n    }\r\n\r\n    return {\r\n      ...paramType,\r\n      selected: !paramType.selected,\r\n    };\r\n  })\r\n);\r\n\r\n/**\r\n * Returns a decorated callback function, which will be called some time later.\r\n * However, if the returned function is called again before the callback\r\n * is activated, the timer will be reset.\r\n * This might be useful say when delaying running a search until 200ms after\r\n * the user has stopped typing.\r\n * @param callback\r\n * @param milliseconds\r\n * @returns {Function}\r\n */\r\nexport const throttleFunction = (callback, milliseconds) => {\r\n  let timeout;\r\n\r\n  return (...args) => {\r\n    if (timeout) {\r\n      clearTimeout(timeout);\r\n    }\r\n\r\n    timeout = setTimeout(() => callback.apply(undefined, args), milliseconds);\r\n  };\r\n};\r\n\r\n/**\r\n * Creates an array filled with numbers between the range [min, max)\r\n * @param min The start number, inclusive.\r\n * @param max The end number, exclusive\r\n * @param step Step between each number, must be positive.\r\n * @returns {Array}\r\n */\r\nexport const range = (min, max, step = 1) => {\r\n  if (step <= 0) {\r\n    return [];\r\n  }\r\n\r\n  const result = [];\r\n  for (let i = min; i < max; i += step) {\r\n    result.push(i);\r\n  }\r\n  return result;\r\n};\r\n\r\n/**\r\n * Returns a semantic icon name or character to represent seachParamTypes\r\n * eg. hashtag = #, mention = @\r\n * @param string which represents a paramtype\r\n * @returns char or string representing paramType (could be semantic icon class)\r\n */\r\nconst getParamTypeIcon = (paramType) => {\r\n  switch (paramType) {\r\n  case 'author':\r\n    return 'user icon';\r\n  case 'hashtag':\r\n    return '#';\r\n  case 'keyword':\r\n    return 'file text icon';\r\n  case 'mention':\r\n    return 'at icon';\r\n  default:\r\n    return '?';\r\n  }\r\n};\r\n\r\n/**\r\n* Transforms the football-data.org api's player nationalities to semantic flag icon class name\r\n* @param string which represents football-data.org's a player's nationality\r\n* @returns string representing semantic flag icon class name\r\n*/\r\nexport const getSemanticCountryFlagName = (countryName) => {\r\n  switch (countryName) {\r\n  case 'england':\r\n    return 'united kingdom';\r\n  case 'korea, south':\r\n    return 'south korea';\r\n  case 'korea, north':\r\n    return 'north korea';\r\n  case 'bosnia-herzegovina':\r\n    return 'bosnia';\r\n  case `cote d'ivoire`:\r\n    return 'cote divoire';\r\n  default:\r\n    return countryName;\r\n  }\r\n};\r\n"
  },
  {
    "__docId__": 313,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "flattenObjectToArray",
    "memberof": "src/shared/utilities.js",
    "longname": "src/shared/utilities.js~flattenObjectToArray",
    "access": null,
    "export": true,
    "importPath": "solid-octo-disco/src/shared/utilities.js",
    "importStyle": "{flattenObjectToArray}",
    "description": "Converts an object of style {'a': {'b': c}, 'd': {'e': f}} to [{'b': c}, {'e': f}]",
    "lineNumber": 8,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "givenObject",
        "description": "Any object."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 314,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "flattenImmutableObject",
    "memberof": "src/shared/utilities.js",
    "longname": "src/shared/utilities.js~flattenImmutableObject",
    "access": null,
    "export": true,
    "importPath": "solid-octo-disco/src/shared/utilities.js",
    "importStyle": "{flattenImmutableObject}",
    "description": "Converts an immutable object (one with purely getter methods) to a plain key/value\nobject, by calling the functions and storing the result.",
    "lineNumber": 25,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{{}} Similar to {'name': 'John'}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "givenObject",
        "description": "Similar to {'name': () => { return 'John'; }}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{}"
      ],
      "spread": false,
      "description": "Similar to {'name': 'John'}"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 315,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "toggleArrayElement",
    "memberof": "src/shared/utilities.js",
    "longname": "src/shared/utilities.js~toggleArrayElement",
    "access": null,
    "export": true,
    "importPath": "solid-octo-disco/src/shared/utilities.js",
    "importStyle": "{toggleArrayElement}",
    "description": "Checks if the element is in the array, if it is, then return a new array\nwith it removed else add it to the new array",
    "lineNumber": 50,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "any",
        "description": "primitive type that can be .indexOf(ed) from an array"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "new [Array]"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 316,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "newPromiseChain",
    "memberof": "src/shared/utilities.js",
    "longname": "src/shared/utilities.js~newPromiseChain",
    "access": null,
    "export": true,
    "importPath": "solid-octo-disco/src/shared/utilities.js",
    "importStyle": "{newPromiseChain}",
    "description": "Starts a new Promise chain, resolving immediately.",
    "lineNumber": 67,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "Must return a Promise."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 317,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "makeGetHeader",
    "memberof": "src/shared/utilities.js",
    "longname": "src/shared/utilities.js~makeGetHeader",
    "access": null,
    "export": true,
    "importPath": "solid-octo-disco/src/shared/utilities.js",
    "importStyle": "{makeGetHeader}",
    "description": "Generates the boilerplate headers for a JSON GET request",
    "lineNumber": 77,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{{method: string, headers: {Accept: string, Content-Type: string}}}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{method: string, headers: {Accept: string, Content-Type: string}}"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 318,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "makePostHeader",
    "memberof": "src/shared/utilities.js",
    "longname": "src/shared/utilities.js~makePostHeader",
    "access": null,
    "export": true,
    "importPath": "solid-octo-disco/src/shared/utilities.js",
    "importStyle": "{makePostHeader}",
    "description": "Generates the boilerplate headers for a JSON POST request",
    "lineNumber": 90,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{{method: string, headers: {Accept: string, Content-Type: string}, body: *}}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "body",
        "description": "The body of the request, e.g. {'query': 'liverpool'}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{method: string, headers: {Accept: string, Content-Type: string}, body: *}"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 319,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "fetchPost",
    "memberof": "src/shared/utilities.js",
    "longname": "src/shared/utilities.js~fetchPost",
    "access": null,
    "export": true,
    "importPath": "solid-octo-disco/src/shared/utilities.js",
    "importStyle": "{fetchPost}",
    "description": "Creates a JSON POST fetch promise with a given url and body",
    "lineNumber": 110,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "url",
        "description": "Where to POST, e.g. '/search'"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "body",
        "description": "The body of the request, e.g. {'query': 'liverpool'}"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 320,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "createTwitterParamTypes",
    "memberof": "src/shared/utilities.js",
    "longname": "src/shared/utilities.js~createTwitterParamTypes",
    "access": null,
    "export": true,
    "importPath": "solid-octo-disco/src/shared/utilities.js",
    "importStyle": "{createTwitterParamTypes}",
    "description": "Creates the paramTypes for a Twitter specific search term.",
    "lineNumber": 119,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "[{Object}] representing search terms with meta data"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "array",
        "description": "of strings representing search paramaterTypes"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "[{Object}] representing search terms with meta data"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 321,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "makeParamType",
    "memberof": "src/shared/utilities.js",
    "longname": "src/shared/utilities.js~makeParamType",
    "access": null,
    "export": false,
    "importPath": "solid-octo-disco/src/shared/utilities.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 123,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 322,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "toggleParamType",
    "memberof": "src/shared/utilities.js",
    "longname": "src/shared/utilities.js~toggleParamType",
    "access": null,
    "export": true,
    "importPath": "solid-octo-disco/src/shared/utilities.js",
    "importStyle": "{toggleParamType}",
    "description": "Returns a copy of the paramTypes with the name of the passed\nin paramType toggled",
    "lineNumber": 136,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "copy of paramtypes with the paramTypeToggleName paramType toggled"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "paramTypes",
        "description": "array"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "paramTypeToggleName",
        "description": "which is the paramType you want to toggle"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "copy of paramtypes with the paramTypeToggleName paramType toggled"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 323,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "throttleFunction",
    "memberof": "src/shared/utilities.js",
    "longname": "src/shared/utilities.js~throttleFunction",
    "access": null,
    "export": true,
    "importPath": "solid-octo-disco/src/shared/utilities.js",
    "importStyle": "{throttleFunction}",
    "description": "Returns a decorated callback function, which will be called some time later.\nHowever, if the returned function is called again before the callback\nis activated, the timer will be reset.\nThis might be useful say when delaying running a search until 200ms after\nthe user has stopped typing.",
    "lineNumber": 159,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Function}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "milliseconds",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Function"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 324,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "range",
    "memberof": "src/shared/utilities.js",
    "longname": "src/shared/utilities.js~range",
    "access": null,
    "export": true,
    "importPath": "solid-octo-disco/src/shared/utilities.js",
    "importStyle": "{range}",
    "description": "Creates an array filled with numbers between the range [min, max)",
    "lineNumber": 178,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "min",
        "description": "The start number, inclusive."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "max",
        "description": "The end number, exclusive"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "step",
        "description": "Step between each number, must be positive."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 325,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "getParamTypeIcon",
    "memberof": "src/shared/utilities.js",
    "longname": "src/shared/utilities.js~getParamTypeIcon",
    "access": null,
    "export": false,
    "importPath": "solid-octo-disco/src/shared/utilities.js",
    "importStyle": null,
    "description": "Returns a semantic icon name or character to represent seachParamTypes\neg. hashtag = #, mention = @",
    "lineNumber": 196,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "char or string representing paramType (could be semantic icon class)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "string",
        "description": "which represents a paramtype"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "char or string representing paramType (could be semantic icon class)"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 326,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "getSemanticCountryFlagName",
    "memberof": "src/shared/utilities.js",
    "longname": "src/shared/utilities.js~getSemanticCountryFlagName",
    "access": null,
    "export": true,
    "importPath": "solid-octo-disco/src/shared/utilities.js",
    "importStyle": "{getSemanticCountryFlagName}",
    "description": "Transforms the football-data.org api's player nationalities to semantic flag icon class name",
    "lineNumber": 216,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "string representing semantic flag icon class name"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "string",
        "description": "which represents football-data.org's a player's nationality"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "string representing semantic flag icon class name"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 327,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/shared/utilities.spec.js",
    "memberof": null,
    "longname": "src/shared/utilities.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import { should } from 'chai';\r\nimport deepFreeze from 'deep-freeze';\r\nimport {\r\n  flattenObjectToArray, flattenImmutableObject,\r\n  makePostHeader,\r\n  createTwitterParamTypes, toggleParamType,\r\n  range\r\n} from './utilities';\r\nshould();\r\n\r\ndescribe('#Utilities', () => {\r\n  describe('Object flattener', () => {\r\n    it('can flatten an object to an array', () => {\r\n      flattenObjectToArray(\r\n        { a: { b: 1 }, d: { e: 2 } }\r\n      ).should.deep.equal(\r\n        [{ b: 1 }, { e: 2 }]\r\n      );\r\n    });\r\n\r\n    it('can resolve functions on an immutable object and return a flat object', () => {\r\n      const exampleImmutableObject = {\r\n        name: () => ('John'),\r\n\r\n        age: () => (7),\r\n\r\n        notAFunction: 'something',\r\n      };\r\n\r\n      exampleImmutableObject.name().should.equal('John');\r\n\r\n      flattenImmutableObject(exampleImmutableObject).should.deep.equal({\r\n        name: 'John',\r\n        age: 7,\r\n        notAFunction: 'something',\r\n      });\r\n    });\r\n\r\n    it('can recursively resolve functions on an immutable object and return a flat object', () => {\r\n      const exampleImmutableObject = {\r\n        thing: () => ({\r\n          inner: () => ('okay'),\r\n        }),\r\n      };\r\n\r\n      flattenImmutableObject(exampleImmutableObject, true).should.deep.equal({\r\n        thing: {\r\n          inner: 'okay',\r\n        },\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('HTTP request creator', () => {\r\n    it('can create a simple POST request', () => {\r\n      makePostHeader('hello').should.deep.equal({\r\n        method: 'POST',\r\n        headers: {\r\n          Accept: 'application/json',\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: 'hello',\r\n      });\r\n    });\r\n\r\n    it('can create a simple POST request given an object', () => {\r\n      makePostHeader({ a: 'b' }).should.deep.equal({\r\n        method: 'POST',\r\n        headers: {\r\n          Accept: 'application/json',\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: '{\"a\":\"b\"}',\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('paramType object functions', () => {\r\n    it('can create a twitter specific paramTypes object for search terms', () => {\r\n      createTwitterParamTypes(['hashtag', 'keyword']).should.deep.equal(\r\n        [\r\n          {\r\n            name: 'author',\r\n            selected: false,\r\n            icon: 'user icon',\r\n          },\r\n          {\r\n            name: 'hashtag',\r\n            selected: true,\r\n            icon: '#',\r\n          },\r\n          {\r\n            name: 'keyword',\r\n            selected: true,\r\n            icon: 'file text icon',\r\n          },\r\n          {\r\n            name: 'mention',\r\n            selected: false,\r\n            icon: 'at icon',\r\n          },\r\n        ]\r\n      );\r\n    });\r\n\r\n    it('can toggle a paramType with the paramTypeName to toggle', () => {\r\n      const paramTypesBefore = createTwitterParamTypes(['hashtag', 'keyword']);\r\n      const paramTypesExpected = createTwitterParamTypes(['hashtag']);\r\n\r\n      deepFreeze(paramTypesBefore);\r\n\r\n      toggleParamType(paramTypesBefore, 'keyword').should.deep.equal(paramTypesExpected);\r\n    });\r\n  });\r\n\r\n  describe('creating a range', () => {\r\n    it('can create a simple range from 0 to n', () => {\r\n      range(0, 5).should.deep.equal([0, 1, 2, 3, 4]);\r\n    });\r\n\r\n    it('can create a simple range from m to n', () => {\r\n      range(2, 5).should.deep.equal([2, 3, 4]);\r\n    });\r\n\r\n    it('returns empty if m > n', () => {\r\n      range(10, 5).should.deep.equal([]);\r\n    });\r\n\r\n    it('can step correctly', () => {\r\n      range(1, 10, 2).should.deep.equal([1, 3, 5, 7, 9]);\r\n    });\r\n\r\n    it('does not allow negative steps', () => {\r\n      range(1, 10, -1).should.deep.equal([]);\r\n    });\r\n  });\r\n});\r\n\r\n"
  },
  {
    "__docId__": 329,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Infinity",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 330,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~NaN",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 331,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~undefined",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 332,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~null",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 333,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Object",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 334,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~object",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 335,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Function",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 336,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~function",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 337,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Boolean",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 338,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~boolean",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 339,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Symbol",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 340,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Error",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 341,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~EvalError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 342,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~InternalError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 343,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~RangeError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 344,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~ReferenceError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 345,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~SyntaxError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 346,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~TypeError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 347,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~URIError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 348,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Number",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 349,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~number",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 350,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Date",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 351,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~String",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 352,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~string",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 353,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~RegExp",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 354,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 355,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Int8Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 356,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint8Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 357,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint8ClampedArray",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 358,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Int16Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 359,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint16Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 360,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Int32Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 361,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint32Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 362,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Float32Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 363,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Float64Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 364,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Map",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 365,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Set",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 366,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~WeakMap",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 367,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~WeakSet",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 368,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~ArrayBuffer",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 369,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~DataView",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 370,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~JSON",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 371,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Promise",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 372,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Generator",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 373,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~GeneratorFunction",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 374,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Reflect",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 375,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Proxy",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 377,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "CanvasRenderingContext2D",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~CanvasRenderingContext2D",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 378,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "DocumentFragment",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/DocumentFragment",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~DocumentFragment",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 379,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Element",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/Element",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~Element",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 380,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Event",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/Event",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~Event",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 381,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Node",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/Node",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~Node",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 382,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "NodeList",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/NodeList",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~NodeList",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 383,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "XMLHttpRequest",
    "externalLink": "https://developer.mozilla.org/en/docs/Web/API/XMLHttpRequest",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~XMLHttpRequest",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 384,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "AudioContext",
    "externalLink": "https://developer.mozilla.org/en/docs/Web/API/AudioContext",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~AudioContext",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 385,
    "kind": "testFile",
    "static": true,
    "variation": null,
    "name": "src/client/results/mostfrequent/mostFrequentActions.spec.js",
    "memberof": null,
    "longname": "src/client/results/mostfrequent/mostFrequentActions.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import { should } from 'chai';\r\nimport {\r\n  UPDATE_MOST_USED_WORDS_SEARCH_FILTER, updateMostUsedWordsSearch,\r\n  UPDATE_MOST_ACTIVE_USERS_SEARCH_FILTER, updateActiveUsersSearch,\r\n  TOGGLE_MOST_USED_WORDS, toggleMostUsedWords,\r\n  TOGGLE_MOST_ACTIVE_USER, toggleMostActiveUser,\r\n  TOGGLE_ALL_MOST_USED_WORDS, toggleAllMostUsedWordsSearch,\r\n  TOGGLE_ALL_MOST_ACTIVE_USERS, toggleAllMostActiveUsersSearch,\r\n} from './mostFrequentActions';\r\n\r\ndescribe('#MostFrequentActions', () => {\r\n  it('should create a correct search for most  used words', () => {\r\n    updateMostUsedWordsSearch('filter').should.deep.equal({\r\n      type: UPDATE_MOST_USED_WORDS_SEARCH_FILTER,\r\n      filterTerm: 'filter',\r\n    });\r\n  });\r\n\r\n  it('should create a correct search for most active user', () => {\r\n    updateActiveUsersSearch('filter').should.deep.equal({\r\n      type: UPDATE_MOST_ACTIVE_USERS_SEARCH_FILTER,\r\n      filterTerm: 'filter',\r\n    });\r\n  });\r\n\r\n  it('should create an action for toggling hiding most used word', () => {\r\n    toggleMostUsedWords(['exampleWord']).should.deep.equal({\r\n      type: TOGGLE_MOST_USED_WORDS,\r\n      words: ['exampleWord'],\r\n    });\r\n  });\r\n\r\n  it('should create an action for toggling hiding most active user', () => {\r\n    toggleMostActiveUser('12345').should.deep.equal({\r\n      type: TOGGLE_MOST_ACTIVE_USER,\r\n      userId: '12345',\r\n    });\r\n  });\r\n\r\n  it('should create an action for toggling all most used words', () => {\r\n    toggleAllMostUsedWordsSearch().should.deep.equal({\r\n      type: TOGGLE_ALL_MOST_USED_WORDS,\r\n    });\r\n  });\r\n\r\n  it('should create an action for toggling all most active users', () => {\r\n    toggleAllMostActiveUsersSearch().should.deep.equal({\r\n      type: TOGGLE_ALL_MOST_ACTIVE_USERS,\r\n    });\r\n  });\r\n});\r\n"
  },
  {
    "__docId__": 386,
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe0",
    "testId": 0,
    "memberof": "src/client/results/mostfrequent/mostFrequentActions.spec.js",
    "testDepth": 0,
    "longname": "src/client/results/mostfrequent/mostFrequentActions.spec.js~describe0",
    "access": null,
    "description": "#MostFrequentActions",
    "lineNumber": 11
  },
  {
    "__docId__": 387,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it1",
    "testId": 1,
    "memberof": "src/client/results/mostfrequent/mostFrequentActions.spec.js~describe0",
    "testDepth": 1,
    "longname": "src/client/results/mostfrequent/mostFrequentActions.spec.js~describe0.it1",
    "access": null,
    "description": "should create a correct search for most  used words",
    "lineNumber": 12
  },
  {
    "__docId__": 388,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it2",
    "testId": 2,
    "memberof": "src/client/results/mostfrequent/mostFrequentActions.spec.js~describe0",
    "testDepth": 1,
    "longname": "src/client/results/mostfrequent/mostFrequentActions.spec.js~describe0.it2",
    "access": null,
    "description": "should create a correct search for most active user",
    "lineNumber": 19
  },
  {
    "__docId__": 389,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it3",
    "testId": 3,
    "memberof": "src/client/results/mostfrequent/mostFrequentActions.spec.js~describe0",
    "testDepth": 1,
    "longname": "src/client/results/mostfrequent/mostFrequentActions.spec.js~describe0.it3",
    "access": null,
    "description": "should create an action for toggling hiding most used word",
    "lineNumber": 26
  },
  {
    "__docId__": 390,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it4",
    "testId": 4,
    "memberof": "src/client/results/mostfrequent/mostFrequentActions.spec.js~describe0",
    "testDepth": 1,
    "longname": "src/client/results/mostfrequent/mostFrequentActions.spec.js~describe0.it4",
    "access": null,
    "description": "should create an action for toggling hiding most active user",
    "lineNumber": 33
  },
  {
    "__docId__": 391,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it5",
    "testId": 5,
    "memberof": "src/client/results/mostfrequent/mostFrequentActions.spec.js~describe0",
    "testDepth": 1,
    "longname": "src/client/results/mostfrequent/mostFrequentActions.spec.js~describe0.it5",
    "access": null,
    "description": "should create an action for toggling all most used words",
    "lineNumber": 40
  },
  {
    "__docId__": 392,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it6",
    "testId": 6,
    "memberof": "src/client/results/mostfrequent/mostFrequentActions.spec.js~describe0",
    "testDepth": 1,
    "longname": "src/client/results/mostfrequent/mostFrequentActions.spec.js~describe0.it6",
    "access": null,
    "description": "should create an action for toggling all most active users",
    "lineNumber": 46
  },
  {
    "__docId__": 393,
    "kind": "testFile",
    "static": true,
    "variation": null,
    "name": "src/client/results/mostfrequent/mostFrequentReducer.spec.js",
    "memberof": null,
    "longname": "src/client/results/mostfrequent/mostFrequentReducer.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import { should } from 'chai';\r\nimport deepFreeze from 'deep-freeze';\r\nimport mostFrequentReducer from './mostFrequentReducer';\r\nimport {\r\n  updateMostUsedWordsSearch, toggleMostUsedWords, toggleAllMostUsedWordsSearch,\r\n  updateActiveUsersSearch, toggleMostActiveUser, toggleAllMostActiveUsersSearch\r\n} from './mostFrequentActions';\r\n\r\nconst initialState = {\r\n  words: {\r\n    filterTerm: '',\r\n    toToggle: [],\r\n    isToggledActionHide: true,\r\n  },\r\n  users: {\r\n    filterTerm: '',\r\n    toToggle: [],\r\n    isToggledActionHide: true,\r\n  },\r\n};\r\n\r\ndescribe('#MostFrequentReducer', () => {\r\n  describe('Most used words', () => {\r\n    it('should add the given search term to words search filter', () => {\r\n      const stateBefore = initialState;\r\n      const action = updateMostUsedWordsSearch('Football');\r\n\r\n      const stateAfter = {\r\n        words: {\r\n          filterTerm: 'Football',\r\n          toToggle: [],\r\n          isToggledActionHide: true,\r\n        },\r\n        users: {\r\n          filterTerm: '',\r\n          toToggle: [],\r\n          isToggledActionHide: true,\r\n        },\r\n      };\r\n\r\n      deepFreeze(stateBefore);\r\n      deepFreeze(action);\r\n\r\n      mostFrequentReducer(stateBefore, action).should.deep.equal(stateAfter);\r\n    });\r\n\r\n    it('should change toggle isToggledActionHide and empty the toToggle words', () => {\r\n      const stateBefore = {\r\n        words: {\r\n          filterTerm: '',\r\n          toToggle: ['lEmOn'],\r\n          isToggledActionHide: true,\r\n        },\r\n        users: {\r\n          filterTerm: '',\r\n          toToggle: ['12345'],\r\n          isToggledActionHide: true,\r\n        },\r\n      };\r\n      const action = toggleAllMostUsedWordsSearch();\r\n\r\n      const stateAfter = {\r\n        words: {\r\n          filterTerm: '',\r\n          toToggle: [],\r\n          isToggledActionHide: false,\r\n        },\r\n        users: {\r\n          filterTerm: '',\r\n          toToggle: ['12345'],\r\n          isToggledActionHide: true,\r\n        },\r\n      };\r\n\r\n      deepFreeze(stateBefore);\r\n      deepFreeze(action);\r\n\r\n      mostFrequentReducer(stateBefore, action).should.deep.equal(stateAfter);\r\n    });\r\n\r\n    describe('Toggling of hidden words', () => {\r\n      it('should add a hidden word', () => {\r\n        const stateBefore = initialState;\r\n        const action = toggleMostUsedWords(['LeMoN']);\r\n\r\n        const stateAfter = {\r\n          words: {\r\n            filterTerm: '',\r\n            toToggle: ['LeMoN'],\r\n            isToggledActionHide: true,\r\n          },\r\n          users: {\r\n            filterTerm: '',\r\n            toToggle: [],\r\n            isToggledActionHide: true,\r\n          },\r\n        };\r\n\r\n        deepFreeze(stateBefore);\r\n        deepFreeze(action);\r\n\r\n        mostFrequentReducer(stateBefore, action).should.deep.equal(stateAfter);\r\n      });\r\n\r\n      it('should not conflate similar hidden words', () => {\r\n        const stateBefore = {\r\n          words: {\r\n            filterTerm: '',\r\n            toToggle: ['lEmOn'],\r\n            isToggledActionHide: true,\r\n          },\r\n          users: {\r\n            filterTerm: '',\r\n            toToggle: [],\r\n            isToggledActionHide: true,\r\n          },\r\n        };\r\n        const action = toggleMostUsedWords(['LeMoN']);\r\n\r\n        const stateAfter = {\r\n          words: {\r\n            filterTerm: '',\r\n            toToggle: ['lEmOn', 'LeMoN'],\r\n            isToggledActionHide: true,\r\n          },\r\n          users: {\r\n            filterTerm: '',\r\n            toToggle: [],\r\n            isToggledActionHide: true,\r\n          },\r\n        };\r\n\r\n        deepFreeze(stateBefore);\r\n        deepFreeze(action);\r\n\r\n        mostFrequentReducer(stateBefore, action).should.deep.equal(stateAfter);\r\n      });\r\n\r\n      it('should show/remove a hidden word', () => {\r\n        const stateBefore = {\r\n          words: {\r\n            filterTerm: '',\r\n            toToggle: ['LEMON'],\r\n            isToggledActionHide: true,\r\n          },\r\n          users: {\r\n            filterTerm: '',\r\n            toToggle: [],\r\n            isToggledActionHide: true,\r\n          },\r\n        };\r\n        const action = toggleMostUsedWords(['LEMON']);\r\n\r\n        const stateAfter = initialState;\r\n\r\n        deepFreeze(stateBefore);\r\n        deepFreeze(action);\r\n\r\n        mostFrequentReducer(stateBefore, action).should.deep.equal(stateAfter);\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('Most active users', () => {\r\n    it('should add the given search term for most active users', () => {\r\n      const stateBefore = initialState;\r\n      const action = updateActiveUsersSearch('Football');\r\n\r\n      const stateAfter = {\r\n        words: {\r\n          filterTerm: '',\r\n          toToggle: [],\r\n          isToggledActionHide: true,\r\n        },\r\n        users: {\r\n          filterTerm: 'Football',\r\n          toToggle: [],\r\n          isToggledActionHide: true,\r\n        },\r\n      };\r\n\r\n      deepFreeze(stateBefore);\r\n      deepFreeze(action);\r\n\r\n      mostFrequentReducer(stateBefore, action).should.deep.equal(stateAfter);\r\n    });\r\n\r\n    it('should change isToggledActionHide and empty the toToggle users', () => {\r\n      const stateBefore = {\r\n        words: {\r\n          filterTerm: '',\r\n          toToggle: [],\r\n          isToggledActionHide: true,\r\n        },\r\n        users: {\r\n          filterTerm: '',\r\n          toToggle: ['12345'],\r\n          isToggledActionHide: true,\r\n        },\r\n      };\r\n      const action = toggleAllMostActiveUsersSearch();\r\n\r\n      const stateAfter = {\r\n        words: {\r\n          filterTerm: '',\r\n          toToggle: [],\r\n          isToggledActionHide: true,\r\n        },\r\n        users: {\r\n          filterTerm: '',\r\n          toToggle: [],\r\n          isToggledActionHide: false,\r\n        },\r\n      };\r\n\r\n      deepFreeze(stateBefore);\r\n      deepFreeze(action);\r\n\r\n      mostFrequentReducer(stateBefore, action).should.deep.equal(stateAfter);\r\n    });\r\n\r\n    describe('Toggling of hidden users', () => {\r\n      it('should add a hidden word', () => {\r\n        const stateBefore = initialState;\r\n        const action = toggleMostActiveUser('12345');\r\n\r\n        const stateAfter = {\r\n          words: {\r\n            filterTerm: '',\r\n            toToggle: [],\r\n            isToggledActionHide: true,\r\n          },\r\n          users: {\r\n            filterTerm: '',\r\n            toToggle: ['12345'],\r\n            isToggledActionHide: true,\r\n          },\r\n        };\r\n\r\n        deepFreeze(stateBefore);\r\n        deepFreeze(action);\r\n\r\n        mostFrequentReducer(stateBefore, action).should.deep.equal(stateAfter);\r\n      });\r\n\r\n      it('should show/remove a hidden users', () => {\r\n        const stateBefore = {\r\n          words: {\r\n            filterTerm: '',\r\n            toToggle: [],\r\n            isToggledActionHide: true,\r\n          },\r\n          users: {\r\n            filterTerm: '',\r\n            toToggle: ['12345'],\r\n            isToggledActionHide: true,\r\n          },\r\n        };\r\n        const action = toggleMostActiveUser('12345');\r\n\r\n        const stateAfter = initialState;\r\n\r\n        deepFreeze(stateBefore);\r\n        deepFreeze(action);\r\n\r\n        mostFrequentReducer(stateBefore, action).should.deep.equal(stateAfter);\r\n      });\r\n    });\r\n  });\r\n});\r\n"
  },
  {
    "__docId__": 394,
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe7",
    "testId": 7,
    "memberof": "src/client/results/mostfrequent/mostFrequentReducer.spec.js",
    "testDepth": 0,
    "longname": "src/client/results/mostfrequent/mostFrequentReducer.spec.js~describe7",
    "access": null,
    "description": "#MostFrequentReducer",
    "lineNumber": 22
  },
  {
    "__docId__": 395,
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe8",
    "testId": 8,
    "memberof": "src/client/results/mostfrequent/mostFrequentReducer.spec.js~describe7",
    "testDepth": 1,
    "longname": "src/client/results/mostfrequent/mostFrequentReducer.spec.js~describe7.describe8",
    "access": null,
    "description": "Most used words",
    "lineNumber": 23
  },
  {
    "__docId__": 396,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it9",
    "testId": 9,
    "memberof": "src/client/results/mostfrequent/mostFrequentReducer.spec.js~describe7.describe8",
    "testDepth": 2,
    "longname": "src/client/results/mostfrequent/mostFrequentReducer.spec.js~describe7.describe8.it9",
    "access": null,
    "description": "should add the given search term to words search filter",
    "lineNumber": 24
  },
  {
    "__docId__": 397,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it10",
    "testId": 10,
    "memberof": "src/client/results/mostfrequent/mostFrequentReducer.spec.js~describe7.describe8",
    "testDepth": 2,
    "longname": "src/client/results/mostfrequent/mostFrequentReducer.spec.js~describe7.describe8.it10",
    "access": null,
    "description": "should change toggle isToggledActionHide and empty the toToggle words",
    "lineNumber": 47
  },
  {
    "__docId__": 398,
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe11",
    "testId": 11,
    "memberof": "src/client/results/mostfrequent/mostFrequentReducer.spec.js~describe7.describe8",
    "testDepth": 2,
    "longname": "src/client/results/mostfrequent/mostFrequentReducer.spec.js~describe7.describe8.describe11",
    "access": null,
    "description": "Toggling of hidden words",
    "lineNumber": 81
  },
  {
    "__docId__": 399,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it12",
    "testId": 12,
    "memberof": "src/client/results/mostfrequent/mostFrequentReducer.spec.js~describe7.describe8.describe11",
    "testDepth": 3,
    "longname": "src/client/results/mostfrequent/mostFrequentReducer.spec.js~describe7.describe8.describe11.it12",
    "access": null,
    "description": "should add a hidden word",
    "lineNumber": 82
  },
  {
    "__docId__": 400,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it13",
    "testId": 13,
    "memberof": "src/client/results/mostfrequent/mostFrequentReducer.spec.js~describe7.describe8.describe11",
    "testDepth": 3,
    "longname": "src/client/results/mostfrequent/mostFrequentReducer.spec.js~describe7.describe8.describe11.it13",
    "access": null,
    "description": "should not conflate similar hidden words",
    "lineNumber": 105
  },
  {
    "__docId__": 401,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it14",
    "testId": 14,
    "memberof": "src/client/results/mostfrequent/mostFrequentReducer.spec.js~describe7.describe8.describe11",
    "testDepth": 3,
    "longname": "src/client/results/mostfrequent/mostFrequentReducer.spec.js~describe7.describe8.describe11.it14",
    "access": null,
    "description": "should show/remove a hidden word",
    "lineNumber": 139
  },
  {
    "__docId__": 402,
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe15",
    "testId": 15,
    "memberof": "src/client/results/mostfrequent/mostFrequentReducer.spec.js~describe7",
    "testDepth": 1,
    "longname": "src/client/results/mostfrequent/mostFrequentReducer.spec.js~describe7.describe15",
    "access": null,
    "description": "Most active users",
    "lineNumber": 164
  },
  {
    "__docId__": 403,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it16",
    "testId": 16,
    "memberof": "src/client/results/mostfrequent/mostFrequentReducer.spec.js~describe7.describe15",
    "testDepth": 2,
    "longname": "src/client/results/mostfrequent/mostFrequentReducer.spec.js~describe7.describe15.it16",
    "access": null,
    "description": "should add the given search term for most active users",
    "lineNumber": 165
  },
  {
    "__docId__": 404,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it17",
    "testId": 17,
    "memberof": "src/client/results/mostfrequent/mostFrequentReducer.spec.js~describe7.describe15",
    "testDepth": 2,
    "longname": "src/client/results/mostfrequent/mostFrequentReducer.spec.js~describe7.describe15.it17",
    "access": null,
    "description": "should change isToggledActionHide and empty the toToggle users",
    "lineNumber": 188
  },
  {
    "__docId__": 405,
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe18",
    "testId": 18,
    "memberof": "src/client/results/mostfrequent/mostFrequentReducer.spec.js~describe7.describe15",
    "testDepth": 2,
    "longname": "src/client/results/mostfrequent/mostFrequentReducer.spec.js~describe7.describe15.describe18",
    "access": null,
    "description": "Toggling of hidden users",
    "lineNumber": 222
  },
  {
    "__docId__": 406,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it19",
    "testId": 19,
    "memberof": "src/client/results/mostfrequent/mostFrequentReducer.spec.js~describe7.describe15.describe18",
    "testDepth": 3,
    "longname": "src/client/results/mostfrequent/mostFrequentReducer.spec.js~describe7.describe15.describe18.it19",
    "access": null,
    "description": "should add a hidden word",
    "lineNumber": 223
  },
  {
    "__docId__": 407,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it20",
    "testId": 20,
    "memberof": "src/client/results/mostfrequent/mostFrequentReducer.spec.js~describe7.describe15.describe18",
    "testDepth": 3,
    "longname": "src/client/results/mostfrequent/mostFrequentReducer.spec.js~describe7.describe15.describe18.it20",
    "access": null,
    "description": "should show/remove a hidden users",
    "lineNumber": 246
  },
  {
    "__docId__": 408,
    "kind": "testFile",
    "static": true,
    "variation": null,
    "name": "src/client/search/categories/categoryFilterActions.spec.js",
    "memberof": null,
    "longname": "src/client/search/categories/categoryFilterActions.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import { should } from 'chai';\r\nimport * as actions from './categoryFilterActions';\r\n\r\ndescribe('#categoryFilterActions', () => {\r\n  describe('footballSeasonActions', () => {\r\n    it('should create an action to request football season', () => {\r\n      const year = 2016;\r\n\r\n      const expectedAction = {\r\n        type: actions.REQUEST_FOOTBALL_SEASON,\r\n        year,\r\n      };\r\n\r\n      actions.requestFootballSeason(year).should.deep.equal(expectedAction);\r\n    });\r\n\r\n    it('should create an action to receive football season', () => {\r\n      const year = 2016;\r\n      const exampleJson = { seasons: ['season1', 'season2'] };\r\n\r\n      const expectedAction = {\r\n        type: actions.RECEIVE_FOOTBALL_SEASON,\r\n        year,\r\n        footballSeasons: exampleJson,\r\n      };\r\n\r\n      actions.receiveFootballSeason(year, exampleJson).should.deep.equal(expectedAction);\r\n    });\r\n\r\n    it('should create an action to remove a football season', () => {\r\n      const year = 2016;\r\n\r\n      const expectedAction = {\r\n        type: actions.REMOVE_FOOTBALL_SEASON,\r\n        year,\r\n      };\r\n\r\n      actions.removeFootballSeason(year).should.deep.equal(expectedAction);\r\n    });\r\n  });\r\n\r\n  describe('yearsFootballLeaguesTeams', () => {\r\n    it('should create an action to request football league teams', () => {\r\n      const year = 2016;\r\n\r\n      const expectedAction = {\r\n        type: actions.REQUEST_YEARS_FOOTBALL_LEAGUES_TEAMS,\r\n        year,\r\n      };\r\n\r\n      actions.requestYearsFootballLeaguesTeams(year).should.deep.equal(expectedAction);\r\n    });\r\n\r\n    it('should create an action to receive football league teams', () => {\r\n      const year = 2016;\r\n      const exampleJson = { leagues: ['league1', 'league2'] };\r\n\r\n      const expectedAction = {\r\n        type: actions.RECEIVE_YEARS_FOOTBALL_LEAGUES_TEAMS,\r\n        year,\r\n        footballLeagues: exampleJson,\r\n      };\r\n\r\n      actions.receiveYearsFootballLeaguesTeams(year, exampleJson).should.deep.equal(expectedAction);\r\n    });\r\n  });\r\n\r\n  describe('footballTeamPlayers', () => {\r\n    it('should create an action to select and request football team players', () => {\r\n      const id = 1;\r\n      const name = 'example football team';\r\n      const shortName = 'ExFootTeam';\r\n      const crestUrl = 'http://exFootTeamCrest.com';\r\n\r\n      const expectedAction = {\r\n        type: actions.SELECT_AND_REQUEST_FOOTBALL_TEAM,\r\n        id,\r\n        name,\r\n        shortName,\r\n        crestUrl,\r\n      };\r\n\r\n      actions.selectAndRequestFootballTeam(id, name, shortName, crestUrl).should.deep.equal(expectedAction);\r\n    });\r\n\r\n    it('should create an action to select and request football team players', () => {\r\n      const exampleJson = { players: ['player1', 'player2'] };\r\n\r\n      const expectedAction = {\r\n        type: actions.RECEIVE_SELECTED_FOOTBALL_TEAM_PLAYERS,\r\n        footballTeamPlayers: exampleJson,\r\n      };\r\n\r\n      actions.receiveSelectedFootballTeamPlayers(exampleJson).should.deep.equal(expectedAction);\r\n    });\r\n\r\n    it('should create an action to remove selection of a football team players', () => {\r\n      const expectedAction = {\r\n        type: actions.REMOVE_SELECTED_FOOTBALL_TEAM_PLAYERS,\r\n      };\r\n\r\n      actions.removeSelectedFootballTeamPlayers().should.deep.equal(expectedAction);\r\n    });\r\n  });\r\n});\r\n"
  },
  {
    "__docId__": 409,
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe21",
    "testId": 21,
    "memberof": "src/client/search/categories/categoryFilterActions.spec.js",
    "testDepth": 0,
    "longname": "src/client/search/categories/categoryFilterActions.spec.js~describe21",
    "access": null,
    "description": "#categoryFilterActions",
    "lineNumber": 4
  },
  {
    "__docId__": 410,
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe22",
    "testId": 22,
    "memberof": "src/client/search/categories/categoryFilterActions.spec.js~describe21",
    "testDepth": 1,
    "longname": "src/client/search/categories/categoryFilterActions.spec.js~describe21.describe22",
    "access": null,
    "description": "footballSeasonActions",
    "lineNumber": 5
  },
  {
    "__docId__": 411,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it23",
    "testId": 23,
    "memberof": "src/client/search/categories/categoryFilterActions.spec.js~describe21.describe22",
    "testDepth": 2,
    "longname": "src/client/search/categories/categoryFilterActions.spec.js~describe21.describe22.it23",
    "access": null,
    "description": "should create an action to request football season",
    "lineNumber": 6
  },
  {
    "__docId__": 412,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it24",
    "testId": 24,
    "memberof": "src/client/search/categories/categoryFilterActions.spec.js~describe21.describe22",
    "testDepth": 2,
    "longname": "src/client/search/categories/categoryFilterActions.spec.js~describe21.describe22.it24",
    "access": null,
    "description": "should create an action to receive football season",
    "lineNumber": 17
  },
  {
    "__docId__": 413,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it25",
    "testId": 25,
    "memberof": "src/client/search/categories/categoryFilterActions.spec.js~describe21.describe22",
    "testDepth": 2,
    "longname": "src/client/search/categories/categoryFilterActions.spec.js~describe21.describe22.it25",
    "access": null,
    "description": "should create an action to remove a football season",
    "lineNumber": 30
  },
  {
    "__docId__": 414,
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe26",
    "testId": 26,
    "memberof": "src/client/search/categories/categoryFilterActions.spec.js~describe21",
    "testDepth": 1,
    "longname": "src/client/search/categories/categoryFilterActions.spec.js~describe21.describe26",
    "access": null,
    "description": "yearsFootballLeaguesTeams",
    "lineNumber": 42
  },
  {
    "__docId__": 415,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it27",
    "testId": 27,
    "memberof": "src/client/search/categories/categoryFilterActions.spec.js~describe21.describe26",
    "testDepth": 2,
    "longname": "src/client/search/categories/categoryFilterActions.spec.js~describe21.describe26.it27",
    "access": null,
    "description": "should create an action to request football league teams",
    "lineNumber": 43
  },
  {
    "__docId__": 416,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it28",
    "testId": 28,
    "memberof": "src/client/search/categories/categoryFilterActions.spec.js~describe21.describe26",
    "testDepth": 2,
    "longname": "src/client/search/categories/categoryFilterActions.spec.js~describe21.describe26.it28",
    "access": null,
    "description": "should create an action to receive football league teams",
    "lineNumber": 54
  },
  {
    "__docId__": 417,
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe29",
    "testId": 29,
    "memberof": "src/client/search/categories/categoryFilterActions.spec.js~describe21",
    "testDepth": 1,
    "longname": "src/client/search/categories/categoryFilterActions.spec.js~describe21.describe29",
    "access": null,
    "description": "footballTeamPlayers",
    "lineNumber": 68
  },
  {
    "__docId__": 418,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it30",
    "testId": 30,
    "memberof": "src/client/search/categories/categoryFilterActions.spec.js~describe21.describe29",
    "testDepth": 2,
    "longname": "src/client/search/categories/categoryFilterActions.spec.js~describe21.describe29.it30",
    "access": null,
    "description": "should create an action to select and request football team players",
    "lineNumber": 69
  },
  {
    "__docId__": 419,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it31",
    "testId": 31,
    "memberof": "src/client/search/categories/categoryFilterActions.spec.js~describe21.describe29",
    "testDepth": 2,
    "longname": "src/client/search/categories/categoryFilterActions.spec.js~describe21.describe29.it31",
    "access": null,
    "description": "should create an action to select and request football team players",
    "lineNumber": 86
  },
  {
    "__docId__": 420,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it32",
    "testId": 32,
    "memberof": "src/client/search/categories/categoryFilterActions.spec.js~describe21.describe29",
    "testDepth": 2,
    "longname": "src/client/search/categories/categoryFilterActions.spec.js~describe21.describe29.it32",
    "access": null,
    "description": "should create an action to remove selection of a football team players",
    "lineNumber": 97
  },
  {
    "__docId__": 421,
    "kind": "testFile",
    "static": true,
    "variation": null,
    "name": "src/client/search/categories/categoryFiltersReducer.spec.js",
    "memberof": null,
    "longname": "src/client/search/categories/categoryFiltersReducer.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import { should } from 'chai';\r\nimport deepFreeze from 'deep-freeze';\r\nimport footballCategoryFiltersReducer, { footballCategoryFiltersInitialState } from './categoryFiltersReducer';\r\nimport * as actions from './categoryFilterActions';\r\n\r\ndescribe('#footballCategoryFiltersReducer', () => {\r\n  const year = 2016;\r\n  describe('footballSeason', () => {\r\n    it('should start fetching the requested seasons data', () => {\r\n      const stateBefore = footballCategoryFiltersInitialState;\r\n      const action = actions.requestFootballSeason(year);\r\n\r\n      const stateAfter = {\r\n        seasonsByYear: {\r\n          [year]: {\r\n            isFetching: true,\r\n            seasons: [],\r\n          },\r\n        },\r\n        leagueTeamsByYear: {},\r\n        selectedTeam: {\r\n          isSelected: false,\r\n          isFetching: false,\r\n        },\r\n      };\r\n\r\n      deepFreeze(stateBefore);\r\n      deepFreeze(action);\r\n\r\n      footballCategoryFiltersReducer(stateBefore, action).should.deep.equal(stateAfter);\r\n    });\r\n\r\n    it('should finish fetching the requested seasons data', () => {\r\n      const exampleJson = { seasons: ['season1', 'season2'] };\r\n      const stateBefore = footballCategoryFiltersReducer(\r\n        footballCategoryFiltersInitialState,\r\n        actions.requestFootballSeason(year)\r\n      );\r\n      const action = actions.receiveFootballSeason(year, exampleJson);\r\n\r\n      const stateAfter = {\r\n        seasonsByYear: {\r\n          [year]: {\r\n            isFetching: false,\r\n            seasons: exampleJson,\r\n          },\r\n        },\r\n        leagueTeamsByYear: {},\r\n        selectedTeam: {\r\n          isSelected: false,\r\n          isFetching: false,\r\n        },\r\n      };\r\n\r\n      deepFreeze(stateBefore);\r\n      deepFreeze(action);\r\n\r\n      footballCategoryFiltersReducer(stateBefore, action).should.deep.equal(stateAfter);\r\n    });\r\n  });\r\n\r\n  describe('years football leagues teams', () => {\r\n    it('should start fetching the requested years football league teams data', () => {\r\n      const stateBefore = footballCategoryFiltersInitialState;\r\n      const action = actions.requestYearsFootballLeaguesTeams(year);\r\n\r\n      const stateAfter = {\r\n        seasonsByYear: {},\r\n        leagueTeamsByYear: {\r\n          [year]: {\r\n            isFetching: true,\r\n            leagues: [],\r\n          },\r\n        },\r\n        selectedTeam: {\r\n          isSelected: false,\r\n          isFetching: false,\r\n        },\r\n      };\r\n\r\n      deepFreeze(stateBefore);\r\n      deepFreeze(action);\r\n\r\n      footballCategoryFiltersReducer(stateBefore, action).should.deep.equal(stateAfter);\r\n    });\r\n\r\n    it('should finish fetching the requested years football league teams data', () => {\r\n      const exampleJson = { leagues: ['league1', 'league2'] };\r\n      const stateBefore = footballCategoryFiltersReducer(\r\n        footballCategoryFiltersInitialState,\r\n        actions.requestYearsFootballLeaguesTeams(year)\r\n      );\r\n      const action = actions.receiveYearsFootballLeaguesTeams(year, exampleJson);\r\n\r\n      const stateAfter = {\r\n        seasonsByYear: {},\r\n        leagueTeamsByYear: {\r\n          [year]: {\r\n            isFetching: false,\r\n            leagues: exampleJson,\r\n          },\r\n        },\r\n        selectedTeam: {\r\n          isSelected: false,\r\n          isFetching: false,\r\n        },\r\n      };\r\n\r\n      deepFreeze(stateBefore);\r\n      deepFreeze(action);\r\n\r\n      footballCategoryFiltersReducer(stateBefore, action).should.deep.equal(stateAfter);\r\n    });\r\n  });\r\n\r\n  describe('football team players', () => {\r\n    const id = 1;\r\n    const name = 'example football team';\r\n    const shortName = 'ExFootTeam';\r\n    const crestUrl = 'http://exFootTeamCrest.com';\r\n\r\n    it('should select and start fetching the requested football team players', () => {\r\n      const stateBefore = footballCategoryFiltersInitialState;\r\n      const action = actions.selectAndRequestFootballTeam(id, name, shortName, crestUrl);\r\n\r\n      const stateAfter = {\r\n        seasonsByYear: {},\r\n        leagueTeamsByYear: {},\r\n        selectedTeam: {\r\n          isSelected: true,\r\n          isFetching: true,\r\n          id,\r\n          name,\r\n          shortName,\r\n          crestUrl,\r\n          players: [],\r\n          count: 0,\r\n        },\r\n      };\r\n\r\n      deepFreeze(stateBefore);\r\n      deepFreeze(action);\r\n\r\n      footballCategoryFiltersReducer(stateBefore, action).should.deep.equal(stateAfter);\r\n    });\r\n\r\n    it('should finish fetching the requested football team players', () => {\r\n      const exampleJson = { players: ['player1', 'player2'], count: 10 };\r\n      const stateBefore = footballCategoryFiltersReducer(\r\n        footballCategoryFiltersInitialState,\r\n        actions.selectAndRequestFootballTeam(id, name, shortName, crestUrl)\r\n      );\r\n      const action = actions.receiveSelectedFootballTeamPlayers(exampleJson);\r\n\r\n      const stateAfter = {\r\n        seasonsByYear: {},\r\n        leagueTeamsByYear: {},\r\n        selectedTeam: {\r\n          isSelected: true,\r\n          isFetching: false,\r\n          id,\r\n          name,\r\n          shortName,\r\n          crestUrl,\r\n          ...exampleJson,\r\n        },\r\n      };\r\n\r\n      deepFreeze(stateBefore);\r\n      deepFreeze(action);\r\n\r\n      footballCategoryFiltersReducer(stateBefore, action).should.deep.equal(stateAfter);\r\n    });\r\n\r\n    it('should remove the selected football team players', () => {\r\n      const exampleJson = { players: ['player1', 'player2'] };\r\n      const stateBefore = footballCategoryFiltersReducer(\r\n        footballCategoryFiltersInitialState,\r\n        actions.receiveSelectedFootballTeamPlayers(exampleJson),\r\n      );\r\n      const action = actions.removeSelectedFootballTeamPlayers();\r\n\r\n      const stateAfter = footballCategoryFiltersInitialState;\r\n\r\n      deepFreeze(stateBefore);\r\n      deepFreeze(action);\r\n\r\n      footballCategoryFiltersReducer(stateBefore, action).should.deep.equal(stateAfter);\r\n    });\r\n  });\r\n});\r\n"
  },
  {
    "__docId__": 422,
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe33",
    "testId": 33,
    "memberof": "src/client/search/categories/categoryFiltersReducer.spec.js",
    "testDepth": 0,
    "longname": "src/client/search/categories/categoryFiltersReducer.spec.js~describe33",
    "access": null,
    "description": "#footballCategoryFiltersReducer",
    "lineNumber": 6
  },
  {
    "__docId__": 423,
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe34",
    "testId": 34,
    "memberof": "src/client/search/categories/categoryFiltersReducer.spec.js~describe33",
    "testDepth": 1,
    "longname": "src/client/search/categories/categoryFiltersReducer.spec.js~describe33.describe34",
    "access": null,
    "description": "footballSeason",
    "lineNumber": 8
  },
  {
    "__docId__": 424,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it35",
    "testId": 35,
    "memberof": "src/client/search/categories/categoryFiltersReducer.spec.js~describe33.describe34",
    "testDepth": 2,
    "longname": "src/client/search/categories/categoryFiltersReducer.spec.js~describe33.describe34.it35",
    "access": null,
    "description": "should start fetching the requested seasons data",
    "lineNumber": 9
  },
  {
    "__docId__": 425,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it36",
    "testId": 36,
    "memberof": "src/client/search/categories/categoryFiltersReducer.spec.js~describe33.describe34",
    "testDepth": 2,
    "longname": "src/client/search/categories/categoryFiltersReducer.spec.js~describe33.describe34.it36",
    "access": null,
    "description": "should finish fetching the requested seasons data",
    "lineNumber": 33
  },
  {
    "__docId__": 426,
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe37",
    "testId": 37,
    "memberof": "src/client/search/categories/categoryFiltersReducer.spec.js~describe33",
    "testDepth": 1,
    "longname": "src/client/search/categories/categoryFiltersReducer.spec.js~describe33.describe37",
    "access": null,
    "description": "years football leagues teams",
    "lineNumber": 62
  },
  {
    "__docId__": 427,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it38",
    "testId": 38,
    "memberof": "src/client/search/categories/categoryFiltersReducer.spec.js~describe33.describe37",
    "testDepth": 2,
    "longname": "src/client/search/categories/categoryFiltersReducer.spec.js~describe33.describe37.it38",
    "access": null,
    "description": "should start fetching the requested years football league teams data",
    "lineNumber": 63
  },
  {
    "__docId__": 428,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it39",
    "testId": 39,
    "memberof": "src/client/search/categories/categoryFiltersReducer.spec.js~describe33.describe37",
    "testDepth": 2,
    "longname": "src/client/search/categories/categoryFiltersReducer.spec.js~describe33.describe37.it39",
    "access": null,
    "description": "should finish fetching the requested years football league teams data",
    "lineNumber": 87
  },
  {
    "__docId__": 429,
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe40",
    "testId": 40,
    "memberof": "src/client/search/categories/categoryFiltersReducer.spec.js~describe33",
    "testDepth": 1,
    "longname": "src/client/search/categories/categoryFiltersReducer.spec.js~describe33.describe40",
    "access": null,
    "description": "football team players",
    "lineNumber": 116
  },
  {
    "__docId__": 430,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it41",
    "testId": 41,
    "memberof": "src/client/search/categories/categoryFiltersReducer.spec.js~describe33.describe40",
    "testDepth": 2,
    "longname": "src/client/search/categories/categoryFiltersReducer.spec.js~describe33.describe40.it41",
    "access": null,
    "description": "should select and start fetching the requested football team players",
    "lineNumber": 122
  },
  {
    "__docId__": 431,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it42",
    "testId": 42,
    "memberof": "src/client/search/categories/categoryFiltersReducer.spec.js~describe33.describe40",
    "testDepth": 2,
    "longname": "src/client/search/categories/categoryFiltersReducer.spec.js~describe33.describe40.it42",
    "access": null,
    "description": "should finish fetching the requested football team players",
    "lineNumber": 147
  },
  {
    "__docId__": 432,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it43",
    "testId": 43,
    "memberof": "src/client/search/categories/categoryFiltersReducer.spec.js~describe33.describe40",
    "testDepth": 2,
    "longname": "src/client/search/categories/categoryFiltersReducer.spec.js~describe33.describe40.it43",
    "access": null,
    "description": "should remove the selected football team players",
    "lineNumber": 175
  },
  {
    "__docId__": 433,
    "kind": "testFile",
    "static": true,
    "variation": null,
    "name": "src/client/search/searchActions.spec.js",
    "memberof": null,
    "longname": "src/client/search/searchActions.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import { should } from 'chai';\r\nimport * as actions from './searchActions';\r\n\r\ndescribe('#SearchActions', () => {\r\n  let searchTermId = 0;\r\n\r\n  it('should create an action to add a hashtag', () => {\r\n    const query = '#Footy';\r\n\r\n    const expectedQuery = 'Footy';\r\n    const expectedAction = {\r\n      type: 'ADD_SEARCH_TERM',\r\n      id: searchTermId++,\r\n      query: expectedQuery,\r\n      paramTypes: ['hashtag'],\r\n      source: 'twitter',\r\n    };\r\n\r\n    actions.addSearchTerm(query).should.deep.equal(expectedAction);\r\n  });\r\n\r\n  it('should create an action to add just a keyword', () => {\r\n    const query = '*Footy';\r\n\r\n    const expectedQuery = 'Footy';\r\n    const expectedAction = {\r\n      type: 'ADD_SEARCH_TERM',\r\n      id: searchTermId++,\r\n      query: expectedQuery,\r\n      paramTypes: ['keyword'],\r\n      source: 'twitter',\r\n    };\r\n\r\n    actions.addSearchTerm(query).should.deep.equal(expectedAction);\r\n  });\r\n\r\n  it('should create an action to add an author and mention', () => {\r\n    const query = '@Manchester';\r\n\r\n    const expectedQuery = 'Manchester';\r\n    const expectedAction = {\r\n      type: 'ADD_SEARCH_TERM',\r\n      id: searchTermId++,\r\n      query: expectedQuery,\r\n      paramTypes: ['author', 'mention'],\r\n      source: 'twitter',\r\n    };\r\n\r\n    actions.addSearchTerm(query).should.deep.equal(expectedAction);\r\n  });\r\n\r\n  it('should create an action to add everything apart from a hashtag', () => {\r\n    const query = '^#Footy';\r\n\r\n    const expectedQuery = 'Footy';\r\n    const expectedAction = {\r\n      type: 'ADD_SEARCH_TERM',\r\n      id: searchTermId++,\r\n      query: expectedQuery,\r\n      paramTypes: ['author', 'keyword', 'mention'],\r\n      source: 'twitter',\r\n    };\r\n\r\n    actions.addSearchTerm(query).should.deep.equal(expectedAction);\r\n  });\r\n\r\n  it('should create an action to add everything apart from a keyword', () => {\r\n    const query = '^*Footy';\r\n\r\n    const expectedQuery = 'Footy';\r\n    const expectedAction = {\r\n      type: 'ADD_SEARCH_TERM',\r\n      id: searchTermId++,\r\n      query: expectedQuery,\r\n      paramTypes: ['author', 'hashtag', 'mention'],\r\n      source: 'twitter',\r\n    };\r\n\r\n    actions.addSearchTerm(query).should.deep.equal(expectedAction);\r\n  });\r\n\r\n  it('should create an action to add everything apart from author and mention', () => {\r\n    const query = '^@Footy';\r\n\r\n    const expectedQuery = 'Footy';\r\n    const expectedAction = {\r\n      type: 'ADD_SEARCH_TERM',\r\n      id: searchTermId++,\r\n      query: expectedQuery,\r\n      paramTypes: ['hashtag', 'keyword'],\r\n      source: 'twitter',\r\n    };\r\n\r\n    actions.addSearchTerm(query).should.deep.equal(expectedAction);\r\n  });\r\n\r\n  it('should create an action to add a default search term if ^ without a symbol afterwards', () => {\r\n    const query = '^Footy';\r\n\r\n    const expectedQuery = 'Footy';\r\n    const expectedAction = {\r\n      type: 'ADD_SEARCH_TERM',\r\n      id: searchTermId++,\r\n      query: expectedQuery,\r\n      paramTypes: ['author', 'hashtag', 'keyword', 'mention'],\r\n      source: 'twitter',\r\n    };\r\n\r\n    actions.addSearchTerm(query).should.deep.equal(expectedAction);\r\n  });\r\n\r\n  it('should create an action to add a default search term', () => {\r\n    const query = 'Winning';\r\n\r\n    const expectedQuery = 'Winning';\r\n    const expectedAction = {\r\n      type: 'ADD_SEARCH_TERM',\r\n      id: searchTermId++,\r\n      query: expectedQuery,\r\n      paramTypes: ['author', 'hashtag', 'keyword', 'mention'],\r\n      source: 'twitter',\r\n    };\r\n\r\n    actions.addSearchTerm(query).should.deep.equal(expectedAction);\r\n  });\r\n\r\n  it('should create an action to delete search term with id', () => {\r\n    const id = 1;\r\n\r\n    const expectedAction = {\r\n      type: actions.DELETE_SEARCH_TERM,\r\n      id,\r\n    };\r\n\r\n    actions.deleteSearchTerm(id).should.deep.equal(expectedAction);\r\n  });\r\n\r\n  it('should create an action to toggle a search term with id paramtype selection', () => {\r\n    const id = 1;\r\n    const paramTypeName = 'author';\r\n\r\n    const expectedAction = {\r\n      type: actions.TOGGLE_SEARCH_TERM_PARAMTYPE_SELECTION,\r\n      id,\r\n      paramTypeName,\r\n    };\r\n\r\n    actions.toggleSearchTermParamTypeSelection(id, paramTypeName)\r\n      .should.deep.equal(expectedAction);\r\n  });\r\n});\r\n"
  },
  {
    "__docId__": 434,
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe44",
    "testId": 44,
    "memberof": "src/client/search/searchActions.spec.js",
    "testDepth": 0,
    "longname": "src/client/search/searchActions.spec.js~describe44",
    "access": null,
    "description": "#SearchActions",
    "lineNumber": 4
  },
  {
    "__docId__": 435,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it45",
    "testId": 45,
    "memberof": "src/client/search/searchActions.spec.js~describe44",
    "testDepth": 1,
    "longname": "src/client/search/searchActions.spec.js~describe44.it45",
    "access": null,
    "description": "should create an action to add a hashtag",
    "lineNumber": 7
  },
  {
    "__docId__": 436,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it46",
    "testId": 46,
    "memberof": "src/client/search/searchActions.spec.js~describe44",
    "testDepth": 1,
    "longname": "src/client/search/searchActions.spec.js~describe44.it46",
    "access": null,
    "description": "should create an action to add just a keyword",
    "lineNumber": 22
  },
  {
    "__docId__": 437,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it47",
    "testId": 47,
    "memberof": "src/client/search/searchActions.spec.js~describe44",
    "testDepth": 1,
    "longname": "src/client/search/searchActions.spec.js~describe44.it47",
    "access": null,
    "description": "should create an action to add an author and mention",
    "lineNumber": 37
  },
  {
    "__docId__": 438,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it48",
    "testId": 48,
    "memberof": "src/client/search/searchActions.spec.js~describe44",
    "testDepth": 1,
    "longname": "src/client/search/searchActions.spec.js~describe44.it48",
    "access": null,
    "description": "should create an action to add everything apart from a hashtag",
    "lineNumber": 52
  },
  {
    "__docId__": 439,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it49",
    "testId": 49,
    "memberof": "src/client/search/searchActions.spec.js~describe44",
    "testDepth": 1,
    "longname": "src/client/search/searchActions.spec.js~describe44.it49",
    "access": null,
    "description": "should create an action to add everything apart from a keyword",
    "lineNumber": 67
  },
  {
    "__docId__": 440,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it50",
    "testId": 50,
    "memberof": "src/client/search/searchActions.spec.js~describe44",
    "testDepth": 1,
    "longname": "src/client/search/searchActions.spec.js~describe44.it50",
    "access": null,
    "description": "should create an action to add everything apart from author and mention",
    "lineNumber": 82
  },
  {
    "__docId__": 441,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it51",
    "testId": 51,
    "memberof": "src/client/search/searchActions.spec.js~describe44",
    "testDepth": 1,
    "longname": "src/client/search/searchActions.spec.js~describe44.it51",
    "access": null,
    "description": "should create an action to add a default search term if ^ without a symbol afterwards",
    "lineNumber": 97
  },
  {
    "__docId__": 442,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it52",
    "testId": 52,
    "memberof": "src/client/search/searchActions.spec.js~describe44",
    "testDepth": 1,
    "longname": "src/client/search/searchActions.spec.js~describe44.it52",
    "access": null,
    "description": "should create an action to add a default search term",
    "lineNumber": 112
  },
  {
    "__docId__": 443,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it53",
    "testId": 53,
    "memberof": "src/client/search/searchActions.spec.js~describe44",
    "testDepth": 1,
    "longname": "src/client/search/searchActions.spec.js~describe44.it53",
    "access": null,
    "description": "should create an action to delete search term with id",
    "lineNumber": 127
  },
  {
    "__docId__": 444,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it54",
    "testId": 54,
    "memberof": "src/client/search/searchActions.spec.js~describe44",
    "testDepth": 1,
    "longname": "src/client/search/searchActions.spec.js~describe44.it54",
    "access": null,
    "description": "should create an action to toggle a search term with id paramtype selection",
    "lineNumber": 138
  },
  {
    "__docId__": 445,
    "kind": "testFile",
    "static": true,
    "variation": null,
    "name": "src/client/search/searchReducer.spec.js",
    "memberof": null,
    "longname": "src/client/search/searchReducer.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import { should } from 'chai';\r\nimport deepFreeze from 'deep-freeze';\r\nimport { searchTermsReducer, feedReducer } from './searchReducer';\r\nimport * as actions from './searchActions';\r\nimport { createTwitterParamTypes } from '../../shared/utilities';\r\nimport { groupedCountWords, mostFrequentWords, mostFrequentUsers } from './../tweetAnalysis';\r\n\r\ndescribe('#SearchTermsReducer', () => {\r\n  it('should add a hashtag search term', () => {\r\n    const stateBefore = [];\r\n    const action = actions.addSearchTerm('#Football');\r\n\r\n    const stateAfter = [{\r\n      id: action.id,\r\n      query: 'Football',\r\n      paramTypes: createTwitterParamTypes(['hashtag']),\r\n      source: 'twitter',\r\n    }, ];\r\n\r\n    deepFreeze(stateBefore);\r\n    deepFreeze(action);\r\n\r\n    searchTermsReducer(stateBefore, action).should.deep.equal(stateAfter);\r\n  });\r\n\r\n  it('should add a new query to existing queries', () => {\r\n    const stateBefore = [{\r\n      id: 0,\r\n      query: 'Football',\r\n      paramTypes: createTwitterParamTypes(['mention']),\r\n      source: 'twitter',\r\n    }, ];\r\n    const action = actions.addSearchTerm('@Manchester');\r\n\r\n    const stateAfter = [\r\n      ...stateBefore,\r\n      {\r\n        id: 9,\r\n        query: 'Manchester',\r\n        paramTypes: createTwitterParamTypes(['mention', 'author']),\r\n        source: 'twitter',\r\n      }, ];\r\n\r\n    deepFreeze(stateBefore);\r\n    deepFreeze(action);\r\n\r\n    searchTermsReducer(stateBefore, action).should.deep.equal(stateAfter);\r\n  });\r\n\r\n  it('should return empty search terms when deleting search terms with single term', () => {\r\n    const stateBefore = [{\r\n      id: 0,\r\n      query: 'Football',\r\n      paramTypes: createTwitterParamTypes(['mention']),\r\n      source: 'twitter',\r\n    }, ];\r\n    const action = actions.deleteSearchTerm(0);\r\n\r\n    const stateAfter = [];\r\n\r\n    deepFreeze(stateBefore);\r\n    deepFreeze(action);\r\n\r\n    searchTermsReducer(stateBefore, action).should.deep.equal(stateAfter);\r\n  });\r\n\r\n  it('should delete term with id', () => {\r\n    const stateBefore = [{\r\n      id: 0,\r\n      query: 'Football',\r\n      paramTypes: createTwitterParamTypes(['mention']),\r\n      source: 'twitter',\r\n    }, {\r\n      id: 1,\r\n      query: 'Manchester',\r\n      paramTypes: createTwitterParamTypes(['hashtag', 'author']),\r\n      source: 'twitter',\r\n    }, ];\r\n    const action = actions.deleteSearchTerm(0);\r\n\r\n    const stateAfter = [{\r\n      id: 1,\r\n      query: 'Manchester',\r\n      paramTypes: createTwitterParamTypes(['hashtag', 'author']),\r\n      source: 'twitter',\r\n    }, ];\r\n\r\n    deepFreeze(stateBefore);\r\n    deepFreeze(action);\r\n\r\n    searchTermsReducer(stateBefore, action).should.deep.equal(stateAfter);\r\n  });\r\n\r\n  it('should edit term paramType with id', () => {\r\n    const stateBefore = [{\r\n      id: 0,\r\n      query: 'Football',\r\n      paramTypes: createTwitterParamTypes(['mention']),\r\n      source: 'twitter',\r\n    }, {\r\n      id: 1,\r\n      query: 'Manchester',\r\n      paramTypes: createTwitterParamTypes(['hashtag', 'author']),\r\n      source: 'twitter',\r\n    }, ];\r\n    const action = actions.toggleSearchTermParamTypeSelection(0, 'author');\r\n\r\n    const stateAfter = [{\r\n      id: 0,\r\n      query: 'Football',\r\n      paramTypes: createTwitterParamTypes(['author', 'mention']),\r\n      source: 'twitter',\r\n    }, {\r\n      id: 1,\r\n      query: 'Manchester',\r\n      paramTypes: createTwitterParamTypes(['hashtag', 'author']),\r\n      source: 'twitter',\r\n    }, ];\r\n\r\n    deepFreeze(stateBefore);\r\n    deepFreeze(action);\r\n\r\n    searchTermsReducer(stateBefore, action).should.deep.equal(stateAfter);\r\n  });\r\n});\r\n\r\ndescribe('#FeedReducer', () => {\r\n  it('can receive new feed results, and will group and sort them', () => {\r\n    const stateBefore = {};\r\n\r\n    const records = [\r\n      { data:{ content:'some record', date: '2016-04-06' }, author:{ id: '1' } },\r\n      { data:{ content:'another', date: '2014-04-06' }, author:{ id: '2' } },\r\n    ];\r\n\r\n    const action = {\r\n      type: actions.RECEIVE_FEED_RESULTS,\r\n      data: {\r\n        data: {\r\n          records: records,\r\n        },\r\n      },\r\n      fetchedRequestFromTwitter: false,\r\n    };\r\n\r\n    const stateAfter = {\r\n      posts: records,\r\n      groupedMostFrequentWords: groupedCountWords(mostFrequentWords(records.map((post) => post.data.content))),\r\n      mostFrequentUsers: mostFrequentUsers(records),\r\n      fetchingRequestFromDB: false,\r\n    };\r\n\r\n    deepFreeze(stateBefore);\r\n    deepFreeze(action);\r\n\r\n    feedReducer(stateBefore, action).should.deep.equal(stateAfter);\r\n  });\r\n\r\n  it('can set the pagination page', () => {\r\n    const stateBefore = { paginationInfo: { number: 1, limit: 10 } };\r\n\r\n    const action = {\r\n      type: actions.SET_FEED_PAGE_NUMBER,\r\n      number: 5,\r\n    };\r\n\r\n    const stateAfter = { paginationInfo: { number: 5, limit: 10 } };\r\n\r\n    deepFreeze(stateBefore);\r\n    deepFreeze(action);\r\n\r\n    feedReducer(stateBefore, action).should.deep.equal(stateAfter);\r\n  });\r\n\r\n  it('can set the pagination limit', () => {\r\n    const stateBefore = { paginationInfo: { number: 1, limit: 10 } };\r\n\r\n    const action = {\r\n      type: actions.SET_FEED_PAGE_LIMIT,\r\n      limit: 5,\r\n    };\r\n\r\n    const stateAfter = { paginationInfo: { number: 1, limit: 5 } };\r\n\r\n    deepFreeze(stateBefore);\r\n    deepFreeze(action);\r\n\r\n    feedReducer(stateBefore, action).should.deep.equal(stateAfter);\r\n  });\r\n});\r\n"
  },
  {
    "__docId__": 446,
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe55",
    "testId": 55,
    "memberof": "src/client/search/searchReducer.spec.js",
    "testDepth": 0,
    "longname": "src/client/search/searchReducer.spec.js~describe55",
    "access": null,
    "description": "#SearchTermsReducer",
    "lineNumber": 8
  },
  {
    "__docId__": 447,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it56",
    "testId": 56,
    "memberof": "src/client/search/searchReducer.spec.js~describe55",
    "testDepth": 1,
    "longname": "src/client/search/searchReducer.spec.js~describe55.it56",
    "access": null,
    "description": "should add a hashtag search term",
    "lineNumber": 9
  },
  {
    "__docId__": 448,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it57",
    "testId": 57,
    "memberof": "src/client/search/searchReducer.spec.js~describe55",
    "testDepth": 1,
    "longname": "src/client/search/searchReducer.spec.js~describe55.it57",
    "access": null,
    "description": "should add a new query to existing queries",
    "lineNumber": 26
  },
  {
    "__docId__": 449,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it58",
    "testId": 58,
    "memberof": "src/client/search/searchReducer.spec.js~describe55",
    "testDepth": 1,
    "longname": "src/client/search/searchReducer.spec.js~describe55.it58",
    "access": null,
    "description": "should return empty search terms when deleting search terms with single term",
    "lineNumber": 50
  },
  {
    "__docId__": 450,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it59",
    "testId": 59,
    "memberof": "src/client/search/searchReducer.spec.js~describe55",
    "testDepth": 1,
    "longname": "src/client/search/searchReducer.spec.js~describe55.it59",
    "access": null,
    "description": "should delete term with id",
    "lineNumber": 67
  },
  {
    "__docId__": 451,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it60",
    "testId": 60,
    "memberof": "src/client/search/searchReducer.spec.js~describe55",
    "testDepth": 1,
    "longname": "src/client/search/searchReducer.spec.js~describe55.it60",
    "access": null,
    "description": "should edit term paramType with id",
    "lineNumber": 94
  },
  {
    "__docId__": 452,
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe61",
    "testId": 61,
    "memberof": "src/client/search/searchReducer.spec.js",
    "testDepth": 0,
    "longname": "src/client/search/searchReducer.spec.js~describe61",
    "access": null,
    "description": "#FeedReducer",
    "lineNumber": 127
  },
  {
    "__docId__": 453,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it62",
    "testId": 62,
    "memberof": "src/client/search/searchReducer.spec.js~describe61",
    "testDepth": 1,
    "longname": "src/client/search/searchReducer.spec.js~describe61.it62",
    "access": null,
    "description": "can receive new feed results, and will group and sort them",
    "lineNumber": 128
  },
  {
    "__docId__": 454,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it63",
    "testId": 63,
    "memberof": "src/client/search/searchReducer.spec.js~describe61",
    "testDepth": 1,
    "longname": "src/client/search/searchReducer.spec.js~describe61.it63",
    "access": null,
    "description": "can set the pagination page",
    "lineNumber": 159
  },
  {
    "__docId__": 455,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it64",
    "testId": 64,
    "memberof": "src/client/search/searchReducer.spec.js~describe61",
    "testDepth": 1,
    "longname": "src/client/search/searchReducer.spec.js~describe61.it64",
    "access": null,
    "description": "can set the pagination limit",
    "lineNumber": 175
  },
  {
    "__docId__": 456,
    "kind": "testFile",
    "static": true,
    "variation": null,
    "name": "src/client/tweetAnalysis.spec.js",
    "memberof": null,
    "longname": "src/client/tweetAnalysis.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import { should } from 'chai';\r\nimport { mostFrequentWords, mostFrequentUsers, groupedCountWords } from './tweetAnalysis';\r\n\r\nshould();\r\n\r\ndescribe('#TweetAnalysis', () => {\r\n  describe('Frequent words counter', () => {\r\n    const exampleFrequentWords = [\r\n      { word: 'three', count: 3 },\r\n      { word: 'two', count: 2 },\r\n      { word: 'one', count: 1 },\r\n    ];\r\n\r\n    it('returns an empty list on empty input', () => {\r\n      const tweets = [];\r\n      mostFrequentWords(tweets).should.deep.equal([]);\r\n    });\r\n\r\n    it('counts words in a single tweet, most frequent first', () => {\r\n      const tweet = ['one three two three two three'];\r\n      mostFrequentWords(tweet).should.deep.equal(exampleFrequentWords);\r\n    });\r\n\r\n    it('counts words across several tweets, most frequent first', () => {\r\n      const tweets = ['one two three three', 'two three'];\r\n      mostFrequentWords(tweets).should.deep.equal(exampleFrequentWords);\r\n    });\r\n\r\n    it('ignores punctuation when splitting words', () => {\r\n      const tweets = ['one, two,two three.three !three'];\r\n      mostFrequentWords(tweets).should.deep.equal(exampleFrequentWords);\r\n    });\r\n\r\n    it('correctly identifies and removes t.co URLS', () => {\r\n      const tweets = ['one, two three https://t.co/url1 https://t.co/url2 four https://t.co/url3'];\r\n      mostFrequentWords(tweets).should.deep.equal([\r\n        { word: 'one', count: 1 },\r\n        { word: 'two', count: 1 },\r\n        { word: 'three', count: 1 },\r\n        { word: 'four', count: 1 },\r\n      ]);\r\n    });\r\n\r\n    it('correctly identifies @mentions', () => {\r\n      const tweets = ['one, @Winwardo two'];\r\n      mostFrequentWords(tweets).should.deep.equal([\r\n        { word: 'one', count: 1 },\r\n        { word: '@Winwardo', count: 1 },\r\n        { word: 'two', count: 1 },\r\n      ]);\r\n    });\r\n\r\n    it('correctly identifies #hashtags', () => {\r\n      const tweets = ['one, #FOOTBALL two'];\r\n      mostFrequentWords(tweets).should.deep.equal([\r\n        { word: 'one', count: 1 },\r\n        { word: '#FOOTBALL', count: 1 },\r\n        { word: 'two', count: 1 },\r\n      ]);\r\n    });\r\n\r\n    it('can conflate words of different cases together with one word', () => {\r\n      const exampleCountedAndSortedWords = [\r\n        { word: 'football', count: 10 },\r\n      ];\r\n\r\n      groupedCountWords(exampleCountedAndSortedWords).should.deep.equal(\r\n        [\r\n          {\r\n            word: 'football',\r\n            count: 10,\r\n            makeup: [\r\n              { word: 'football', count: 10 },\r\n            ],\r\n          },\r\n        ]\r\n      );\r\n    });\r\n\r\n    it('can conflate words of different cases together with one uppercase word', () => {\r\n      const exampleCountedAndSortedWords = [\r\n        { word: 'FOOTBALL', count: 10 },\r\n      ];\r\n\r\n      groupedCountWords(exampleCountedAndSortedWords).should.deep.equal(\r\n        [\r\n          {\r\n            word: 'football',\r\n            count: 10,\r\n            makeup: [\r\n              { word: 'FOOTBALL', count: 10 },\r\n            ],\r\n          },\r\n        ]\r\n      );\r\n    });\r\n\r\n    it('can conflate words of different cases together with one uppercase word and one lower case', () => {\r\n      const exampleCountedAndSortedWords = [\r\n        { word: 'FOOTBALL', count: 10 },\r\n        { word: 'football', count: 5 },\r\n      ];\r\n\r\n      groupedCountWords(exampleCountedAndSortedWords).should.deep.equal(\r\n        [\r\n          {\r\n            word: 'football',\r\n            count: 15,\r\n            makeup: [\r\n              { word: 'FOOTBALL', count: 10 },\r\n              { word: 'football', count: 5 },\r\n            ],\r\n          },\r\n        ]\r\n      );\r\n    });\r\n\r\n    it('can conflate hashtags with normal words', () => {\r\n      const exampleCountedAndSortedWords = [\r\n        { word: 'Football', count: 10 },\r\n        { word: '#footBALL', count: 5 },\r\n      ];\r\n\r\n      groupedCountWords(exampleCountedAndSortedWords).should.deep.equal(\r\n        [\r\n          {\r\n            word: 'football',\r\n            count: 15,\r\n            makeup: [\r\n              { word: 'Football', count: 10 },\r\n              { word: '#footBALL', count: 5 },\r\n            ],\r\n          },\r\n        ]\r\n      );\r\n    });\r\n\r\n    it('can conflate words of different cases together in a complex example', () => {\r\n      const exampleCountedAndSortedWords = [\r\n        { word: 'MANCHESTER', count: 16 },\r\n        { word: 'football', count: 10 },\r\n        { word: 'liverpool', count: 7 },\r\n        { word: 'Football', count: 5 },\r\n        { word: 'FOOTBALL', count: 5 },\r\n      ];\r\n\r\n      groupedCountWords(exampleCountedAndSortedWords).should.deep.equal(\r\n        [\r\n          {\r\n            word: 'football',\r\n            count: 20,\r\n            makeup: [\r\n              { word: 'football', count: 10 },\r\n              { word: 'Football', count: 5 },\r\n              { word: 'FOOTBALL', count: 5 },\r\n            ],\r\n          },\r\n          {\r\n            word: 'manchester',\r\n            count: 16,\r\n            makeup: [\r\n              { word: 'MANCHESTER', count: 16 },\r\n            ],\r\n          },\r\n          {\r\n            word: 'liverpool',\r\n            count: 7,\r\n            makeup: [\r\n              { word: 'liverpool', count: 7 },\r\n            ],\r\n          },\r\n        ]\r\n      );\r\n    });\r\n  });\r\n\r\n  describe('Most active users counter', () => {\r\n    it('returns an empty list on an empty input', () => {\r\n      const tweets = [];\r\n      mostFrequentUsers(tweets).should.deep.equal([]);\r\n    });\r\n\r\n    it('returns the Tweeter and their tweets', () => {\r\n      const tweets = [\r\n        {\r\n          author: {\r\n            id: 1,\r\n            name: 'example',\r\n            handle: 'exampleHandle',\r\n          },\r\n          data: { content: 'hello world' },\r\n          source: 'twitter',\r\n        }, {\r\n          author: {\r\n            id: 1,\r\n            name: 'example',\r\n            handle: 'exampleHandle',\r\n          },\r\n          data: { content: 'second tweet' },\r\n          source: 'twitter',\r\n        },\r\n      ];\r\n      mostFrequentUsers(tweets).should.deep.equal(\r\n        [\r\n          {\r\n            author: {\r\n              id: 1,\r\n              name: 'example',\r\n              handle: 'exampleHandle',\r\n            },\r\n            posts: [\r\n              { content: 'hello world' },\r\n              { content: 'second tweet' },\r\n            ],\r\n            source: 'twitter',\r\n          },\r\n        ]\r\n      );\r\n    });\r\n\r\n    it('returns the Tweeter and their tweets, sorted by most active first', () => {\r\n      const tweets = [\r\n        {\r\n          author: {\r\n            id: 2,\r\n            name: 'example2',\r\n            handle: 'exampleHandle2',\r\n          },\r\n          data: { content: 'hello world' },\r\n          source: 'twitter',\r\n        }, {\r\n          author: {\r\n            id: 1,\r\n            name: 'example',\r\n            handle: 'exampleHandle',\r\n          },\r\n          data: { content: 'hey there' },\r\n          source: 'twitter',\r\n        }, {\r\n          author: {\r\n            id: 1,\r\n            name: 'example',\r\n            handle: 'exampleHandle',\r\n          },\r\n          data: { content: 'I am second' },\r\n          source: 'twitter',\r\n        }, {\r\n          author: {\r\n            id: 2,\r\n            name: 'example2',\r\n            handle: 'exampleHandle2',\r\n          },\r\n          data: { content: 'second tweet' },\r\n          source: 'twitter',\r\n        }, {\r\n          author: {\r\n            id: 3,\r\n            name: 'example3',\r\n            handle: 'exampleHandle3',\r\n          },\r\n          data: { content: 'I am third' },\r\n          source: 'twitter',\r\n        }, {\r\n          author: {\r\n            id: 2,\r\n            name: 'example2',\r\n            handle: 'exampleHandle2',\r\n          },\r\n          data: { content: 'I am first' },\r\n          source: 'twitter',\r\n        },\r\n      ];\r\n      mostFrequentUsers(tweets).should.deep.equal(\r\n        [\r\n          {\r\n            author: {\r\n              id: 2,\r\n              name: 'example2',\r\n              handle: 'exampleHandle2',\r\n            },\r\n            posts: [\r\n              { content: 'hello world' },\r\n              { content: 'second tweet' },\r\n              { content: 'I am first' },\r\n            ],\r\n            source: 'twitter',\r\n          },\r\n          {\r\n            author: {\r\n              id: 1,\r\n              name: 'example',\r\n              handle: 'exampleHandle',\r\n            },\r\n            posts: [\r\n              { content: 'hey there' },\r\n              { content: 'I am second' },\r\n            ],\r\n            source: 'twitter',\r\n          },\r\n          {\r\n            author: {\r\n              id: 3,\r\n              name: 'example3',\r\n              handle: 'exampleHandle3',\r\n            },\r\n            posts: [\r\n              { content: 'I am third' },\r\n            ],\r\n            source: 'twitter',\r\n          },\r\n        ]\r\n      );\r\n    });\r\n  });\r\n});\r\n"
  },
  {
    "__docId__": 457,
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe65",
    "testId": 65,
    "memberof": "src/client/tweetAnalysis.spec.js",
    "testDepth": 0,
    "longname": "src/client/tweetAnalysis.spec.js~describe65",
    "access": null,
    "description": "#TweetAnalysis",
    "lineNumber": 6
  },
  {
    "__docId__": 458,
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe66",
    "testId": 66,
    "memberof": "src/client/tweetAnalysis.spec.js~describe65",
    "testDepth": 1,
    "longname": "src/client/tweetAnalysis.spec.js~describe65.describe66",
    "access": null,
    "description": "Frequent words counter",
    "lineNumber": 7
  },
  {
    "__docId__": 459,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it67",
    "testId": 67,
    "memberof": "src/client/tweetAnalysis.spec.js~describe65.describe66",
    "testDepth": 2,
    "longname": "src/client/tweetAnalysis.spec.js~describe65.describe66.it67",
    "access": null,
    "description": "returns an empty list on empty input",
    "lineNumber": 14
  },
  {
    "__docId__": 460,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it68",
    "testId": 68,
    "memberof": "src/client/tweetAnalysis.spec.js~describe65.describe66",
    "testDepth": 2,
    "longname": "src/client/tweetAnalysis.spec.js~describe65.describe66.it68",
    "access": null,
    "description": "counts words in a single tweet, most frequent first",
    "lineNumber": 19
  },
  {
    "__docId__": 461,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it69",
    "testId": 69,
    "memberof": "src/client/tweetAnalysis.spec.js~describe65.describe66",
    "testDepth": 2,
    "longname": "src/client/tweetAnalysis.spec.js~describe65.describe66.it69",
    "access": null,
    "description": "counts words across several tweets, most frequent first",
    "lineNumber": 24
  },
  {
    "__docId__": 462,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it70",
    "testId": 70,
    "memberof": "src/client/tweetAnalysis.spec.js~describe65.describe66",
    "testDepth": 2,
    "longname": "src/client/tweetAnalysis.spec.js~describe65.describe66.it70",
    "access": null,
    "description": "ignores punctuation when splitting words",
    "lineNumber": 29
  },
  {
    "__docId__": 463,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it71",
    "testId": 71,
    "memberof": "src/client/tweetAnalysis.spec.js~describe65.describe66",
    "testDepth": 2,
    "longname": "src/client/tweetAnalysis.spec.js~describe65.describe66.it71",
    "access": null,
    "description": "correctly identifies and removes t.co URLS",
    "lineNumber": 34
  },
  {
    "__docId__": 464,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it72",
    "testId": 72,
    "memberof": "src/client/tweetAnalysis.spec.js~describe65.describe66",
    "testDepth": 2,
    "longname": "src/client/tweetAnalysis.spec.js~describe65.describe66.it72",
    "access": null,
    "description": "correctly identifies @mentions",
    "lineNumber": 44
  },
  {
    "__docId__": 465,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it73",
    "testId": 73,
    "memberof": "src/client/tweetAnalysis.spec.js~describe65.describe66",
    "testDepth": 2,
    "longname": "src/client/tweetAnalysis.spec.js~describe65.describe66.it73",
    "access": null,
    "description": "correctly identifies #hashtags",
    "lineNumber": 53
  },
  {
    "__docId__": 466,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it74",
    "testId": 74,
    "memberof": "src/client/tweetAnalysis.spec.js~describe65.describe66",
    "testDepth": 2,
    "longname": "src/client/tweetAnalysis.spec.js~describe65.describe66.it74",
    "access": null,
    "description": "can conflate words of different cases together with one word",
    "lineNumber": 62
  },
  {
    "__docId__": 467,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it75",
    "testId": 75,
    "memberof": "src/client/tweetAnalysis.spec.js~describe65.describe66",
    "testDepth": 2,
    "longname": "src/client/tweetAnalysis.spec.js~describe65.describe66.it75",
    "access": null,
    "description": "can conflate words of different cases together with one uppercase word",
    "lineNumber": 80
  },
  {
    "__docId__": 468,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it76",
    "testId": 76,
    "memberof": "src/client/tweetAnalysis.spec.js~describe65.describe66",
    "testDepth": 2,
    "longname": "src/client/tweetAnalysis.spec.js~describe65.describe66.it76",
    "access": null,
    "description": "can conflate words of different cases together with one uppercase word and one lower case",
    "lineNumber": 98
  },
  {
    "__docId__": 469,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it77",
    "testId": 77,
    "memberof": "src/client/tweetAnalysis.spec.js~describe65.describe66",
    "testDepth": 2,
    "longname": "src/client/tweetAnalysis.spec.js~describe65.describe66.it77",
    "access": null,
    "description": "can conflate hashtags with normal words",
    "lineNumber": 118
  },
  {
    "__docId__": 470,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it78",
    "testId": 78,
    "memberof": "src/client/tweetAnalysis.spec.js~describe65.describe66",
    "testDepth": 2,
    "longname": "src/client/tweetAnalysis.spec.js~describe65.describe66.it78",
    "access": null,
    "description": "can conflate words of different cases together in a complex example",
    "lineNumber": 138
  },
  {
    "__docId__": 471,
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe79",
    "testId": 79,
    "memberof": "src/client/tweetAnalysis.spec.js~describe65",
    "testDepth": 1,
    "longname": "src/client/tweetAnalysis.spec.js~describe65.describe79",
    "access": null,
    "description": "Most active users counter",
    "lineNumber": 177
  },
  {
    "__docId__": 472,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it80",
    "testId": 80,
    "memberof": "src/client/tweetAnalysis.spec.js~describe65.describe79",
    "testDepth": 2,
    "longname": "src/client/tweetAnalysis.spec.js~describe65.describe79.it80",
    "access": null,
    "description": "returns an empty list on an empty input",
    "lineNumber": 178
  },
  {
    "__docId__": 473,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it81",
    "testId": 81,
    "memberof": "src/client/tweetAnalysis.spec.js~describe65.describe79",
    "testDepth": 2,
    "longname": "src/client/tweetAnalysis.spec.js~describe65.describe79.it81",
    "access": null,
    "description": "returns the Tweeter and their tweets",
    "lineNumber": 183
  },
  {
    "__docId__": 474,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it82",
    "testId": 82,
    "memberof": "src/client/tweetAnalysis.spec.js~describe65.describe79",
    "testDepth": 2,
    "longname": "src/client/tweetAnalysis.spec.js~describe65.describe79.it82",
    "access": null,
    "description": "returns the Tweeter and their tweets, sorted by most active first",
    "lineNumber": 221
  },
  {
    "__docId__": 475,
    "kind": "testFile",
    "static": true,
    "variation": null,
    "name": "src/server/tweetFinder.spec.js",
    "memberof": null,
    "longname": "src/server/tweetFinder.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import { should } from 'chai';\r\nimport * as tweetFinder from './tweetFinder';\r\n\r\ndescribe('#TweetFinder', () => {\r\n  describe('Unioning tweets', () => {\r\n    it('should return an empty list given an empty list', () => {\r\n      const inputResultList = [];\r\n      const expected = [];\r\n\r\n      tweetFinder.unionTweets(inputResultList).should.deep.equals(expected);\r\n    });\r\n\r\n    it('should return the identity of a single resultlist', () => {\r\n      const inputResultList = [[makeTweetWithId(10)]];\r\n      const expected = [makeTweetWithId(10)];\r\n\r\n      tweetFinder.unionTweets(inputResultList).should.deep.equals(expected);\r\n    });\r\n\r\n    it('should append two unique lists together', () => {\r\n      const inputResultList = [[makeTweetWithId(10)], [makeTweetWithId(33)]];\r\n      const expected = [makeTweetWithId(10), makeTweetWithId(33)];\r\n\r\n      tweetFinder.unionTweets(inputResultList).should.deep.equals(expected);\r\n    });\r\n\r\n    it('should union two non-unique lists together', () => {\r\n      const inputResultList = [[makeTweetWithId(10), makeTweetWithId(50)], [makeTweetWithId(33), makeTweetWithId(50)]];\r\n      const expected = [makeTweetWithId(10), makeTweetWithId(33), makeTweetWithId(50)];\r\n\r\n      tweetFinder.unionTweets(inputResultList).should.deep.equals(expected);\r\n    });\r\n\r\n    const makeTweetWithId = (id, content='Hello world') => ({ tweet: { id: id, content: content } });\r\n\r\n  });\r\n});\r\n\r\ndescribe('#QueryBuilder', () => {\r\n  const makeQuery = (term, paramTypes) => {\r\n    const result = {\r\n      query: term,\r\n      paramTypes: [],\r\n    };\r\n    for (const paramTypeName of paramTypes) {\r\n      result.paramTypes.push({\r\n        name: paramTypeName,\r\n        selected: true,\r\n      });\r\n    }\r\n    return result;\r\n  };\r\n\r\n  it('should return the empty array for an empty array', () => {\r\n    tweetFinder.buildTwitterQuery([]).should.deep.equal([]);\r\n  });\r\n\r\n  it('should build a single Twitter query for a single search query', () => {\r\n    tweetFinder.buildTwitterQuery(\r\n      [\r\n        makeQuery('arsenal', ['keyword', 'author', 'hashtag', 'mention']),\r\n      ]\r\n    ).should.deep.equal(\r\n      [\r\n        '\"arsenal\" OR @arsenal OR #arsenal',\r\n      ]\r\n    );\r\n  });\r\n\r\n  it('should build a single Twitter query for a single search query with differently ordered paraas', () => {\r\n    tweetFinder.buildTwitterQuery(\r\n      [\r\n        makeQuery('arsenal', ['hashtag', 'keyword', 'author', 'mention']),\r\n      ]\r\n    ).should.deep.equal(\r\n      [\r\n        '#arsenal OR \"arsenal\" OR @arsenal',\r\n      ]\r\n    );\r\n  });\r\n\r\n  it('should remove spaces in authors/mentions and hashtags', () => {\r\n    tweetFinder.buildTwitterQuery(\r\n      [\r\n        makeQuery('manchester united fc', ['keyword', 'author', 'hashtag', 'mention']),\r\n      ]\r\n    ).should.deep.equal(\r\n      [\r\n        '\"manchester united fc\" OR @manchesterunitedfc OR #manchesterunitedfc',\r\n      ]\r\n    );\r\n  });\r\n\r\n  it('should build a single Twitter query for a multiple search query', () => {\r\n    tweetFinder.buildTwitterQuery(\r\n      [\r\n        makeQuery('arsenal', ['keyword', 'author', 'hashtag', 'mention']),\r\n        makeQuery('spurs', ['keyword', 'author', 'hashtag', 'mention']),\r\n      ]\r\n    ).should.deep.equal(\r\n      [\r\n        '\"arsenal\" OR @arsenal OR #arsenal OR \"spurs\" OR @spurs OR #spurs',\r\n      ]\r\n    );\r\n  });\r\n\r\n  it('should build two Twitter queries for a large multiple search query, splitting on query term', () => {\r\n    tweetFinder.buildTwitterQuery(\r\n      [\r\n        makeQuery('arsenal', ['keyword', 'author', 'hashtag', 'mention']),\r\n        makeQuery('spurs', ['keyword', 'author', 'hashtag', 'mention']),\r\n        makeQuery('manchester', ['keyword', 'author', 'hashtag', 'mention']),\r\n        makeQuery('liverpool', ['keyword', 'author', 'hashtag', 'mention']),\r\n      ]\r\n    ).should.deep.equal(\r\n      [\r\n        '\"arsenal\" OR @arsenal OR #arsenal OR \"spurs\" OR @spurs OR #spurs OR \"manchester\" OR @manchester OR #manchester',\r\n        '\"liverpool\" OR @liverpool OR #liverpool',\r\n      ]\r\n    );\r\n  });\r\n\r\n  it('should be able to search just keywords', () => {\r\n    tweetFinder.buildTwitterQuery(\r\n      [\r\n        makeQuery('arsenal', ['keyword']),\r\n      ]\r\n    ).should.deep.equal(\r\n      [\r\n        '\"arsenal\"',\r\n      ]\r\n    );\r\n  });\r\n\r\n  it('should be able to search just hashtags', () => {\r\n    tweetFinder.buildTwitterQuery(\r\n      [\r\n        makeQuery('arsenal', ['hashtag']),\r\n      ]\r\n    ).should.deep.equal(\r\n      [\r\n        '#arsenal',\r\n      ]\r\n    );\r\n  });\r\n\r\n  it('should conflate mention and author', () => {\r\n    tweetFinder.buildTwitterQuery(\r\n      [\r\n        makeQuery('arsenal', ['mention']),\r\n        makeQuery('spurs', ['author']),\r\n      ]\r\n    ).should.deep.equal(\r\n      [\r\n        '@arsenal OR @spurs',\r\n      ]\r\n    );\r\n  });\r\n});\r\n\r\ndescribe('#QueryNormaliser', () => {\r\n  it('leaves short single terms alone', () => {\r\n    tweetFinder.normaliseQueryTerm('hi').should.equal('hi');\r\n  });\r\n\r\n  it('fuzzes longer single terms', () => {\r\n    tweetFinder.normaliseQueryTerm('manchester').should.equal('manchester~');\r\n  });\r\n\r\n  it('surrounds multiple term queries in quotes', () => {\r\n    tweetFinder.normaliseQueryTerm('manchester united').should.equal('\"manchester united\"');\r\n  });\r\n});\r\n"
  },
  {
    "__docId__": 476,
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe83",
    "testId": 83,
    "memberof": "src/server/tweetFinder.spec.js",
    "testDepth": 0,
    "longname": "src/server/tweetFinder.spec.js~describe83",
    "access": null,
    "description": "#TweetFinder",
    "lineNumber": 4
  },
  {
    "__docId__": 477,
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe84",
    "testId": 84,
    "memberof": "src/server/tweetFinder.spec.js~describe83",
    "testDepth": 1,
    "longname": "src/server/tweetFinder.spec.js~describe83.describe84",
    "access": null,
    "description": "Unioning tweets",
    "lineNumber": 5
  },
  {
    "__docId__": 478,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it85",
    "testId": 85,
    "memberof": "src/server/tweetFinder.spec.js~describe83.describe84",
    "testDepth": 2,
    "longname": "src/server/tweetFinder.spec.js~describe83.describe84.it85",
    "access": null,
    "description": "should return an empty list given an empty list",
    "lineNumber": 6
  },
  {
    "__docId__": 479,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it86",
    "testId": 86,
    "memberof": "src/server/tweetFinder.spec.js~describe83.describe84",
    "testDepth": 2,
    "longname": "src/server/tweetFinder.spec.js~describe83.describe84.it86",
    "access": null,
    "description": "should return the identity of a single resultlist",
    "lineNumber": 13
  },
  {
    "__docId__": 480,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it87",
    "testId": 87,
    "memberof": "src/server/tweetFinder.spec.js~describe83.describe84",
    "testDepth": 2,
    "longname": "src/server/tweetFinder.spec.js~describe83.describe84.it87",
    "access": null,
    "description": "should append two unique lists together",
    "lineNumber": 20
  },
  {
    "__docId__": 481,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it88",
    "testId": 88,
    "memberof": "src/server/tweetFinder.spec.js~describe83.describe84",
    "testDepth": 2,
    "longname": "src/server/tweetFinder.spec.js~describe83.describe84.it88",
    "access": null,
    "description": "should union two non-unique lists together",
    "lineNumber": 27
  },
  {
    "__docId__": 482,
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe89",
    "testId": 89,
    "memberof": "src/server/tweetFinder.spec.js",
    "testDepth": 0,
    "longname": "src/server/tweetFinder.spec.js~describe89",
    "access": null,
    "description": "#QueryBuilder",
    "lineNumber": 39
  },
  {
    "__docId__": 483,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it90",
    "testId": 90,
    "memberof": "src/server/tweetFinder.spec.js~describe89",
    "testDepth": 1,
    "longname": "src/server/tweetFinder.spec.js~describe89.it90",
    "access": null,
    "description": "should return the empty array for an empty array",
    "lineNumber": 54
  },
  {
    "__docId__": 484,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it91",
    "testId": 91,
    "memberof": "src/server/tweetFinder.spec.js~describe89",
    "testDepth": 1,
    "longname": "src/server/tweetFinder.spec.js~describe89.it91",
    "access": null,
    "description": "should build a single Twitter query for a single search query",
    "lineNumber": 58
  },
  {
    "__docId__": 485,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it92",
    "testId": 92,
    "memberof": "src/server/tweetFinder.spec.js~describe89",
    "testDepth": 1,
    "longname": "src/server/tweetFinder.spec.js~describe89.it92",
    "access": null,
    "description": "should build a single Twitter query for a single search query with differently ordered paraas",
    "lineNumber": 70
  },
  {
    "__docId__": 486,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it93",
    "testId": 93,
    "memberof": "src/server/tweetFinder.spec.js~describe89",
    "testDepth": 1,
    "longname": "src/server/tweetFinder.spec.js~describe89.it93",
    "access": null,
    "description": "should remove spaces in authors/mentions and hashtags",
    "lineNumber": 82
  },
  {
    "__docId__": 487,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it94",
    "testId": 94,
    "memberof": "src/server/tweetFinder.spec.js~describe89",
    "testDepth": 1,
    "longname": "src/server/tweetFinder.spec.js~describe89.it94",
    "access": null,
    "description": "should build a single Twitter query for a multiple search query",
    "lineNumber": 94
  },
  {
    "__docId__": 488,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it95",
    "testId": 95,
    "memberof": "src/server/tweetFinder.spec.js~describe89",
    "testDepth": 1,
    "longname": "src/server/tweetFinder.spec.js~describe89.it95",
    "access": null,
    "description": "should build two Twitter queries for a large multiple search query, splitting on query term",
    "lineNumber": 107
  },
  {
    "__docId__": 489,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it96",
    "testId": 96,
    "memberof": "src/server/tweetFinder.spec.js~describe89",
    "testDepth": 1,
    "longname": "src/server/tweetFinder.spec.js~describe89.it96",
    "access": null,
    "description": "should be able to search just keywords",
    "lineNumber": 123
  },
  {
    "__docId__": 490,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it97",
    "testId": 97,
    "memberof": "src/server/tweetFinder.spec.js~describe89",
    "testDepth": 1,
    "longname": "src/server/tweetFinder.spec.js~describe89.it97",
    "access": null,
    "description": "should be able to search just hashtags",
    "lineNumber": 135
  },
  {
    "__docId__": 491,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it98",
    "testId": 98,
    "memberof": "src/server/tweetFinder.spec.js~describe89",
    "testDepth": 1,
    "longname": "src/server/tweetFinder.spec.js~describe89.it98",
    "access": null,
    "description": "should conflate mention and author",
    "lineNumber": 147
  },
  {
    "__docId__": 492,
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe99",
    "testId": 99,
    "memberof": "src/server/tweetFinder.spec.js",
    "testDepth": 0,
    "longname": "src/server/tweetFinder.spec.js~describe99",
    "access": null,
    "description": "#QueryNormaliser",
    "lineNumber": 161
  },
  {
    "__docId__": 493,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it100",
    "testId": 100,
    "memberof": "src/server/tweetFinder.spec.js~describe99",
    "testDepth": 1,
    "longname": "src/server/tweetFinder.spec.js~describe99.it100",
    "access": null,
    "description": "leaves short single terms alone",
    "lineNumber": 162
  },
  {
    "__docId__": 494,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it101",
    "testId": 101,
    "memberof": "src/server/tweetFinder.spec.js~describe99",
    "testDepth": 1,
    "longname": "src/server/tweetFinder.spec.js~describe99.it101",
    "access": null,
    "description": "fuzzes longer single terms",
    "lineNumber": 166
  },
  {
    "__docId__": 495,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it102",
    "testId": 102,
    "memberof": "src/server/tweetFinder.spec.js~describe99",
    "testDepth": 1,
    "longname": "src/server/tweetFinder.spec.js~describe99.it102",
    "access": null,
    "description": "surrounds multiple term queries in quotes",
    "lineNumber": 170
  },
  {
    "__docId__": 496,
    "kind": "testFile",
    "static": true,
    "variation": null,
    "name": "src/shared/data/databaseObjects.spec.js",
    "memberof": null,
    "longname": "src/shared/data/databaseObjects.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import { should } from 'chai';\r\nimport { convertSchemaObjectToClass } from './databaseObjects';\r\nimport { schema } from './databaseSchema';\r\n\r\ndescribe('#DatabaseObject', () => {\r\n  it('should convert a schema object to raw object keys', () => {\r\n    const exampleSchema = schema;\r\n    const exampleClass = convertSchemaObjectToClass('Tweet', exampleSchema);\r\n\r\n    exampleClass.should.include.keys(['id', 'content', 'date', 'likes', 'retweets']);\r\n    exampleClass.should.not.include.keys(['some', 'other', 'keys']);\r\n  });\r\n});\r\n"
  },
  {
    "__docId__": 497,
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe103",
    "testId": 103,
    "memberof": "src/shared/data/databaseObjects.spec.js",
    "testDepth": 0,
    "longname": "src/shared/data/databaseObjects.spec.js~describe103",
    "access": null,
    "description": "#DatabaseObject",
    "lineNumber": 5
  },
  {
    "__docId__": 498,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it104",
    "testId": 104,
    "memberof": "src/shared/data/databaseObjects.spec.js~describe103",
    "testDepth": 1,
    "longname": "src/shared/data/databaseObjects.spec.js~describe103.it104",
    "access": null,
    "description": "should convert a schema object to raw object keys",
    "lineNumber": 6
  },
  {
    "__docId__": 499,
    "kind": "testFile",
    "static": true,
    "variation": null,
    "name": "src/shared/utilities.spec.js",
    "memberof": null,
    "longname": "src/shared/utilities.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import { should } from 'chai';\r\nimport deepFreeze from 'deep-freeze';\r\nimport {\r\n  flattenObjectToArray, flattenImmutableObject,\r\n  makePostHeader,\r\n  createTwitterParamTypes, toggleParamType,\r\n  range\r\n} from './utilities';\r\nshould();\r\n\r\ndescribe('#Utilities', () => {\r\n  describe('Object flattener', () => {\r\n    it('can flatten an object to an array', () => {\r\n      flattenObjectToArray(\r\n        { a: { b: 1 }, d: { e: 2 } }\r\n      ).should.deep.equal(\r\n        [{ b: 1 }, { e: 2 }]\r\n      );\r\n    });\r\n\r\n    it('can resolve functions on an immutable object and return a flat object', () => {\r\n      const exampleImmutableObject = {\r\n        name: () => ('John'),\r\n\r\n        age: () => (7),\r\n\r\n        notAFunction: 'something',\r\n      };\r\n\r\n      exampleImmutableObject.name().should.equal('John');\r\n\r\n      flattenImmutableObject(exampleImmutableObject).should.deep.equal({\r\n        name: 'John',\r\n        age: 7,\r\n        notAFunction: 'something',\r\n      });\r\n    });\r\n\r\n    it('can recursively resolve functions on an immutable object and return a flat object', () => {\r\n      const exampleImmutableObject = {\r\n        thing: () => ({\r\n          inner: () => ('okay'),\r\n        }),\r\n      };\r\n\r\n      flattenImmutableObject(exampleImmutableObject, true).should.deep.equal({\r\n        thing: {\r\n          inner: 'okay',\r\n        },\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('HTTP request creator', () => {\r\n    it('can create a simple POST request', () => {\r\n      makePostHeader('hello').should.deep.equal({\r\n        method: 'POST',\r\n        headers: {\r\n          Accept: 'application/json',\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: 'hello',\r\n      });\r\n    });\r\n\r\n    it('can create a simple POST request given an object', () => {\r\n      makePostHeader({ a: 'b' }).should.deep.equal({\r\n        method: 'POST',\r\n        headers: {\r\n          Accept: 'application/json',\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: '{\"a\":\"b\"}',\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('paramType object functions', () => {\r\n    it('can create a twitter specific paramTypes object for search terms', () => {\r\n      createTwitterParamTypes(['hashtag', 'keyword']).should.deep.equal(\r\n        [\r\n          {\r\n            name: 'author',\r\n            selected: false,\r\n            icon: 'user icon',\r\n          },\r\n          {\r\n            name: 'hashtag',\r\n            selected: true,\r\n            icon: '#',\r\n          },\r\n          {\r\n            name: 'keyword',\r\n            selected: true,\r\n            icon: 'file text icon',\r\n          },\r\n          {\r\n            name: 'mention',\r\n            selected: false,\r\n            icon: 'at icon',\r\n          },\r\n        ]\r\n      );\r\n    });\r\n\r\n    it('can toggle a paramType with the paramTypeName to toggle', () => {\r\n      const paramTypesBefore = createTwitterParamTypes(['hashtag', 'keyword']);\r\n      const paramTypesExpected = createTwitterParamTypes(['hashtag']);\r\n\r\n      deepFreeze(paramTypesBefore);\r\n\r\n      toggleParamType(paramTypesBefore, 'keyword').should.deep.equal(paramTypesExpected);\r\n    });\r\n  });\r\n\r\n  describe('creating a range', () => {\r\n    it('can create a simple range from 0 to n', () => {\r\n      range(0, 5).should.deep.equal([0, 1, 2, 3, 4]);\r\n    });\r\n\r\n    it('can create a simple range from m to n', () => {\r\n      range(2, 5).should.deep.equal([2, 3, 4]);\r\n    });\r\n\r\n    it('returns empty if m > n', () => {\r\n      range(10, 5).should.deep.equal([]);\r\n    });\r\n\r\n    it('can step correctly', () => {\r\n      range(1, 10, 2).should.deep.equal([1, 3, 5, 7, 9]);\r\n    });\r\n\r\n    it('does not allow negative steps', () => {\r\n      range(1, 10, -1).should.deep.equal([]);\r\n    });\r\n  });\r\n});\r\n\r\n"
  },
  {
    "__docId__": 500,
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe105",
    "testId": 105,
    "memberof": "src/shared/utilities.spec.js",
    "testDepth": 0,
    "longname": "src/shared/utilities.spec.js~describe105",
    "access": null,
    "description": "#Utilities",
    "lineNumber": 11
  },
  {
    "__docId__": 501,
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe106",
    "testId": 106,
    "memberof": "src/shared/utilities.spec.js~describe105",
    "testDepth": 1,
    "longname": "src/shared/utilities.spec.js~describe105.describe106",
    "access": null,
    "description": "Object flattener",
    "lineNumber": 12
  },
  {
    "__docId__": 502,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it107",
    "testId": 107,
    "memberof": "src/shared/utilities.spec.js~describe105.describe106",
    "testDepth": 2,
    "longname": "src/shared/utilities.spec.js~describe105.describe106.it107",
    "access": null,
    "description": "can flatten an object to an array",
    "lineNumber": 13
  },
  {
    "__docId__": 503,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it108",
    "testId": 108,
    "memberof": "src/shared/utilities.spec.js~describe105.describe106",
    "testDepth": 2,
    "longname": "src/shared/utilities.spec.js~describe105.describe106.it108",
    "access": null,
    "description": "can resolve functions on an immutable object and return a flat object",
    "lineNumber": 21
  },
  {
    "__docId__": 504,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it109",
    "testId": 109,
    "memberof": "src/shared/utilities.spec.js~describe105.describe106",
    "testDepth": 2,
    "longname": "src/shared/utilities.spec.js~describe105.describe106.it109",
    "access": null,
    "description": "can recursively resolve functions on an immutable object and return a flat object",
    "lineNumber": 39
  },
  {
    "__docId__": 505,
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe110",
    "testId": 110,
    "memberof": "src/shared/utilities.spec.js~describe105",
    "testDepth": 1,
    "longname": "src/shared/utilities.spec.js~describe105.describe110",
    "access": null,
    "description": "HTTP request creator",
    "lineNumber": 54
  },
  {
    "__docId__": 506,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it111",
    "testId": 111,
    "memberof": "src/shared/utilities.spec.js~describe105.describe110",
    "testDepth": 2,
    "longname": "src/shared/utilities.spec.js~describe105.describe110.it111",
    "access": null,
    "description": "can create a simple POST request",
    "lineNumber": 55
  },
  {
    "__docId__": 507,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it112",
    "testId": 112,
    "memberof": "src/shared/utilities.spec.js~describe105.describe110",
    "testDepth": 2,
    "longname": "src/shared/utilities.spec.js~describe105.describe110.it112",
    "access": null,
    "description": "can create a simple POST request given an object",
    "lineNumber": 66
  },
  {
    "__docId__": 508,
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe113",
    "testId": 113,
    "memberof": "src/shared/utilities.spec.js~describe105",
    "testDepth": 1,
    "longname": "src/shared/utilities.spec.js~describe105.describe113",
    "access": null,
    "description": "paramType object functions",
    "lineNumber": 78
  },
  {
    "__docId__": 509,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it114",
    "testId": 114,
    "memberof": "src/shared/utilities.spec.js~describe105.describe113",
    "testDepth": 2,
    "longname": "src/shared/utilities.spec.js~describe105.describe113.it114",
    "access": null,
    "description": "can create a twitter specific paramTypes object for search terms",
    "lineNumber": 79
  },
  {
    "__docId__": 510,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it115",
    "testId": 115,
    "memberof": "src/shared/utilities.spec.js~describe105.describe113",
    "testDepth": 2,
    "longname": "src/shared/utilities.spec.js~describe105.describe113.it115",
    "access": null,
    "description": "can toggle a paramType with the paramTypeName to toggle",
    "lineNumber": 106
  },
  {
    "__docId__": 511,
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe116",
    "testId": 116,
    "memberof": "src/shared/utilities.spec.js~describe105",
    "testDepth": 1,
    "longname": "src/shared/utilities.spec.js~describe105.describe116",
    "access": null,
    "description": "creating a range",
    "lineNumber": 116
  },
  {
    "__docId__": 512,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it117",
    "testId": 117,
    "memberof": "src/shared/utilities.spec.js~describe105.describe116",
    "testDepth": 2,
    "longname": "src/shared/utilities.spec.js~describe105.describe116.it117",
    "access": null,
    "description": "can create a simple range from 0 to n",
    "lineNumber": 117
  },
  {
    "__docId__": 513,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it118",
    "testId": 118,
    "memberof": "src/shared/utilities.spec.js~describe105.describe116",
    "testDepth": 2,
    "longname": "src/shared/utilities.spec.js~describe105.describe116.it118",
    "access": null,
    "description": "can create a simple range from m to n",
    "lineNumber": 121
  },
  {
    "__docId__": 514,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it119",
    "testId": 119,
    "memberof": "src/shared/utilities.spec.js~describe105.describe116",
    "testDepth": 2,
    "longname": "src/shared/utilities.spec.js~describe105.describe116.it119",
    "access": null,
    "description": "returns empty if m > n",
    "lineNumber": 125
  },
  {
    "__docId__": 515,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it120",
    "testId": 120,
    "memberof": "src/shared/utilities.spec.js~describe105.describe116",
    "testDepth": 2,
    "longname": "src/shared/utilities.spec.js~describe105.describe116.it120",
    "access": null,
    "description": "can step correctly",
    "lineNumber": 129
  },
  {
    "__docId__": 516,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it121",
    "testId": 121,
    "memberof": "src/shared/utilities.spec.js~describe105.describe116",
    "testDepth": 2,
    "longname": "src/shared/utilities.spec.js~describe105.describe116.it121",
    "access": null,
    "description": "does not allow negative steps",
    "lineNumber": 133
  }
]